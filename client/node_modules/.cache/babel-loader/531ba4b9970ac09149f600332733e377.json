{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nexport var channelReducer = function channelReducer(state, action) {\n  var _a;\n  switch (action.type) {\n    case 'closeThread':\n      {\n        return __assign(__assign({}, state), {\n          thread: null,\n          threadLoadingMore: false,\n          threadMessages: []\n        });\n      }\n    case 'copyMessagesFromChannel':\n      {\n        var channel = action.channel,\n          parentId = action.parentId;\n        return __assign(__assign({}, state), {\n          messages: __spreadArray([], channel.state.messages, true),\n          pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true),\n          // copying messages from channel happens with new message - this resets the suppressAutoscroll\n          suppressAutoscroll: false,\n          threadMessages: parentId ? __assign({}, channel.state.threads)[parentId] || [] : state.threadMessages\n        });\n      }\n    case 'copyStateFromChannelOnEvent':\n      {\n        var channel = action.channel;\n        return __assign(__assign({}, state), {\n          members: __assign({}, channel.state.members),\n          messages: __spreadArray([], channel.state.messages, true),\n          pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true),\n          read: __assign({}, channel.state.read),\n          watcherCount: channel.state.watcher_count,\n          watchers: __assign({}, channel.state.watchers)\n        });\n      }\n    case 'initStateFromChannel':\n      {\n        var channel = action.channel;\n        return __assign(__assign({}, state), {\n          loading: false,\n          members: __assign({}, channel.state.members),\n          messages: __spreadArray([], channel.state.messages, true),\n          pinnedMessages: __spreadArray([], channel.state.pinnedMessages, true),\n          read: __assign({}, channel.state.read),\n          watcherCount: channel.state.watcher_count,\n          watchers: __assign({}, channel.state.watchers)\n        });\n      }\n    case 'jumpToLatestMessage':\n      {\n        return __assign(__assign({}, state), {\n          hasMoreNewer: false,\n          highlightedMessageId: undefined,\n          loading: false,\n          suppressAutoscroll: false\n        });\n      }\n    case 'jumpToMessageFinished':\n      {\n        return __assign(__assign({}, state), {\n          hasMoreNewer: action.hasMoreNewer,\n          highlightedMessageId: action.highlightedMessageId\n        });\n      }\n    case 'clearHighlightedMessage':\n      {\n        return __assign(__assign({}, state), {\n          highlightedMessageId: undefined\n        });\n      }\n    case 'loadMoreFinished':\n      {\n        var hasMore = action.hasMore,\n          messages = action.messages;\n        return __assign(__assign({}, state), {\n          hasMore: hasMore,\n          loadingMore: false,\n          messages: messages,\n          suppressAutoscroll: false\n        });\n      }\n    case 'loadMoreNewerFinished':\n      {\n        var hasMoreNewer = action.hasMoreNewer,\n          messages = action.messages;\n        return __assign(__assign({}, state), {\n          hasMoreNewer: hasMoreNewer,\n          loadingMoreNewer: false,\n          messages: messages\n        });\n      }\n    case 'loadMoreThreadFinished':\n      {\n        var threadHasMore = action.threadHasMore,\n          threadMessages = action.threadMessages;\n        return __assign(__assign({}, state), {\n          threadHasMore: threadHasMore,\n          threadLoadingMore: false,\n          threadMessages: threadMessages\n        });\n      }\n    case 'openThread':\n      {\n        var channel = action.channel,\n          message = action.message;\n        return __assign(__assign({}, state), {\n          thread: message,\n          threadMessages: message.id ? __assign({}, channel.state.threads)[message.id] || [] : [],\n          threadSuppressAutoscroll: false\n        });\n      }\n    case 'setError':\n      {\n        var error = action.error;\n        return __assign(__assign({}, state), {\n          error: error\n        });\n      }\n    case 'setLoadingMore':\n      {\n        var loadingMore = action.loadingMore;\n        // suppress the autoscroll behavior\n        return __assign(__assign({}, state), {\n          loadingMore: loadingMore,\n          suppressAutoscroll: loadingMore\n        });\n      }\n    case 'setLoadingMoreNewer':\n      {\n        var loadingMoreNewer = action.loadingMoreNewer;\n        return __assign(__assign({}, state), {\n          loadingMoreNewer: loadingMoreNewer\n        });\n      }\n    case 'setThread':\n      {\n        var message = action.message;\n        return __assign(__assign({}, state), {\n          thread: message\n        });\n      }\n    case 'setTyping':\n      {\n        var channel = action.channel;\n        return __assign(__assign({}, state), {\n          typing: __assign({}, channel.state.typing)\n        });\n      }\n    case 'startLoadingThread':\n      {\n        return __assign(__assign({}, state), {\n          threadLoadingMore: true,\n          threadSuppressAutoscroll: true\n        });\n      }\n    case 'updateThreadOnEvent':\n      {\n        var channel = action.channel,\n          message = action.message;\n        if (!state.thread) return state;\n        return __assign(__assign({}, state), {\n          thread: (message === null || message === void 0 ? void 0 : message.id) === state.thread.id ? channel.state.formatMessage(message) : state.thread,\n          threadMessages: ((_a = state.thread) === null || _a === void 0 ? void 0 : _a.id) ? __assign({}, channel.state.threads)[state.thread.id] || [] : []\n        });\n      }\n    default:\n      return state;\n  }\n};\nexport var initialState = {\n  error: null,\n  hasMore: true,\n  hasMoreNewer: false,\n  loading: true,\n  loadingMore: false,\n  members: {},\n  messages: [],\n  pinnedMessages: [],\n  read: {},\n  suppressAutoscroll: false,\n  thread: null,\n  threadHasMore: true,\n  threadLoadingMore: false,\n  threadMessages: [],\n  threadSuppressAutoscroll: false,\n  typing: {},\n  watcherCount: 0,\n  watchers: {}\n};","map":null,"metadata":{},"sourceType":"module"}