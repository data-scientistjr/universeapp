{"ast":null,"code":"'use strict';\n\n/**\nBase interface for a node in an XML document.\n\n@public\n*/\nvar _classCallCheck = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar XmlNode = /*#__PURE__*/function () {\n  function XmlNode() {\n    _classCallCheck(this, XmlNode);\n    /**\n    Parent node of this node, or `null` if this node has no parent.\n     @type {XmlDocument|XmlElement|null}\n    @public\n    */\n    this.parent = null;\n  }\n\n  /**\n  Document that contains this node, or `null` if this node is not associated\n  with a document.\n   @type {XmlDocument?}\n  @public\n  */\n  _createClass(XmlNode, [{\n    key: \"toJSON\",\n    /**\n    Returns a JSON-serializable object representing this node, minus properties\n    that could result in circular references.\n     @returns {{[key: string]: any}}\n    @public\n    */\n    value: function toJSON() {\n      /** @type {{[key: string]: any}} */\n      var json = {\n        type: this.type\n      };\n      if (this.isRootNode) {\n        json.isRootNode = true;\n      }\n      if (this.preserveWhitespace) {\n        json.preserveWhitespace = true;\n      }\n      return json;\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.parent ? this.parent.document : null;\n    }\n    /**\n    Whether this node is the root node of the document.\n     @returns {boolean}\n    @public\n    */\n  }, {\n    key: \"isRootNode\",\n    get: function get() {\n      return this.parent ? this.parent === this.document : false;\n    }\n    /**\n    Whether whitespace should be preserved in the content of this element and\n    its children.\n     This is influenced by the value of the special `xml:space` attribute, and\n    will be `true` for any node whose `xml:space` attribute is set to\n    \"preserve\". If a node has no such attribute, it will inherit the value of\n    the nearest ancestor that does (if any).\n     @type {boolean}\n    @see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-white-space\n    @public\n    */\n  }, {\n    key: \"preserveWhitespace\",\n    get: function get() {\n      return Boolean(this.parent && this.parent.preserveWhitespace);\n    }\n    /**\n    Type of this node.\n     The value of this property is a string that matches one of the static `TYPE_*`\n    properties on the `XmlNode` class (e.g. `TYPE_ELEMENT`, `TYPE_TEXT`, etc.).\n     The `XmlNode` class itself is a base class and doesn't have its own type name.\n     @type {string}\n    @public\n    */\n  }, {\n    key: \"type\",\n    get: function get() {\n      return '';\n    }\n  }]);\n  return XmlNode;\n}();\n/**\nType value for an `XmlCdata` node.\n\n@type {string}\n@public\n*/\nXmlNode.TYPE_CDATA = 'cdata';\n\n/**\nType value for an `XmlComment` node.\n\n@type {string}\n@public\n*/\nXmlNode.TYPE_COMMENT = 'comment';\n\n/**\nType value for an `XmlDocument` node.\n\n@type {string}\n@public\n*/\nXmlNode.TYPE_DOCUMENT = 'document';\n\n/**\nType value for an `XmlElement` node.\n\n@type {string}\n@public\n*/\nXmlNode.TYPE_ELEMENT = 'element';\n\n/**\nType value for an `XmlProcessingInstruction` node.\n\n@type {string}\n@public\n*/\nXmlNode.TYPE_PROCESSING_INSTRUCTION = 'pi';\n\n/**\nType value for an `XmlText` node.\n\n@type {string}\n@public\n*/\nXmlNode.TYPE_TEXT = 'text';\nmodule.exports = XmlNode;\n\n/** @typedef {import('./XmlDocument')} XmlDocument */\n/** @typedef {import('./XmlElement')} XmlElement */","map":null,"metadata":{},"sourceType":"script"}