{"ast":null,"code":"import _objectSpread from \"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  var indexStack = state.indexStack;\n  var children = parent.children || [];\n  var tracker = state.createTracker(info);\n  /** @type {Array<string>} */\n  var results = [];\n  var index = -1;\n  indexStack.push(-1);\n  while (++index < children.length) {\n    var child = children[index];\n    indexStack[indexStack.length - 1] = index;\n    results.push(tracker.move(state.handle(child, parent, state, _objectSpread({\n      before: '\\n',\n      after: '\\n'\n    }, tracker.current()))));\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined;\n    }\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1], parent, state)));\n    }\n  }\n  indexStack.pop();\n  return results.join('');\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  var index = state.join.length;\n  while (index--) {\n    var result = state.join[index](left, right, parent, state);\n    if (result === true || result === 1) {\n      break;\n    }\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result);\n    }\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n';\n    }\n  }\n  return '\\n\\n';\n}","map":null,"metadata":{},"sourceType":"module"}