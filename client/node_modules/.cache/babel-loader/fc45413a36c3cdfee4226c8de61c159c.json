{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\n//@ts-expect-error\nimport DefaultEmojiIndex from 'emoji-mart/dist/utils/emoji-index/nimble-emoji-index.js';\nvar DefaultEmoji = React.lazy(function () {\n  return import('./DefaultEmoji');\n});\nvar DefaultEmojiPicker = React.lazy(function () {\n  return import('./DefaultEmojiPicker');\n});\nexport var EmojiContext = React.createContext(undefined);\nexport var EmojiProvider = function EmojiProvider(_a) {\n  var children = _a.children,\n    value = _a.value;\n  var _b = value.Emoji,\n    Emoji = _b === void 0 ? DefaultEmoji : _b,\n    emojiConfig = value.emojiConfig,\n    _c = value.EmojiIndex,\n    EmojiIndex = _c === void 0 ? DefaultEmojiIndex : _c,\n    _d = value.EmojiPicker,\n    EmojiPicker = _d === void 0 ? DefaultEmojiPicker : _d;\n  var emojiContextValue = {\n    Emoji: Emoji,\n    emojiConfig: emojiConfig,\n    EmojiIndex: EmojiIndex,\n    EmojiPicker: EmojiPicker\n  };\n  return React.createElement(EmojiContext.Provider, {\n    value: emojiContextValue\n  }, children);\n};\nexport var useEmojiContext = function useEmojiContext(componentName) {\n  var contextValue = useContext(EmojiContext);\n  if (!contextValue) {\n    console.warn(\"The useEmojiContext hook was called outside of the EmojiContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \".concat(componentName, \" component.\"));\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if EmojiContext\n * typing is desired while using the HOC withEmojiContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withEmojiContext = function withEmojiContext(Component) {\n  var WithEmojiContextComponent = function WithEmojiContextComponent(props) {\n    var componentContext = useEmojiContext();\n    return React.createElement(Component, __assign({}, props, componentContext));\n  };\n  WithEmojiContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithEmojiContextComponent;\n};","map":null,"metadata":{},"sourceType":"module"}