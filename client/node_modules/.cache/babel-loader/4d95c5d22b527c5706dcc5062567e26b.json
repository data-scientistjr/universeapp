{"ast":null,"code":"import { useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport { useMessageListScrollManager } from './useMessageListScrollManager';\nexport var useScrollLocationLogic = function useScrollLocationLogic(params) {\n  var loadMoreScrollThreshold = params.loadMoreScrollThreshold,\n    _a = params.messages,\n    messages = _a === void 0 ? [] : _a,\n    _b = params.scrolledUpThreshold,\n    scrolledUpThreshold = _b === void 0 ? 200 : _b,\n    hasMoreNewer = params.hasMoreNewer,\n    suppressAutoscroll = params.suppressAutoscroll,\n    listElement = params.listElement;\n  var _c = useState(false),\n    hasNewMessages = _c[0],\n    setHasNewMessages = _c[1];\n  var _d = useState(),\n    wrapperRect = _d[0],\n    setWrapperRect = _d[1];\n  var _e = useState(true),\n    isMessageListScrolledToBottom = _e[0],\n    setIsMessageListScrolledToBottom = _e[1];\n  var closeToBottom = useRef(false);\n  var closeToTop = useRef(false);\n  var scrollCounter = useRef({\n    autoScroll: 0,\n    scroll: 0\n  });\n  var scrollToBottom = useCallback(function () {\n    if (!(listElement === null || listElement === void 0 ? void 0 : listElement.scrollTo) || hasMoreNewer || suppressAutoscroll) {\n      return;\n    }\n    scrollCounter.current.autoScroll += 1;\n    listElement.scrollTo({\n      top: listElement.scrollHeight\n    });\n    setHasNewMessages(false);\n  }, [listElement, hasMoreNewer, suppressAutoscroll]);\n  useLayoutEffect(function () {\n    if (listElement) {\n      setWrapperRect(listElement.getBoundingClientRect());\n      scrollToBottom();\n    }\n  }, [listElement, hasMoreNewer]);\n  var updateScrollTop = useMessageListScrollManager({\n    loadMoreScrollThreshold: loadMoreScrollThreshold,\n    messages: messages,\n    onScrollBy: function onScrollBy(scrollBy) {\n      listElement === null || listElement === void 0 ? void 0 : listElement.scrollBy({\n        top: scrollBy\n      });\n    },\n    scrollContainerMeasures: function scrollContainerMeasures() {\n      return {\n        offsetHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.offsetHeight) || 0,\n        scrollHeight: (listElement === null || listElement === void 0 ? void 0 : listElement.scrollHeight) || 0\n      };\n    },\n    scrolledUpThreshold: scrolledUpThreshold,\n    scrollToBottom: scrollToBottom,\n    showNewMessages: function showNewMessages() {\n      return setHasNewMessages(true);\n    }\n  });\n  var onScroll = useCallback(function (event) {\n    var element = event.target;\n    var scrollTop = element.scrollTop;\n    updateScrollTop(scrollTop);\n    var offsetHeight = element.offsetHeight;\n    var scrollHeight = element.scrollHeight;\n    var prevCloseToBottom = closeToBottom.current;\n    closeToBottom.current = scrollHeight - (scrollTop + offsetHeight) < scrolledUpThreshold;\n    closeToTop.current = scrollTop < scrolledUpThreshold;\n    if (closeToBottom.current) {\n      setHasNewMessages(false);\n    }\n    if (prevCloseToBottom && !closeToBottom.current) {\n      setIsMessageListScrolledToBottom(false);\n    } else if (!prevCloseToBottom && closeToBottom.current) {\n      setIsMessageListScrolledToBottom(true);\n    }\n  }, [updateScrollTop, closeToTop, closeToBottom, scrolledUpThreshold]);\n  return {\n    hasNewMessages: hasNewMessages,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    onScroll: onScroll,\n    scrollToBottom: scrollToBottom,\n    wrapperRect: wrapperRect\n  };\n};","map":null,"metadata":{},"sourceType":"module"}