{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport uniqBy from 'lodash.uniqby';\n/**\n * prevent from duplicate invocation of channel.watch()\n * when events 'notification.message_new' and 'notification.added_to_channel' arrive at the same time\n */\nvar WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};\n/**\n * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.\n * @param client\n * @param type\n * @param id\n */\nexport var getChannel = function getChannel(client, type, id) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var channel, queryPromise;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          channel = client.channel(type, id);\n          queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[channel.cid];\n          if (!queryPromise) return [3 /*break*/, 2];\n          return [4 /*yield*/, queryPromise];\n        case 1:\n          _a.sent();\n          return [3 /*break*/, 4];\n        case 2:\n          WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[channel.cid] = channel.watch();\n          return [4 /*yield*/, WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[channel.cid]];\n        case 3:\n          _a.sent();\n          WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[channel.cid] = undefined;\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/, channel];\n      }\n    });\n  });\n};\nexport var MAX_QUERY_CHANNELS_LIMIT = 30;\nexport var moveChannelUp = function moveChannelUp(_a) {\n  var activeChannel = _a.activeChannel,\n    channels = _a.channels,\n    cid = _a.cid;\n  // get index of channel to move up\n  var channelIndex = channels.findIndex(function (channel) {\n    return channel.cid === cid;\n  });\n  if (!activeChannel && channelIndex <= 0) return channels;\n  // get channel to move up\n  var channel = activeChannel || channels[channelIndex];\n  return uniqBy(__spreadArray([channel], channels, true), 'cid');\n};","map":null,"metadata":{},"sourceType":"module"}