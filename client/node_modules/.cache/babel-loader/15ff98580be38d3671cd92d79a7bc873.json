{"ast":null,"code":"import React from 'react';\nimport clsx from 'clsx';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useTypingContext } from '../../context/TypingContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar useJoinTypingUsers = function useJoinTypingUsers(names) {\n  var t = useTranslationContext().t;\n  if (!names.length) return null;\n  var name = names[0],\n    rest = names.slice(1);\n  if (names.length === 1) return t('{{ user }} is typing...', {\n    user: name\n  });\n  var MAX_JOINED_USERS = 3;\n  var isLargeArray = names.length > MAX_JOINED_USERS;\n  var joinedUsers = (isLargeArray ? names.slice(0, MAX_JOINED_USERS) : rest).join(', ').trim();\n  if (isLargeArray) return t('{{ users }} and more are typing...', {\n    users: joinedUsers\n  });\n  return t('{{ users }} and {{ user }} are typing...', {\n    user: name,\n    users: joinedUsers\n  });\n};\n/**\n * TypingIndicator lists users currently typing, it needs to be a child of Channel component\n */\nvar UnMemoizedTypingIndicator = function UnMemoizedTypingIndicator(props) {\n  var PropAvatar = props.Avatar,\n    _a = props.avatarSize,\n    avatarSize = _a === void 0 ? 32 : _a,\n    threadList = props.threadList;\n  var _b = useChannelStateContext('TypingIndicator'),\n    channelConfig = _b.channelConfig,\n    thread = _b.thread;\n  var _c = useChatContext('TypingIndicator'),\n    client = _c.client,\n    themeVersion = _c.themeVersion;\n  var ContextAvatar = useComponentContext('TypingIndicator').Avatar;\n  var _d = useTypingContext('TypingIndicator').typing,\n    typing = _d === void 0 ? {} : _d;\n  var Avatar = PropAvatar || ContextAvatar || DefaultAvatar;\n  var typingInChannel = !threadList ? Object.values(typing).filter(function (_a) {\n    var _b;\n    var parent_id = _a.parent_id,\n      user = _a.user;\n    return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && !parent_id;\n  }) : [];\n  var typingInThread = threadList ? Object.values(typing).filter(function (_a) {\n    var _b;\n    var parent_id = _a.parent_id,\n      user = _a.user;\n    return (user === null || user === void 0 ? void 0 : user.id) !== ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id) && parent_id === (thread === null || thread === void 0 ? void 0 : thread.id);\n  }) : [];\n  var typingUserList = (threadList ? typingInThread : typingInChannel).map(function (_a) {\n    var user = _a.user;\n    return (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id);\n  }).filter(Boolean);\n  var joinedTypingUsers = useJoinTypingUsers(typingUserList);\n  var isTypingActive = threadList && typingInThread.length || !threadList && typingInChannel.length;\n  if ((channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.typing_events) === false) {\n    return null;\n  }\n  if (themeVersion === '2') {\n    if (!isTypingActive) return null;\n    return React.createElement(\"div\", {\n      className: clsx('str-chat__typing-indicator', {\n        'str-chat__typing-indicator--typing': isTypingActive\n      }),\n      \"data-testid\": 'typing-indicator'\n    }, React.createElement(\"div\", {\n      className: 'str-chat__typing-indicator__dots'\n    }, React.createElement(\"span\", {\n      className: 'str-chat__typing-indicator__dot'\n    }), React.createElement(\"span\", {\n      className: 'str-chat__typing-indicator__dot'\n    }), React.createElement(\"span\", {\n      className: 'str-chat__typing-indicator__dot'\n    })), React.createElement(\"div\", {\n      className: 'str-chat__typing-indicator__users',\n      \"data-testid\": 'typing-users'\n    }, joinedTypingUsers));\n  }\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__typing-indicator', {\n      'str-chat__typing-indicator--typing': isTypingActive\n    })\n  }, React.createElement(\"div\", {\n    className: 'str-chat__typing-indicator__avatars'\n  }, (threadList ? typingInThread : typingInChannel).map(function (_a, i) {\n    var user = _a.user;\n    return React.createElement(Avatar, {\n      image: user === null || user === void 0 ? void 0 : user.image,\n      key: \"\".concat(user === null || user === void 0 ? void 0 : user.id, \"-\").concat(i),\n      name: (user === null || user === void 0 ? void 0 : user.name) || (user === null || user === void 0 ? void 0 : user.id),\n      size: avatarSize,\n      user: user\n    });\n  })), React.createElement(\"div\", {\n    className: 'str-chat__typing-indicator__dots'\n  }, React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  })));\n};\nexport var TypingIndicator = React.memo(UnMemoizedTypingIndicator);","map":null,"metadata":{},"sourceType":"module"}