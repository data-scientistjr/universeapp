{"ast":null,"code":"import { isValidElementType } from 'react-is';\nexport var DEFAULT_CARET_POSITION = 'next';\nexport function defaultScrollToItem(container, item) {\n  if (!item) return;\n  var itemHeight = parseInt(getComputedStyle(item).getPropertyValue('height'), 10);\n  var containerHight = parseInt(getComputedStyle(container).getPropertyValue('height'), 10) - itemHeight;\n  var actualScrollTop = container.scrollTop;\n  var itemOffsetTop = item.offsetTop;\n  if (itemOffsetTop < actualScrollTop + containerHight && actualScrollTop < itemOffsetTop) {\n    return;\n  }\n  // eslint-disable-next-line\n  container.scrollTop = itemOffsetTop;\n}\nexport var errorMessage = function errorMessage(message) {\n  return console.error(\"RTA: dataProvider fails: \".concat(message, \"\\n    \\nCheck the documentation or create issue if you think it's bug. https://github.com/webscopeio/react-textarea-autocomplete/issues\"));\n};\nexport var triggerPropsCheck = function triggerPropsCheck(_a) {\n  var trigger = _a.trigger;\n  if (!trigger) return Error('Invalid prop trigger. Prop missing.');\n  var triggers = Object.entries(trigger);\n  for (var i = 0; i < triggers.length; i += 1) {\n    var _b = triggers[i],\n      triggerChar = _b[0],\n      settings = _b[1];\n    if (typeof triggerChar !== 'string' || triggerChar.length !== 1) {\n      return Error('Invalid prop trigger. Keys of the object has to be string / one character.');\n    }\n    // $FlowFixMe\n    var triggerSetting = settings;\n    var callback = triggerSetting.callback,\n      component = triggerSetting.component,\n      dataProvider = triggerSetting.dataProvider,\n      output = triggerSetting.output;\n    if (!isValidElementType(component)) {\n      return Error('Invalid prop trigger: component should be defined.');\n    }\n    if (!dataProvider || typeof dataProvider !== 'function') {\n      return Error('Invalid prop trigger: dataProvider should be defined.');\n    }\n    if (output && typeof output !== 'function') {\n      return Error('Invalid prop trigger: output should be a function.');\n    }\n    if (callback && typeof callback !== 'function') {\n      return Error('Invalid prop trigger: callback should be a function.');\n    }\n  }\n  return null;\n};","map":null,"metadata":{},"sourceType":"module"}