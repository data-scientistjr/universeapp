{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { useChannelDeletedListener } from './hooks/useChannelDeletedListener';\nimport { useChannelHiddenListener } from './hooks/useChannelHiddenListener';\nimport { useChannelTruncatedListener } from './hooks/useChannelTruncatedListener';\nimport { useChannelUpdatedListener } from './hooks/useChannelUpdatedListener';\nimport { useChannelVisibleListener } from './hooks/useChannelVisibleListener';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMessageNewListener } from './hooks/useMessageNewListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { useNotificationAddedToChannelListener } from './hooks/useNotificationAddedToChannelListener';\nimport { useNotificationMessageNewListener } from './hooks/useNotificationMessageNewListener';\nimport { useNotificationRemovedFromChannelListener } from './hooks/useNotificationRemovedFromChannelListener';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useUserPresenceChangedListener } from './hooks/useUserPresenceChangedListener';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUp } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar/Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch } from '../ChannelSearch/ChannelSearch';\nimport { ChatDown } from '../ChatDown/ChatDown';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { useChatContext } from '../../context/ChatContext';\nvar DEFAULT_FILTERS = {};\nvar DEFAULT_OPTIONS = {};\nvar DEFAULT_SORT = {};\nvar UnMemoizedChannelList = function UnMemoizedChannelList(props) {\n  var _a, _b;\n  var additionalChannelSearchProps = props.additionalChannelSearchProps,\n    _c = props.Avatar,\n    Avatar = _c === void 0 ? DefaultAvatar : _c,\n    allowNewMessagesFromUnfilteredChannels = props.allowNewMessagesFromUnfilteredChannels,\n    channelRenderFilterFn = props.channelRenderFilterFn,\n    _d = props.ChannelSearch,\n    ChannelSearch = _d === void 0 ? DefaultChannelSearch : _d,\n    customActiveChannel = props.customActiveChannel,\n    _e = props.EmptyStateIndicator,\n    EmptyStateIndicator = _e === void 0 ? DefaultEmptyStateIndicator : _e,\n    filters = props.filters,\n    _f = props.LoadingErrorIndicator,\n    LoadingErrorIndicator = _f === void 0 ? ChatDown : _f,\n    _g = props.LoadingIndicator,\n    LoadingIndicator = _g === void 0 ? LoadingChannels : _g,\n    _h = props.List,\n    List = _h === void 0 ? ChannelListMessenger : _h,\n    lockChannelOrder = props.lockChannelOrder,\n    onAddedToChannel = props.onAddedToChannel,\n    onChannelDeleted = props.onChannelDeleted,\n    onChannelHidden = props.onChannelHidden,\n    onChannelTruncated = props.onChannelTruncated,\n    onChannelUpdated = props.onChannelUpdated,\n    onChannelVisible = props.onChannelVisible,\n    onMessageNew = props.onMessageNew,\n    onRemovedFromChannel = props.onRemovedFromChannel,\n    options = props.options,\n    _j = props.Paginator,\n    Paginator = _j === void 0 ? LoadMorePaginator : _j,\n    Preview = props.Preview,\n    renderChannels = props.renderChannels,\n    _k = props.sendChannelsToList,\n    sendChannelsToList = _k === void 0 ? false : _k,\n    _l = props.setActiveChannelOnMount,\n    setActiveChannelOnMount = _l === void 0 ? true : _l,\n    _m = props.showChannelSearch,\n    showChannelSearch = _m === void 0 ? false : _m,\n    _o = props.sort,\n    sort = _o === void 0 ? DEFAULT_SORT : _o,\n    _p = props.watchers,\n    watchers = _p === void 0 ? {} : _p;\n  var _q = useChatContext('ChannelList'),\n    channel = _q.channel,\n    channelsQueryState = _q.channelsQueryState,\n    client = _q.client,\n    closeMobileNav = _q.closeMobileNav,\n    customClasses = _q.customClasses,\n    _r = _q.navOpen,\n    navOpen = _r === void 0 ? false : _r,\n    setActiveChannel = _q.setActiveChannel,\n    theme = _q.theme,\n    useImageFlagEmojisOnWindows = _q.useImageFlagEmojisOnWindows;\n  var channelListRef = useRef(null);\n  var _s = useState(0),\n    channelUpdateCount = _s[0],\n    setChannelUpdateCount = _s[1];\n  var _t = useState(false),\n    searchActive = _t[0],\n    setSearchActive = _t[1];\n  /**\n   * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n   * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n   */\n  var activeChannelHandler = function activeChannelHandler(channels, setChannels) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var customActiveChannelObject, newChannels;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!channels.length || channels.length > ((options === null || options === void 0 ? void 0 : options.limit) || MAX_QUERY_CHANNELS_LIMIT)) {\n              return [2 /*return*/];\n            }\n\n            if (!customActiveChannel) return [3 /*break*/, 3];\n            customActiveChannelObject = channels.find(function (chan) {\n              return chan.id === customActiveChannel;\n            });\n            if (!!customActiveChannelObject) return [3 /*break*/, 2];\n            return [4 /*yield*/, client.queryChannels({\n              id: customActiveChannel\n            })];\n          case 1:\n            //@ts-expect-error\n            customActiveChannelObject = _a.sent()[0];\n            _a.label = 2;\n          case 2:\n            if (customActiveChannelObject) {\n              setActiveChannel(customActiveChannelObject, watchers);\n              newChannels = moveChannelUp({\n                activeChannel: customActiveChannelObject,\n                channels: channels,\n                cid: customActiveChannelObject.cid\n              });\n              setChannels(newChannels);\n            }\n            return [2 /*return*/];\n          case 3:\n            if (setActiveChannelOnMount) {\n              setActiveChannel(channels[0], watchers);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * For some events, inner properties on the channel will update but the shallow comparison will not\n   * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n   */\n  var forceUpdate = function forceUpdate() {\n    return setChannelUpdateCount(function (count) {\n      return count + 1;\n    });\n  };\n  var onSearch = useCallback(function (event) {\n    var _a;\n    if (!event.target.value) {\n      setSearchActive(false);\n    } else {\n      setSearchActive(true);\n    }\n    (_a = additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.onSearch) === null || _a === void 0 ? void 0 : _a.call(additionalChannelSearchProps, event);\n  }, []);\n  var onSearchExit = useCallback(function () {\n    var _a;\n    setSearchActive(false);\n    (_a = additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.onSearchExit) === null || _a === void 0 ? void 0 : _a.call(additionalChannelSearchProps);\n  }, []);\n  var _u = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler),\n    channels = _u.channels,\n    hasNextPage = _u.hasNextPage,\n    loadNextPage = _u.loadNextPage,\n    setChannels = _u.setChannels;\n  var loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;\n  useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n  useMessageNewListener(setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);\n  useNotificationMessageNewListener(setChannels, onMessageNew, allowNewMessagesFromUnfilteredChannels);\n  useNotificationAddedToChannelListener(setChannels, onAddedToChannel, allowNewMessagesFromUnfilteredChannels);\n  useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);\n  useChannelDeletedListener(setChannels, onChannelDeleted);\n  useChannelHiddenListener(setChannels, onChannelHidden);\n  useChannelVisibleListener(setChannels, onChannelVisible);\n  useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);\n  useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);\n  useConnectionRecoveredListener(forceUpdate);\n  useUserPresenceChangedListener(setChannels);\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      if (event.cid === (channel === null || channel === void 0 ? void 0 : channel.cid)) {\n        setActiveChannel();\n      }\n    };\n    client.on('channel.deleted', handleEvent);\n    client.on('channel.hidden', handleEvent);\n    return function () {\n      client.off('channel.deleted', handleEvent);\n      client.off('channel.hidden', handleEvent);\n    };\n  }, [channel === null || channel === void 0 ? void 0 : channel.cid]);\n  var renderChannel = function renderChannel(item) {\n    var previewProps = {\n      activeChannel: channel,\n      Avatar: Avatar,\n      channel: item,\n      // forces the update of preview component on channel update\n      channelUpdateCount: channelUpdateCount,\n      key: item.id,\n      Preview: Preview,\n      setActiveChannel: setActiveChannel,\n      watchers: watchers\n    };\n    return React.createElement(ChannelPreview, __assign({}, previewProps));\n  };\n  var className = clsx((_a = customClasses === null || customClasses === void 0 ? void 0 : customClasses.chat) !== null && _a !== void 0 ? _a : 'str-chat', theme, (_b = customClasses === null || customClasses === void 0 ? void 0 : customClasses.channelList) !== null && _b !== void 0 ? _b : 'str-chat-channel-list str-chat__channel-list str-chat__channel-list-react', {\n    'str-chat--windows-flags': useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),\n    'str-chat-channel-list--open': navOpen\n  });\n  var showChannelList = !searchActive || (additionalChannelSearchProps === null || additionalChannelSearchProps === void 0 ? void 0 : additionalChannelSearchProps.popupResults);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: className,\n    ref: channelListRef\n  }, showChannelSearch && React.createElement(ChannelSearch, __assign({\n    onSearch: onSearch,\n    onSearchExit: onSearchExit,\n    setChannels: setChannels\n  }, additionalChannelSearchProps)), showChannelList && React.createElement(List, {\n    error: channelsQueryState.error,\n    loadedChannels: sendChannelsToList ? loadedChannels : undefined,\n    loading: channelsQueryState.queryInProgress === 'reload',\n    LoadingErrorIndicator: LoadingErrorIndicator,\n    LoadingIndicator: LoadingIndicator,\n    setChannels: setChannels\n  }, !(loadedChannels === null || loadedChannels === void 0 ? void 0 : loadedChannels.length) ? React.createElement(EmptyStateIndicator, {\n    listType: 'channel'\n  }) : React.createElement(Paginator, {\n    hasNextPage: hasNextPage,\n    isLoading: channelsQueryState.queryInProgress === 'load-more',\n    loadNextPage: loadNextPage\n  }, renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map(function (channel) {\n    return renderChannel(channel);\n  })))));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\nexport var ChannelList = React.memo(UnMemoizedChannelList);","map":null,"metadata":{},"sourceType":"module"}