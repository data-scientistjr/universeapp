{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useChannelSearch } from './hooks/useChannelSearch';\nimport { SearchBar as DefaultSearchBar } from './SearchBar';\nimport { SearchInput as DefaultSearchInput } from './SearchInput';\nimport { SearchResults } from './SearchResults';\nvar UnMemoizedChannelSearch = function UnMemoizedChannelSearch(props) {\n  var AppMenu = props.AppMenu,\n    ClearInputIcon = props.ClearInputIcon,\n    ExitSearchIcon = props.ExitSearchIcon,\n    MenuIcon = props.MenuIcon,\n    placeholder = props.placeholder,\n    _a = props.popupResults,\n    popupResults = _a === void 0 ? false : _a,\n    _b = props.SearchBar,\n    SearchBar = _b === void 0 ? DefaultSearchBar : _b,\n    SearchEmpty = props.SearchEmpty,\n    _c = props.SearchInput,\n    SearchInput = _c === void 0 ? DefaultSearchInput : _c,\n    SearchLoading = props.SearchLoading,\n    SearchInputIcon = props.SearchInputIcon,\n    SearchResultItem = props.SearchResultItem,\n    SearchResultsList = props.SearchResultsList,\n    SearchResultsHeader = props.SearchResultsHeader,\n    channelSearchParams = __rest(props, [\"AppMenu\", \"ClearInputIcon\", \"ExitSearchIcon\", \"MenuIcon\", \"placeholder\", \"popupResults\", \"SearchBar\", \"SearchEmpty\", \"SearchInput\", \"SearchLoading\", \"SearchInputIcon\", \"SearchResultItem\", \"SearchResultsList\", \"SearchResultsHeader\"]);\n  var themeVersion = useChatContext('ChannelSearch').themeVersion;\n  var _d = useChannelSearch(channelSearchParams),\n    activateSearch = _d.activateSearch,\n    clearState = _d.clearState,\n    exitSearch = _d.exitSearch,\n    inputIsFocused = _d.inputIsFocused,\n    inputRef = _d.inputRef,\n    onSearch = _d.onSearch,\n    query = _d.query,\n    results = _d.results,\n    searchBarRef = _d.searchBarRef,\n    searching = _d.searching,\n    selectResult = _d.selectResult;\n  var showSearchBarV2 = themeVersion === '2';\n  return React.createElement(\"div\", {\n    className: 'str-chat__channel-search',\n    \"data-testid\": 'channel-search'\n  }, showSearchBarV2 ? React.createElement(SearchBar, {\n    activateSearch: activateSearch,\n    AppMenu: AppMenu,\n    ClearInputIcon: ClearInputIcon,\n    clearState: clearState,\n    disabled: channelSearchParams.disabled,\n    exitSearch: exitSearch,\n    ExitSearchIcon: ExitSearchIcon,\n    inputIsFocused: inputIsFocused,\n    inputRef: inputRef,\n    MenuIcon: MenuIcon,\n    onSearch: onSearch,\n    placeholder: placeholder,\n    query: query,\n    searchBarRef: searchBarRef,\n    SearchInput: SearchInput,\n    SearchInputIcon: SearchInputIcon\n  }) : React.createElement(SearchInput, {\n    clearState: clearState,\n    disabled: channelSearchParams.disabled,\n    inputRef: inputRef,\n    onSearch: onSearch,\n    placeholder: placeholder,\n    query: query\n  }), query && React.createElement(SearchResults, {\n    popupResults: popupResults,\n    results: results,\n    SearchEmpty: SearchEmpty,\n    searching: searching,\n    SearchLoading: SearchLoading,\n    SearchResultItem: SearchResultItem,\n    SearchResultsHeader: SearchResultsHeader,\n    SearchResultsList: SearchResultsList,\n    selectResult: selectResult\n  }));\n};\n/**\n * The ChannelSearch component makes a query users call and displays the results in a list.\n * Clicking on a list item will navigate you into a channel with the selected user. It can be used\n * on its own or added to the ChannelList component by setting the `showChannelSearch` prop to true.\n */\nexport var ChannelSearch = React.memo(UnMemoizedChannelSearch);","map":null,"metadata":{},"sourceType":"module"}