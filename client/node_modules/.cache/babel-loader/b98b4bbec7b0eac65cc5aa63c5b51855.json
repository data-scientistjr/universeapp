{"ast":null,"code":"import { useMemo } from 'react';\nimport { isDate, isDayOrMoment } from '../../../context/TranslationContext';\nexport var useCreateChannelStateContext = function useCreateChannelStateContext(value) {\n  var _a;\n  var acceptedFiles = value.acceptedFiles,\n    channel = value.channel,\n    _b = value.channelCapabilitiesArray,\n    channelCapabilitiesArray = _b === void 0 ? [] : _b,\n    channelConfig = value.channelConfig,\n    dragAndDropWindow = value.dragAndDropWindow,\n    giphyVersion = value.giphyVersion,\n    error = value.error,\n    hasMore = value.hasMore,\n    hasMoreNewer = value.hasMoreNewer,\n    imageAttachmentSizeHandler = value.imageAttachmentSizeHandler,\n    suppressAutoscroll = value.suppressAutoscroll,\n    highlightedMessageId = value.highlightedMessageId,\n    loading = value.loading,\n    loadingMore = value.loadingMore,\n    maxNumberOfFiles = value.maxNumberOfFiles,\n    members = value.members,\n    _c = value.messages,\n    messages = _c === void 0 ? [] : _c,\n    multipleUploads = value.multipleUploads,\n    mutes = value.mutes,\n    notifications = value.notifications,\n    pinnedMessages = value.pinnedMessages,\n    quotedMessage = value.quotedMessage,\n    _d = value.read,\n    read = _d === void 0 ? {} : _d,\n    shouldGenerateVideoThumbnail = value.shouldGenerateVideoThumbnail,\n    skipMessageDataMemoization = value.skipMessageDataMemoization,\n    thread = value.thread,\n    threadHasMore = value.threadHasMore,\n    threadLoadingMore = value.threadLoadingMore,\n    _e = value.threadMessages,\n    threadMessages = _e === void 0 ? [] : _e,\n    videoAttachmentSizeHandler = value.videoAttachmentSizeHandler,\n    watcherCount = value.watcherCount,\n    watcher_count = value.watcher_count,\n    watchers = value.watchers;\n  var channelId = channel.cid;\n  var lastRead = channel.initialized && ((_a = channel.lastRead()) === null || _a === void 0 ? void 0 : _a.getTime());\n  var membersLength = Object.keys(members || []).length;\n  var notificationsLength = notifications.length;\n  var readUsers = Object.values(read);\n  var readUsersLength = readUsers.length;\n  var readUsersLastReads = readUsers.map(function (_a) {\n    var last_read = _a.last_read;\n    return last_read.toISOString();\n  }).join();\n  var threadMessagesLength = threadMessages === null || threadMessages === void 0 ? void 0 : threadMessages.length;\n  var channelCapabilities = {};\n  channelCapabilitiesArray.forEach(function (capability) {\n    channelCapabilities[capability] = true;\n  });\n  var memoizedMessageData = skipMessageDataMemoization ? messages : messages.map(function (_a) {\n    var deleted_at = _a.deleted_at,\n      latest_reactions = _a.latest_reactions,\n      pinned = _a.pinned,\n      reply_count = _a.reply_count,\n      status = _a.status,\n      updated_at = _a.updated_at,\n      user = _a.user;\n    return \"\".concat(deleted_at).concat(latest_reactions ? latest_reactions.map(function (_a) {\n      var type = _a.type;\n      return type;\n    }).join() : '').concat(pinned).concat(reply_count).concat(status).concat(updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || '').concat(user === null || user === void 0 ? void 0 : user.updated_at);\n  }).join();\n  var memoizedThreadMessageData = threadMessages.map(function (_a) {\n    var deleted_at = _a.deleted_at,\n      latest_reactions = _a.latest_reactions,\n      pinned = _a.pinned,\n      status = _a.status,\n      updated_at = _a.updated_at,\n      user = _a.user;\n    return \"\".concat(deleted_at).concat(latest_reactions ? latest_reactions.map(function (_a) {\n      var type = _a.type;\n      return type;\n    }).join() : '').concat(pinned).concat(status).concat(updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || '').concat(user === null || user === void 0 ? void 0 : user.updated_at);\n  }).join();\n  var channelStateContext = useMemo(function () {\n    return {\n      acceptedFiles: acceptedFiles,\n      channel: channel,\n      channelCapabilities: channelCapabilities,\n      channelConfig: channelConfig,\n      dragAndDropWindow: dragAndDropWindow,\n      error: error,\n      giphyVersion: giphyVersion,\n      hasMore: hasMore,\n      hasMoreNewer: hasMoreNewer,\n      highlightedMessageId: highlightedMessageId,\n      imageAttachmentSizeHandler: imageAttachmentSizeHandler,\n      loading: loading,\n      loadingMore: loadingMore,\n      maxNumberOfFiles: maxNumberOfFiles,\n      members: members,\n      messages: messages,\n      multipleUploads: multipleUploads,\n      mutes: mutes,\n      notifications: notifications,\n      pinnedMessages: pinnedMessages,\n      quotedMessage: quotedMessage,\n      read: read,\n      shouldGenerateVideoThumbnail: shouldGenerateVideoThumbnail,\n      suppressAutoscroll: suppressAutoscroll,\n      thread: thread,\n      threadHasMore: threadHasMore,\n      threadLoadingMore: threadLoadingMore,\n      threadMessages: threadMessages,\n      videoAttachmentSizeHandler: videoAttachmentSizeHandler,\n      watcher_count: watcher_count,\n      watcherCount: watcherCount,\n      watchers: watchers\n    };\n  }, [channelId, error, hasMore, hasMoreNewer, highlightedMessageId, lastRead, loading, loadingMore, membersLength, memoizedMessageData, memoizedThreadMessageData, notificationsLength, quotedMessage, readUsersLength, readUsersLastReads, shouldGenerateVideoThumbnail, skipMessageDataMemoization, suppressAutoscroll, thread, threadHasMore, threadLoadingMore, threadMessagesLength, watcherCount]);\n  return channelStateContext;\n};","map":null,"metadata":{},"sourceType":"module"}