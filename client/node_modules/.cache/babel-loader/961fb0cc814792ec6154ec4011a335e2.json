{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { FileUploadButton, ImageDropzone, UploadButton } from 'react-file-utils';\nimport clsx from 'clsx';\nimport { usePopper } from 'react-popper';\nimport { useDropzone } from 'react-dropzone';\nimport { nanoid } from 'nanoid';\nimport { EmojiPicker } from './EmojiPicker';\nimport { EmojiIconLarge as DefaultEmojiIcon, EmojiPickerIcon as DefaultEmojiPickerIcon, FileUploadIconFlat as DefaultFileUploadIcon, SendButton as DefaultSendButton, UploadIcon as DefaultUploadIcon } from './icons';\nimport { QuotedMessagePreview as DefaultQuotedMessagePreview, QuotedMessagePreviewHeader } from './QuotedMessagePreview';\nimport { AttachmentPreviewList } from './AttachmentPreviewList';\nimport { UploadsPreview } from './UploadsPreview';\nimport { ChatAutoComplete } from '../ChatAutoComplete/ChatAutoComplete';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { CooldownTimer as DefaultCooldownTimer } from './CooldownTimer';\nexport var MessageInputFlat = function MessageInputFlat() {\n  var quotedMessage = useChannelStateContext('MessageInputFlat').quotedMessage;\n  var setQuotedMessage = useChannelActionContext('MessageInputFlat').setQuotedMessage;\n  var _a = useChatContext('MessageInputFlat'),\n    channel = _a.channel,\n    themeVersion = _a.themeVersion;\n  useEffect(function () {\n    var handleQuotedMessageUpdate = function handleQuotedMessageUpdate(e) {\n      var _a;\n      if (((_a = e.message) === null || _a === void 0 ? void 0 : _a.id) !== (quotedMessage === null || quotedMessage === void 0 ? void 0 : quotedMessage.id)) return;\n      if (e.type === 'message.deleted') {\n        setQuotedMessage(undefined);\n        return;\n      }\n      setQuotedMessage(e.message);\n    };\n    channel === null || channel === void 0 ? void 0 : channel.on('message.deleted', handleQuotedMessageUpdate);\n    channel === null || channel === void 0 ? void 0 : channel.on('message.updated', handleQuotedMessageUpdate);\n    return function () {\n      channel === null || channel === void 0 ? void 0 : channel.off('message.deleted', handleQuotedMessageUpdate);\n      channel === null || channel === void 0 ? void 0 : channel.off('message.updated', handleQuotedMessageUpdate);\n    };\n  }, [channel, quotedMessage]);\n  return themeVersion === '2' ? React.createElement(MessageInputV2, null) : React.createElement(MessageInputV1, null);\n};\nvar MessageInputV1 = function MessageInputV1() {\n  var _a = useChannelStateContext('MessageInputFlat'),\n    acceptedFiles = _a.acceptedFiles,\n    multipleUploads = _a.multipleUploads,\n    quotedMessage = _a.quotedMessage;\n  var t = useTranslationContext('MessageInputFlat').t;\n  var _b = useMessageInputContext('MessageInputFlat'),\n    closeEmojiPicker = _b.closeEmojiPicker,\n    cooldownRemaining = _b.cooldownRemaining,\n    emojiPickerIsOpen = _b.emojiPickerIsOpen,\n    handleSubmit = _b.handleSubmit,\n    isUploadEnabled = _b.isUploadEnabled,\n    maxFilesLeft = _b.maxFilesLeft,\n    numberOfUploads = _b.numberOfUploads,\n    openEmojiPicker = _b.openEmojiPicker,\n    setCooldownRemaining = _b.setCooldownRemaining,\n    uploadNewFiles = _b.uploadNewFiles;\n  var _c = useComponentContext('MessageInputFlat'),\n    _d = _c.CooldownTimer,\n    CooldownTimer = _d === void 0 ? DefaultCooldownTimer : _d,\n    _e = _c.EmojiIcon,\n    EmojiIcon = _e === void 0 ? DefaultEmojiIcon : _e,\n    _f = _c.FileUploadIcon,\n    FileUploadIcon = _f === void 0 ? DefaultFileUploadIcon : _f,\n    _g = _c.QuotedMessagePreview,\n    QuotedMessagePreview = _g === void 0 ? DefaultQuotedMessagePreview : _g,\n    _h = _c.SendButton,\n    SendButton = _h === void 0 ? DefaultSendButton : _h;\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__input-flat', 'str-chat__message-input', {\n      'str-chat__input-flat--send-button-active': !!SendButton,\n      'str-chat__input-flat-has-attachments': numberOfUploads,\n      'str-chat__input-flat-quoted': quotedMessage && !quotedMessage.parent_id\n    })\n  }, React.createElement(ImageDropzone, {\n    accept: acceptedFiles,\n    disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining,\n    handleFiles: uploadNewFiles,\n    maxNumberOfFiles: maxFilesLeft,\n    multiple: multipleUploads\n  }, quotedMessage && !quotedMessage.parent_id && React.createElement(QuotedMessagePreview, {\n    quotedMessage: quotedMessage\n  }), React.createElement(\"div\", {\n    className: 'str-chat__input-flat-wrapper'\n  }, isUploadEnabled && React.createElement(UploadsPreview, null), React.createElement(\"div\", {\n    className: 'str-chat__input-flat--textarea-wrapper'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__emojiselect-wrapper'\n  }, React.createElement(Tooltip, null, emojiPickerIsOpen ? t('Close emoji picker') : t('Open emoji picker')), React.createElement(\"button\", {\n    \"aria-label\": 'Emoji picker',\n    className: 'str-chat__input-flat-emojiselect',\n    onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker\n  }, cooldownRemaining ? React.createElement(\"div\", {\n    className: 'str-chat__input-flat-cooldown'\n  }, React.createElement(CooldownTimer, {\n    cooldownInterval: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  })) : React.createElement(EmojiIcon, null))), React.createElement(EmojiPicker, null), React.createElement(ChatAutoComplete, null), isUploadEnabled && !cooldownRemaining && React.createElement(\"div\", {\n    className: 'str-chat__fileupload-wrapper',\n    \"data-testid\": 'fileinput'\n  }, React.createElement(Tooltip, null, maxFilesLeft ? t('Attach files') : t(\"You've reached the maximum number of files\")), React.createElement(FileUploadButton, {\n    accepts: acceptedFiles,\n    disabled: maxFilesLeft === 0,\n    handleFiles: uploadNewFiles,\n    multiple: multipleUploads\n  }, React.createElement(\"span\", {\n    className: 'str-chat__input-flat-fileupload'\n  }, React.createElement(FileUploadIcon, null))))), !cooldownRemaining && React.createElement(SendButton, {\n    sendMessage: handleSubmit\n  }))));\n};\nvar MessageInputV2 = function MessageInputV2() {\n  var _a = useChannelStateContext('MessageInputV2'),\n    _b = _a.acceptedFiles,\n    acceptedFiles = _b === void 0 ? [] : _b,\n    multipleUploads = _a.multipleUploads,\n    quotedMessage = _a.quotedMessage;\n  var t = useTranslationContext('MessageInputV2').t;\n  var _c = useMessageInputContext('MessageInputV2'),\n    closeEmojiPicker = _c.closeEmojiPicker,\n    cooldownRemaining = _c.cooldownRemaining,\n    emojiPickerIsOpen = _c.emojiPickerIsOpen,\n    handleSubmit = _c.handleSubmit,\n    isUploadEnabled = _c.isUploadEnabled,\n    maxFilesLeft = _c.maxFilesLeft,\n    message = _c.message,\n    numberOfUploads = _c.numberOfUploads,\n    openEmojiPicker = _c.openEmojiPicker,\n    setCooldownRemaining = _c.setCooldownRemaining,\n    text = _c.text,\n    uploadNewFiles = _c.uploadNewFiles;\n  var _d = useComponentContext('MessageInputV2'),\n    _e = _d.CooldownTimer,\n    CooldownTimer = _e === void 0 ? DefaultCooldownTimer : _e,\n    _f = _d.EmojiIcon,\n    EmojiIcon = _f === void 0 ? DefaultEmojiPickerIcon : _f,\n    _g = _d.FileUploadIcon,\n    FileUploadIcon = _g === void 0 ? DefaultUploadIcon : _g,\n    _h = _d.QuotedMessagePreview,\n    QuotedMessagePreview = _h === void 0 ? DefaultQuotedMessagePreview : _h,\n    _j = _d.SendButton,\n    SendButton = _j === void 0 ? DefaultSendButton : _j;\n  var _k = useState(null),\n    referenceElement = _k[0],\n    setReferenceElement = _k[1];\n  var _l = useState(null),\n    popperElement = _l[0],\n    setPopperElement = _l[1];\n  var _m = usePopper(referenceElement, popperElement, {\n      placement: 'top-end'\n    }),\n    attributes = _m.attributes,\n    styles = _m.styles;\n  var id = useMemo(function () {\n    return nanoid();\n  }, []);\n  var accept = useMemo(function () {\n    return acceptedFiles.reduce(function (mediaTypeMap, mediaType) {\n      var _a;\n      (_a = mediaTypeMap[mediaType]) !== null && _a !== void 0 ? _a : mediaTypeMap[mediaType] = [];\n      return mediaTypeMap;\n    }, {});\n  }, [acceptedFiles]);\n  var _o = useDropzone({\n      accept: accept,\n      disabled: !isUploadEnabled || maxFilesLeft === 0,\n      multiple: multipleUploads,\n      noClick: true,\n      onDrop: uploadNewFiles\n    }),\n    getRootProps = _o.getRootProps,\n    isDragActive = _o.isDragActive,\n    isDragReject = _o.isDragReject;\n  // TODO: \"!message\" condition is a temporary fix for shared\n  // state when editing a message (fix shared state issue)\n  var displayQuotedMessage = !message && quotedMessage && !quotedMessage.parent_id;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", __assign({}, getRootProps({\n    className: 'str-chat__message-input'\n  })), isDragActive && React.createElement(\"div\", {\n    className: clsx('str-chat__dropzone-container', {\n      'str-chat__dropzone-container--not-accepted': isDragReject\n    })\n  }, !isDragReject && React.createElement(\"p\", null, t('Drag your files here')), isDragReject && React.createElement(\"p\", null, t('Some of the files will not be accepted'))), displayQuotedMessage && React.createElement(QuotedMessagePreviewHeader, null), React.createElement(\"div\", {\n    className: 'str-chat__message-input-inner'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__file-input-container',\n    \"data-testid\": 'file-upload-button'\n  }, React.createElement(UploadButton, {\n    accept: acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(','),\n    \"aria-label\": 'File upload',\n    className: 'str-chat__file-input',\n    \"data-testid\": 'file-input',\n    disabled: !isUploadEnabled || maxFilesLeft === 0,\n    id: id,\n    multiple: multipleUploads,\n    onFileChange: uploadNewFiles\n  }), React.createElement(\"label\", {\n    className: 'str-chat__file-input-label',\n    htmlFor: id\n  }, React.createElement(FileUploadIcon, null))), React.createElement(\"div\", {\n    className: 'str-chat__message-textarea-container'\n  }, displayQuotedMessage && React.createElement(QuotedMessagePreview, {\n    quotedMessage: quotedMessage\n  }), isUploadEnabled && !!numberOfUploads && React.createElement(AttachmentPreviewList, null), React.createElement(\"div\", {\n    className: 'str-chat__message-textarea-with-emoji-picker'\n  }, React.createElement(ChatAutoComplete, null), React.createElement(\"div\", {\n    className: 'str-chat__message-textarea-emoji-picker'\n  }, emojiPickerIsOpen && React.createElement(\"div\", __assign({\n    className: 'str-chat__message-textarea-emoji-picker-container',\n    style: styles.popper\n  }, attributes.popper, {\n    ref: setPopperElement\n  }), React.createElement(EmojiPicker, null)), React.createElement(\"button\", {\n    \"aria-label\": 'Emoji picker',\n    className: 'str-chat__emoji-picker-button',\n    onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker,\n    ref: setReferenceElement,\n    type: 'button'\n  }, React.createElement(EmojiIcon, null))))), !message && React.createElement(React.Fragment, null, cooldownRemaining ? React.createElement(CooldownTimer, {\n    cooldownInterval: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  }) : React.createElement(SendButton, {\n    disabled: !numberOfUploads && !text.length,\n    sendMessage: handleSubmit\n  })))));\n};","map":null,"metadata":{},"sourceType":"module"}