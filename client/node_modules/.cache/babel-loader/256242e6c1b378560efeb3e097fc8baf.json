{"ast":null,"code":"import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useChannelsQueryState } from './hooks/useChannelsQueryState';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function Chat(props) {\n  var children = props.children,\n    client = props.client,\n    customClasses = props.customClasses,\n    customStyles = props.customStyles,\n    _a = props.darkMode,\n    darkMode = _a === void 0 ? false : _a,\n    defaultLanguage = props.defaultLanguage,\n    i18nInstance = props.i18nInstance,\n    _b = props.initialNavOpen,\n    initialNavOpen = _b === void 0 ? true : _b,\n    _c = props.theme,\n    theme = _c === void 0 ? 'messaging light' : _c,\n    _d = props.useImageFlagEmojisOnWindows,\n    useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n  var _e = useChat({\n      client: client,\n      defaultLanguage: defaultLanguage,\n      i18nInstance: i18nInstance,\n      initialNavOpen: initialNavOpen\n    }),\n    channel = _e.channel,\n    closeMobileNav = _e.closeMobileNav,\n    getAppSettings = _e.getAppSettings,\n    latestMessageDatesByChannels = _e.latestMessageDatesByChannels,\n    mutes = _e.mutes,\n    navOpen = _e.navOpen,\n    openMobileNav = _e.openMobileNav,\n    setActiveChannel = _e.setActiveChannel,\n    translators = _e.translators;\n  var channelsQueryState = useChannelsQueryState();\n  var themeVersion = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement).getPropertyValue('--str-chat__theme-version').replace(' ', '') || '1' : '1';\n  useCustomStyles(darkMode ? darkModeTheme : customStyles);\n  var chatContextValue = useCreateChatContext({\n    channel: channel,\n    channelsQueryState: channelsQueryState,\n    client: client,\n    closeMobileNav: closeMobileNav,\n    customClasses: customClasses,\n    getAppSettings: getAppSettings,\n    latestMessageDatesByChannels: latestMessageDatesByChannels,\n    mutes: mutes,\n    navOpen: navOpen,\n    openMobileNav: openMobileNav,\n    setActiveChannel: setActiveChannel,\n    theme: theme,\n    themeVersion: themeVersion,\n    useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows\n  });\n  if (!translators.t) return null;\n  return React.createElement(ChatProvider, {\n    value: chatContextValue\n  }, React.createElement(TranslationProvider, {\n    value: translators\n  }, children));\n};","map":null,"metadata":{},"sourceType":"module"}