{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useCallback, useRef } from 'react';\nimport { useActionHandler, useDeleteHandler, useEditHandler, useFlagHandler, useMentionsHandler, useMuteHandler, useOpenThreadHandler, usePinHandler, useReactionClick, useReactionHandler, useRetryHandler, useUserHandler, useUserRole } from './hooks';\nimport { areMessagePropsEqual, getMessageActions, MESSAGE_ACTIONS } from './utils';\nimport { MessageProvider, useChannelActionContext, useChannelStateContext, useComponentContext } from '../../context';\nvar MessageWithContext = function MessageWithContext(props) {\n  var canPin = props.canPin,\n    groupedByUser = props.groupedByUser,\n    propMessage = props.Message,\n    message = props.message,\n    _a = props.messageActions,\n    messageActions = _a === void 0 ? Object.keys(MESSAGE_ACTIONS) : _a,\n    propOnUserClick = props.onUserClick,\n    propOnUserHover = props.onUserHover,\n    userRoles = props.userRoles;\n  var contextMessage = useComponentContext('Message').Message;\n  var actionsEnabled = message.type === 'regular' && message.status === 'received';\n  var MessageUIComponent = propMessage || contextMessage;\n  var _b = useEditHandler(),\n    clearEdit = _b.clearEdit,\n    editing = _b.editing,\n    setEdit = _b.setEdit;\n  var _c = useUserHandler(message, {\n      onUserClickHandler: propOnUserClick,\n      onUserHoverHandler: propOnUserHover\n    }),\n    onUserClick = _c.onUserClick,\n    onUserHover = _c.onUserHover;\n  var canDelete = userRoles.canDelete,\n    canEdit = userRoles.canEdit,\n    canFlag = userRoles.canFlag,\n    canMute = userRoles.canMute,\n    canQuote = userRoles.canQuote,\n    canReact = userRoles.canReact,\n    canReply = userRoles.canReply,\n    _isMyMessage = userRoles.isMyMessage;\n  var messageActionsHandler = useCallback(function () {\n    return getMessageActions(messageActions, {\n      canDelete: canDelete,\n      canEdit: canEdit,\n      canFlag: canFlag,\n      canMute: canMute,\n      canPin: canPin,\n      canQuote: canQuote,\n      canReact: canReact,\n      canReply: canReply\n    });\n  }, [messageActions, canDelete, canEdit, canFlag, canMute, canPin, canQuote, canReact, canReply]);\n  var canPinPropToNotPass = props.canPin,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    messageActionsPropToNotPass = props.messageActions,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    onlySenderCanEditPropToNotPass = props.onlySenderCanEdit,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    onUserClickPropToNotPass = props.onUserClick,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    onUserHoverPropToNotPass = props.onUserHover,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    userRolesPropToNotPass = props.userRoles,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    rest = __rest(props, [\"canPin\", \"messageActions\", \"onlySenderCanEdit\", \"onUserClick\", \"onUserHover\", \"userRoles\"]);\n  var messageContextValue = __assign(__assign({}, rest), {\n    actionsEnabled: actionsEnabled,\n    clearEditingState: clearEdit,\n    editing: editing,\n    getMessageActions: messageActionsHandler,\n    handleEdit: setEdit,\n    isMyMessage: function isMyMessage() {\n      return _isMyMessage;\n    },\n    onUserClick: onUserClick,\n    onUserHover: onUserHover,\n    setEditingState: setEdit\n  });\n  return React.createElement(MessageProvider, {\n    value: messageContextValue\n  }, React.createElement(MessageUIComponent, {\n    groupedByUser: groupedByUser\n  }));\n};\nvar MemoizedMessage = React.memo(MessageWithContext, areMessagePropsEqual);\n/**\n * The Message component is a context provider which implements all the logic required for rendering\n * an individual message. The actual UI of the message is delegated via the Message prop on Channel.\n */\nexport var Message = function Message(props) {\n  var closeReactionSelectorOnClick = props.closeReactionSelectorOnClick,\n    disableQuotedMessages = props.disableQuotedMessages,\n    getDeleteMessageErrorNotification = props.getDeleteMessageErrorNotification,\n    getFlagMessageErrorNotification = props.getFlagMessageErrorNotification,\n    getFlagMessageSuccessNotification = props.getFlagMessageSuccessNotification,\n    getMuteUserErrorNotification = props.getMuteUserErrorNotification,\n    getMuteUserSuccessNotification = props.getMuteUserSuccessNotification,\n    getPinMessageErrorNotification = props.getPinMessageErrorNotification,\n    message = props.message,\n    _a = props.onlySenderCanEdit,\n    onlySenderCanEdit = _a === void 0 ? false : _a,\n    propOnMentionsClick = props.onMentionsClick,\n    propOnMentionsHover = props.onMentionsHover,\n    propOpenThread = props.openThread,\n    pinPermissions = props.pinPermissions,\n    propRetrySendMessage = props.retrySendMessage;\n  var addNotification = useChannelActionContext('Message').addNotification;\n  var _b = useChannelStateContext('Message'),\n    highlightedMessageId = _b.highlightedMessageId,\n    mutes = _b.mutes;\n  var reactionSelectorRef = useRef(null);\n  var handleAction = useActionHandler(message);\n  var handleOpenThread = useOpenThreadHandler(message, propOpenThread);\n  var handleReaction = useReactionHandler(message);\n  var handleRetry = useRetryHandler(propRetrySendMessage);\n  var userRoles = useUserRole(message, onlySenderCanEdit, disableQuotedMessages);\n  var handleDelete = useDeleteHandler(message, {\n    getErrorNotification: getDeleteMessageErrorNotification,\n    notify: addNotification\n  });\n  var handleFlag = useFlagHandler(message, {\n    getErrorNotification: getFlagMessageErrorNotification,\n    getSuccessNotification: getFlagMessageSuccessNotification,\n    notify: addNotification\n  });\n  var handleMute = useMuteHandler(message, {\n    getErrorNotification: getMuteUserErrorNotification,\n    getSuccessNotification: getMuteUserSuccessNotification,\n    notify: addNotification\n  });\n  var _c = useMentionsHandler(message, {\n      onMentionsClick: propOnMentionsClick,\n      onMentionsHover: propOnMentionsHover\n    }),\n    onMentionsClick = _c.onMentionsClick,\n    onMentionsHover = _c.onMentionsHover;\n  var _d = usePinHandler(message, pinPermissions, {\n      getErrorNotification: getPinMessageErrorNotification,\n      notify: addNotification\n    }),\n    canPin = _d.canPin,\n    handlePin = _d.handlePin;\n  var _e = useReactionClick(message, reactionSelectorRef, undefined, closeReactionSelectorOnClick),\n    isReactionEnabled = _e.isReactionEnabled,\n    onReactionListClick = _e.onReactionListClick,\n    showDetailedReactions = _e.showDetailedReactions;\n  var highlighted = highlightedMessageId === message.id;\n  return React.createElement(MemoizedMessage, {\n    additionalMessageInputProps: props.additionalMessageInputProps,\n    autoscrollToBottom: props.autoscrollToBottom,\n    canPin: canPin,\n    customMessageActions: props.customMessageActions,\n    disableQuotedMessages: props.disableQuotedMessages,\n    endOfGroup: props.endOfGroup,\n    firstOfGroup: props.firstOfGroup,\n    formatDate: props.formatDate,\n    groupedByUser: props.groupedByUser,\n    groupStyles: props.groupStyles,\n    handleAction: handleAction,\n    handleDelete: handleDelete,\n    handleFlag: handleFlag,\n    handleMute: handleMute,\n    handleOpenThread: handleOpenThread,\n    handlePin: handlePin,\n    handleReaction: handleReaction,\n    handleRetry: handleRetry,\n    highlighted: highlighted,\n    initialMessage: props.initialMessage,\n    isReactionEnabled: isReactionEnabled,\n    lastReceivedId: props.lastReceivedId,\n    message: message,\n    Message: props.Message,\n    messageActions: props.messageActions,\n    messageListRect: props.messageListRect,\n    mutes: mutes,\n    onMentionsClickMessage: onMentionsClick,\n    onMentionsHoverMessage: onMentionsHover,\n    onReactionListClick: onReactionListClick,\n    onUserClick: props.onUserClick,\n    onUserHover: props.onUserHover,\n    pinPermissions: props.pinPermissions,\n    reactionSelectorRef: reactionSelectorRef,\n    readBy: props.readBy,\n    renderText: props.renderText,\n    showDetailedReactions: showDetailedReactions,\n    threadList: props.threadList,\n    unsafeHTML: props.unsafeHTML,\n    userRoles: userRoles\n  });\n};","map":null,"metadata":{},"sourceType":"module"}