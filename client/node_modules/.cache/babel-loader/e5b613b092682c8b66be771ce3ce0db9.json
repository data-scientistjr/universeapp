{"ast":null,"code":"import React from 'react';\nimport clsx from 'clsx';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nexport var QuotedMessage = function QuotedMessage() {\n  var _a, _b;\n  var _c = useComponentContext('QuotedMessage'),\n    Attachment = _c.Attachment,\n    ContextAvatar = _c.Avatar;\n  var _d = useMessageContext('QuotedMessage'),\n    isMyMessage = _d.isMyMessage,\n    message = _d.message;\n  var userLanguage = useTranslationContext('QuotedMessage').userLanguage;\n  var jumpToMessage = useChannelActionContext('QuotedMessage').jumpToMessage;\n  var Avatar = ContextAvatar || DefaultAvatar;\n  var quoted_message = message.quoted_message;\n  if (!quoted_message) return null;\n  var quotedMessageText = ((_a = quoted_message.i18n) === null || _a === void 0 ? void 0 : _a[\"\".concat(userLanguage, \"_text\")]) || quoted_message.text;\n  // @ts-expect-error\n  var quotedMessageAttachment = quoted_message.attachments.length ?\n  // @ts-expect-error\n  quoted_message.attachments[0] : null;\n  if (!quotedMessageText && !quotedMessageAttachment) return null;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx('str-chat__quoted-message-preview quoted-message', {\n      mine: isMyMessage()\n    }),\n    onClickCapture: function onClickCapture(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      jumpToMessage(quoted_message.id);\n    }\n  }, quoted_message.user && React.createElement(Avatar, {\n    image: quoted_message.user.image,\n    name: quoted_message.user.name || quoted_message.user.id,\n    size: 20,\n    user: quoted_message.user\n  }), React.createElement(\"div\", {\n    className: 'quoted-message-inner str-chat__quoted-message-bubble'\n  }, quotedMessageAttachment && React.createElement(Attachment, {\n    attachments: [quotedMessageAttachment]\n  }), React.createElement(\"div\", null, quotedMessageText))), ((_b = message.attachments) === null || _b === void 0 ? void 0 : _b.length) && message.quoted_message ? React.createElement(Attachment, {\n    attachments: message.attachments\n  }) : null);\n};","map":null,"metadata":{},"sourceType":"module"}