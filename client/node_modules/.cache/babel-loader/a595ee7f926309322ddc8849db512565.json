{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useUserPresenceChangedListener = function useUserPresenceChangedListener(setChannels) {\n  var client = useChatContext('useUserPresenceChangedListener').client;\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      setChannels(function (channels) {\n        var newChannels = channels.map(function (channel) {\n          var _a;\n          if (!((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) || !channel.state.members[event.user.id]) {\n            return channel;\n          }\n          var newChannel = channel; // dumb workaround for linter\n          newChannel.state.members[event.user.id].user = event.user;\n          return newChannel;\n        });\n        return __spreadArray([], newChannels, true);\n      });\n    };\n    client.on('user.presence.changed', handleEvent);\n    return function () {\n      client.off('user.presence.changed', handleEvent);\n    };\n  }, []);\n};","map":null,"metadata":{},"sourceType":"module"}