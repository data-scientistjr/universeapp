{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Textarea from 'react-textarea-autosize';\nimport getCaretCoordinates from 'textarea-caret';\nimport { isValidElementType } from 'react-is';\nimport clsx from 'clsx';\nimport { List as DefaultSuggestionList } from './List';\nimport { DEFAULT_CARET_POSITION, defaultScrollToItem, errorMessage, triggerPropsCheck } from './utils';\nimport { CommandItem } from '../CommandItem';\nimport { UserItem } from '../UserItem';\nimport { isSafari } from '../../utils/browsers';\nvar ReactTextareaAutocomplete = /** @class */function (_super) {\n  __extends(ReactTextareaAutocomplete, _super);\n  function ReactTextareaAutocomplete(props) {\n    var _this = _super.call(this, props) || this;\n    _this.getSelectionPosition = function () {\n      if (!_this.textareaRef) return null;\n      return {\n        selectionEnd: _this.textareaRef.selectionEnd,\n        selectionStart: _this.textareaRef.selectionStart\n      };\n    };\n    _this.getSelectedText = function () {\n      if (!_this.textareaRef) return null;\n      var _a = _this.textareaRef,\n        selectionEnd = _a.selectionEnd,\n        selectionStart = _a.selectionStart;\n      if (selectionStart === selectionEnd) return null;\n      return _this.state.value.substr(selectionStart, selectionEnd - selectionStart);\n    };\n    _this.setCaretPosition = function (position) {\n      if (position === void 0) {\n        position = 0;\n      }\n      if (!_this.textareaRef) return;\n      _this.textareaRef.focus();\n      _this.textareaRef.setSelectionRange(position, position);\n    };\n    _this.getCaretPosition = function () {\n      if (!_this.textareaRef) return 0;\n      return _this.textareaRef.selectionEnd;\n    };\n    /**\n     * isComposing prevents double submissions in Korean and other languages.\n     * starting point for a read:\n     * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\n     * In the long term, the fix should happen by handling keypress, but changing this has unknown implications.\n     * @param event React.KeyboardEvent\n     */\n    _this._defaultShouldSubmit = function (event) {\n      return event.key === 'Enter' && !event.shiftKey && !event.nativeEvent.isComposing;\n    };\n    _this._handleKeyDown = function (event) {\n      var _a = _this.props.shouldSubmit,\n        shouldSubmit = _a === void 0 ? _this._defaultShouldSubmit : _a;\n      // prevent default behaviour when the selection list is rendered\n      if ((event.key === 'ArrowUp' || event.key === 'ArrowDown') && _this.dropdownRef) event.preventDefault();\n      if (shouldSubmit === null || shouldSubmit === void 0 ? void 0 : shouldSubmit(event)) return _this._onEnter(event);\n      if (event.key === ' ') return _this._onSpace(event);\n      if (event.key === 'Escape') return _this._closeAutocomplete();\n    };\n    _this._onEnter = function (event) {\n      if (!_this.textareaRef) return;\n      var trigger = _this.state.currentTrigger;\n      if (!trigger || !_this.state.data) {\n        // trigger a submit\n        _this._replaceWord();\n        if (_this.textareaRef) {\n          _this.textareaRef.selectionEnd = 0;\n        }\n        _this.props.handleSubmit(event);\n        _this._closeAutocomplete();\n      }\n    };\n    _this._onSpace = function () {\n      if (!_this.props.replaceWord || !_this.textareaRef) return;\n      // don't change characters if the element doesn't have focus\n      var hasFocus = _this.textareaRef.matches(':focus');\n      if (!hasFocus) return;\n      _this._replaceWord();\n    };\n    _this._replaceWord = function () {\n      var value = _this.state.value;\n      var lastWordRegex = /([^\\s]+)(\\s*)$/;\n      var match = lastWordRegex.exec(value.slice(0, _this.getCaretPosition()));\n      var lastWord = match && match[1];\n      if (!lastWord) return;\n      var spaces = match[2];\n      var newWord = _this.props.replaceWord(lastWord);\n      if (newWord == null) return;\n      var textBeforeWord = value.slice(0, _this.getCaretPosition() - match[0].length);\n      var textAfterCaret = value.slice(_this.getCaretPosition(), -1);\n      var newText = textBeforeWord + newWord + spaces + textAfterCaret;\n      _this.setState({\n        value: newText\n      }, function () {\n        // fire onChange event after successful selection\n        var e = new CustomEvent('change', {\n          bubbles: true\n        });\n        _this.textareaRef.dispatchEvent(e);\n        if (_this.props.onChange) _this.props.onChange(e);\n      });\n    };\n    _this._onSelect = function (newToken) {\n      var _a = _this.props,\n        closeCommandsList = _a.closeCommandsList,\n        closeMentionsList = _a.closeMentionsList,\n        onChange = _a.onChange,\n        showCommandsList = _a.showCommandsList,\n        showMentionsList = _a.showMentionsList;\n      var _b = _this.state,\n        stateTrigger = _b.currentTrigger,\n        selectionEnd = _b.selectionEnd,\n        textareaValue = _b.value;\n      var currentTrigger = showCommandsList ? '/' : showMentionsList ? '@' : stateTrigger;\n      if (!currentTrigger) return;\n      var computeCaretPosition = function computeCaretPosition(position, token, startToken) {\n        switch (position) {\n          case 'start':\n            return startToken;\n          case 'next':\n          case 'end':\n            return startToken + token.length;\n          default:\n            if (!Number.isInteger(position)) {\n              throw new Error('RTA: caretPosition should be \"start\", \"next\", \"end\" or number.');\n            }\n            return position;\n        }\n      };\n      var textToModify = showCommandsList ? '/' : showMentionsList ? '@' : textareaValue.slice(0, selectionEnd);\n      var startOfTokenPosition = textToModify.lastIndexOf(currentTrigger);\n      // we add space after emoji is selected if a caret position is next\n      var newTokenString = newToken.caretPosition === 'next' ? \"\".concat(newToken.text, \" \") : newToken.text;\n      var newCaretPosition = computeCaretPosition(newToken.caretPosition, newTokenString, startOfTokenPosition);\n      var modifiedText = textToModify.substring(0, startOfTokenPosition) + newTokenString;\n      var valueToReplace = textareaValue.replace(textToModify, modifiedText);\n      // set the new textarea value and after that set the caret back to its position\n      _this.setState({\n        dataLoading: false,\n        value: valueToReplace\n      }, function () {\n        // fire onChange event after successful selection\n        var e = new CustomEvent('change', {\n          bubbles: true\n        });\n        _this.textareaRef.dispatchEvent(e);\n        if (onChange) onChange(e);\n        _this.setCaretPosition(newCaretPosition);\n      });\n      _this._closeAutocomplete();\n      if (showCommandsList) closeCommandsList();\n      if (showMentionsList) closeMentionsList();\n    };\n    _this._getItemOnSelect = function (paramTrigger) {\n      var stateTrigger = _this.state.currentTrigger;\n      var triggerSettings = _this._getCurrentTriggerSettings(paramTrigger);\n      var currentTrigger = paramTrigger || stateTrigger;\n      if (!currentTrigger || !triggerSettings) return null;\n      var callback = triggerSettings.callback;\n      if (!callback) return null;\n      return function (item) {\n        if (typeof callback !== 'function') {\n          throw new Error('Output functor is not defined! You have to define \"output\" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');\n        }\n        if (callback) {\n          return callback(item, currentTrigger);\n        }\n        return null;\n      };\n    };\n    _this._getTextToReplace = function (paramTrigger) {\n      var _a = _this.state,\n        actualToken = _a.actualToken,\n        stateTrigger = _a.currentTrigger;\n      var triggerSettings = _this._getCurrentTriggerSettings(paramTrigger);\n      var currentTrigger = paramTrigger || stateTrigger;\n      if (!currentTrigger || !triggerSettings) return null;\n      var output = triggerSettings.output;\n      return function (item) {\n        if (typeof item === 'object' && (!output || typeof output !== 'function')) {\n          throw new Error('Output functor is not defined! If you are using items as object you have to define \"output\" function. https://github.com/webscopeio/react-textarea-autocomplete#trigger-type');\n        }\n        if (output) {\n          var textToReplace = output(item, currentTrigger);\n          if (!textToReplace || typeof textToReplace === 'number') {\n            throw new Error(\"Output functor should return string or object in shape {text: string, caretPosition: string | number}.\\nGot \\\"\".concat(String(textToReplace), \"\\\". Check the implementation for trigger \\\"\").concat(currentTrigger, \"\\\" and its token \\\"\").concat(actualToken, \"\\\"\\n\\nSee https://github.com/webscopeio/react-textarea-autocomplete#trigger-type for more informations.\\n\"));\n          }\n          if (typeof textToReplace === 'string') {\n            return {\n              caretPosition: DEFAULT_CARET_POSITION,\n              text: textToReplace\n            };\n          }\n          if (!textToReplace.text && currentTrigger !== ':') {\n            throw new Error(\"Output \\\"text\\\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \\\"\".concat(currentTrigger, \"\\\" and its token \\\"\").concat(actualToken, \"\\\"\\n\"));\n          }\n          if (!textToReplace.caretPosition) {\n            throw new Error(\"Output \\\"caretPosition\\\" is not defined! Object should has shape {text: string, caretPosition: string | number}. Check the implementation for trigger \\\"\".concat(currentTrigger, \"\\\" and its token \\\"\").concat(actualToken, \"\\\"\\n\"));\n          }\n          return textToReplace;\n        }\n        if (typeof item !== 'string') {\n          throw new Error('Output item should be string\\n');\n        }\n        return {\n          caretPosition: DEFAULT_CARET_POSITION,\n          text: \"\".concat(currentTrigger).concat(item).concat(currentTrigger)\n        };\n      };\n    };\n    _this._getCurrentTriggerSettings = function (paramTrigger) {\n      var stateTrigger = _this.state.currentTrigger;\n      var currentTrigger = paramTrigger || stateTrigger;\n      if (!currentTrigger) return null;\n      return _this.props.trigger[currentTrigger];\n    };\n    _this._getValuesFromProvider = function () {\n      var _a = _this.state,\n        actualToken = _a.actualToken,\n        currentTrigger = _a.currentTrigger;\n      var triggerSettings = _this._getCurrentTriggerSettings();\n      if (!currentTrigger || !triggerSettings) return;\n      var component = triggerSettings.component,\n        dataProvider = triggerSettings.dataProvider;\n      if (typeof dataProvider !== 'function') {\n        throw new Error('Trigger provider has to be a function!');\n      }\n      _this.setState({\n        dataLoading: true\n      });\n      // Modified: send the full text to support / style commands\n      dataProvider(actualToken, _this.state.value, function (data, token) {\n        // Make sure that the result is still relevant for current query\n        if (token !== _this.state.actualToken) return;\n        if (!Array.isArray(data)) {\n          throw new Error('Trigger provider has to provide an array!');\n        }\n        if (!isValidElementType(component)) {\n          throw new Error('Component should be defined!');\n        }\n        // throw away if we resolved old trigger\n        if (currentTrigger !== _this.state.currentTrigger) return;\n        // if we haven't resolved any data let's close the autocomplete\n        if (!data.length) {\n          _this._closeAutocomplete();\n          return;\n        }\n        _this.setState({\n          component: component,\n          data: data,\n          dataLoading: false\n        });\n      });\n    };\n    _this._getSuggestions = function (paramTrigger) {\n      var _a = _this.state,\n        stateTrigger = _a.currentTrigger,\n        data = _a.data;\n      var currentTrigger = paramTrigger || stateTrigger;\n      if (!currentTrigger || !data || data && !data.length) return null;\n      return data;\n    };\n    /**\n     * Close autocomplete, also clean up trigger (to avoid slow promises)\n     */\n    _this._closeAutocomplete = function () {\n      _this.setState({\n        currentTrigger: null,\n        data: null,\n        dataLoading: false,\n        left: null,\n        top: null\n      });\n    };\n    _this._cleanUpProps = function () {\n      var props = __assign({}, _this.props);\n      var notSafe = ['additionalTextareaProps', 'className', 'closeCommandsList', 'closeMentionsList', 'closeOnClickOutside', 'containerClassName', 'containerStyle', 'disableMentions', 'dropdownClassName', 'dropdownStyle', 'grow', 'handleSubmit', 'innerRef', 'itemClassName', 'itemStyle', 'listClassName', 'listStyle', 'loaderClassName', 'loaderStyle', 'loadingComponent', 'minChar', 'movePopupAsYouType', 'onCaretPositionChange', 'onChange', 'ref', 'replaceWord', 'scrollToItem', 'shouldSubmit', 'showCommandsList', 'showMentionsList', 'SuggestionItem', 'SuggestionList', 'trigger', 'value'];\n      // eslint-disable-next-line\n      for (var prop in props) {\n        if (notSafe.includes(prop)) delete props[prop];\n      }\n      return props;\n    };\n    _this._isCommand = function (text) {\n      if (text[0] !== '/') return false;\n      var tokens = text.split(' ');\n      return tokens.length <= 1;\n    };\n    _this._changeHandler = function (e) {\n      var _a = _this.props,\n        minChar = _a.minChar,\n        movePopupAsYouType = _a.movePopupAsYouType,\n        onCaretPositionChange = _a.onCaretPositionChange,\n        onChange = _a.onChange,\n        trigger = _a.trigger;\n      var _b = _this.state,\n        left = _b.left,\n        top = _b.top;\n      var textarea = e.target;\n      var selectionEnd = textarea.selectionEnd,\n        selectionStart = textarea.selectionStart,\n        value = textarea.value;\n      if (onChange) {\n        e.persist();\n        onChange(e);\n      }\n      if (onCaretPositionChange) onCaretPositionChange(_this.getCaretPosition());\n      _this.setState({\n        value: value\n      });\n      var currentTrigger;\n      var lastToken;\n      if (_this._isCommand(value)) {\n        currentTrigger = '/';\n        lastToken = value;\n      } else {\n        var triggerTokens = Object.keys(trigger).join().replace('/', '');\n        var triggerNorWhitespace = \"[^\\\\s\".concat(triggerTokens, \"]*\");\n        var regex = new RegExp(\"(?!^|\\\\W)?[\".concat(triggerTokens, \"]\").concat(triggerNorWhitespace, \"\\\\s?\").concat(triggerNorWhitespace, \"$\"), 'g');\n        var tokenMatch = value.slice(0, selectionEnd).match(regex);\n        lastToken = tokenMatch && tokenMatch[tokenMatch.length - 1].trim();\n        currentTrigger = lastToken && Object.keys(trigger).find(function (a) {\n          return a === lastToken[0];\n        }) || null;\n      }\n      /*\n       if we lost the trigger token or there is no following character we want to close\n       the autocomplete\n      */\n      if (!lastToken || lastToken.length <= minChar) {\n        _this._closeAutocomplete();\n        return;\n      }\n      var actualToken = lastToken.slice(1);\n      // if trigger is not configured step out from the function, otherwise proceed\n      if (!currentTrigger) return;\n      if (movePopupAsYouType || top === null && left === null ||\n      // if we have single char - trigger it means we want to re-position the autocomplete\n      lastToken.length === 1) {\n        var _c = getCaretCoordinates(textarea, selectionEnd),\n          newLeft = _c.left,\n          newTop = _c.top;\n        _this.setState({\n          // make position relative to textarea\n          left: newLeft,\n          top: newTop - _this.textareaRef.scrollTop || 0\n        });\n      }\n      _this.setState({\n        actualToken: actualToken,\n        currentTrigger: currentTrigger,\n        selectionEnd: selectionEnd,\n        selectionStart: selectionStart\n      }, function () {\n        try {\n          _this._getValuesFromProvider();\n        } catch (err) {\n          errorMessage(err.message);\n        }\n      });\n    };\n    _this._selectHandler = function (e) {\n      var _a = _this.props,\n        onCaretPositionChange = _a.onCaretPositionChange,\n        onSelect = _a.onSelect;\n      if (onCaretPositionChange) onCaretPositionChange(_this.getCaretPosition());\n      if (onSelect) {\n        e.persist();\n        onSelect(e);\n      }\n    };\n    // The textarea itself is outside the auto-select dropdown.\n    _this._onClickAndBlurHandler = function (e) {\n      var _a = _this.props,\n        closeOnClickOutside = _a.closeOnClickOutside,\n        onBlur = _a.onBlur;\n      // If this is a click: e.target is the textarea, and e.relatedTarget is the thing\n      // that was actually clicked. If we clicked inside the auto-select dropdown, then\n      // that's not a blur, from the auto-select point of view, so then do nothing.\n      var el = e.relatedTarget;\n      // If this is a blur event in Safari, then relatedTarget is never a dropdown item, but a common parent\n      // of textarea and dropdown container. That means that dropdownRef will not contain its parent and the\n      // autocomplete will be closed before onclick handler can be invoked selecting an item.\n      // It seems that Safari has different implementation determining the relatedTarget node than Chrome and Firefox.\n      // Therefore, if focused away in Safari, the dropdown will be kept rendered until pressing Esc or selecting and item from it.\n      var focusedAwayInSafari = isSafari() && e.type === 'blur';\n      if (_this.dropdownRef && el instanceof Node && _this.dropdownRef.contains(el) || focusedAwayInSafari) {\n        return;\n      }\n      if (closeOnClickOutside) _this._closeAutocomplete();\n      if (onBlur) {\n        e.persist();\n        onBlur(e);\n      }\n    };\n    _this._onScrollHandler = function () {\n      return _this._closeAutocomplete();\n    };\n    _this._dropdownScroll = function (item) {\n      var scrollToItem = _this.props.scrollToItem;\n      if (!scrollToItem) return;\n      if (scrollToItem === true) {\n        defaultScrollToItem(_this.dropdownRef, item);\n        return;\n      }\n      if (typeof scrollToItem !== 'function' || scrollToItem.length !== 2) {\n        throw new Error('`scrollToItem` has to be boolean (true for default implementation) or function with two parameters: container, item.');\n      }\n      scrollToItem(_this.dropdownRef, item);\n    };\n    _this.getTriggerProps = function () {\n      var _a = _this.props,\n        showCommandsList = _a.showCommandsList,\n        showMentionsList = _a.showMentionsList,\n        trigger = _a.trigger;\n      var _b = _this.state,\n        component = _b.component,\n        currentTrigger = _b.currentTrigger,\n        selectionEnd = _b.selectionEnd,\n        value = _b.value;\n      var selectedItem = _this._getItemOnSelect();\n      var suggestionData = _this._getSuggestions();\n      var textToReplace = _this._getTextToReplace();\n      var triggerProps = {\n        component: component,\n        currentTrigger: currentTrigger,\n        getSelectedItem: selectedItem,\n        getTextToReplace: textToReplace,\n        selectionEnd: selectionEnd,\n        value: value,\n        values: suggestionData\n      };\n      if (showCommandsList && trigger['/'] || showMentionsList && trigger['@']) {\n        var currentCommands_1;\n        var getCommands = trigger[showCommandsList ? '/' : '@'].dataProvider;\n        getCommands === null || getCommands === void 0 ? void 0 : getCommands('', showCommandsList ? '/' : '@', function (data) {\n          currentCommands_1 = data;\n        });\n        triggerProps.component = showCommandsList ? CommandItem : UserItem;\n        triggerProps.currentTrigger = showCommandsList ? '/' : '@';\n        triggerProps.getTextToReplace = _this._getTextToReplace(showCommandsList ? '/' : '@');\n        triggerProps.getSelectedItem = _this._getItemOnSelect(showCommandsList ? '/' : '@');\n        triggerProps.selectionEnd = 1;\n        triggerProps.value = showCommandsList ? '/' : '@';\n        triggerProps.values = currentCommands_1;\n      }\n      return triggerProps;\n    };\n    _this.setDropdownRef = function (element) {\n      _this.dropdownRef = element;\n    };\n    var _a = _this.props,\n      loadingComponent = _a.loadingComponent,\n      trigger = _a.trigger,\n      value = _a.value;\n    // TODO: it would be better to have the parent control state...\n    // if (value) this.state.value = value;\n    if (!loadingComponent) {\n      throw new Error('RTA: loadingComponent is not defined');\n    }\n    if (!trigger) {\n      throw new Error('RTA: trigger is not defined');\n    }\n    _this.state = {\n      actualToken: '',\n      component: null,\n      currentTrigger: null,\n      data: null,\n      dataLoading: false,\n      left: null,\n      selectionEnd: 0,\n      selectionStart: 0,\n      top: null,\n      value: value || ''\n    };\n    return _this;\n  }\n  /**\n   * setup to emulate the UNSAFE_componentWillReceiveProps\n   */\n  ReactTextareaAutocomplete.getDerivedStateFromProps = function (props, state) {\n    if (props.value !== state.propsValue || !state.value) {\n      return {\n        propsValue: props.value,\n        value: props.value\n      };\n    } else {\n      return null;\n    }\n  };\n  ReactTextareaAutocomplete.prototype.renderSuggestionListContainer = function () {\n    var _a = this.props,\n      disableMentions = _a.disableMentions,\n      dropdownClassName = _a.dropdownClassName,\n      dropdownStyle = _a.dropdownStyle,\n      itemClassName = _a.itemClassName,\n      itemStyle = _a.itemStyle,\n      listClassName = _a.listClassName,\n      SuggestionItem = _a.SuggestionItem,\n      _b = _a.SuggestionList,\n      SuggestionList = _b === void 0 ? DefaultSuggestionList : _b;\n    var triggerProps = this.getTriggerProps();\n    if (triggerProps.values && triggerProps.currentTrigger && !(disableMentions && triggerProps.currentTrigger === '@')) {\n      return React.createElement(\"div\", {\n        className: clsx('rta__autocomplete', 'str-chat__suggestion-list-container', dropdownClassName),\n        ref: this.setDropdownRef,\n        style: dropdownStyle\n      }, React.createElement(SuggestionList, __assign({\n        className: clsx('str-chat__suggestion-list', listClassName),\n        dropdownScroll: this._dropdownScroll,\n        itemClassName: clsx('str-chat__suggestion-list-item', itemClassName),\n        itemStyle: itemStyle,\n        onSelect: this._onSelect,\n        SuggestionItem: SuggestionItem\n      }, triggerProps)));\n    }\n    return null;\n  };\n  ReactTextareaAutocomplete.prototype.render = function () {\n    var _this = this;\n    var _a = this.props,\n      className = _a.className,\n      containerClassName = _a.containerClassName,\n      containerStyle = _a.containerStyle,\n      style = _a.style;\n    var _b = this.props.additionalTextareaProps || {},\n      _onBlur = _b.onBlur,\n      _onChange = _b.onChange,\n      _onClick = _b.onClick,\n      _onFocus = _b.onFocus,\n      _onKeyDown = _b.onKeyDown,\n      _onScroll = _b.onScroll,\n      _onSelect = _b.onSelect,\n      restAdditionalTextareaProps = __rest(_b, [\"onBlur\", \"onChange\", \"onClick\", \"onFocus\", \"onKeyDown\", \"onScroll\", \"onSelect\"]);\n    var maxRows = this.props.maxRows;\n    var _c = this.state,\n      dataLoading = _c.dataLoading,\n      value = _c.value;\n    if (!this.props.grow) maxRows = 1;\n    // By setting defaultValue to undefined, avoid error:\n    // ForwardRef(TextareaAutosize) contains a textarea with both value and defaultValue props.\n    // Textarea elements must be either controlled or uncontrolled\n    return React.createElement(\"div\", {\n      className: clsx('rta', containerClassName, {\n        'rta--loading': dataLoading\n      }),\n      style: containerStyle\n    }, this.renderSuggestionListContainer(), React.createElement(Textarea, __assign({\n      \"data-testid\": 'message-input'\n    }, this._cleanUpProps(), {\n      className: clsx('rta__textarea', className),\n      maxRows: maxRows,\n      onBlur: function onBlur(e) {\n        _this._onClickAndBlurHandler(e);\n        _onBlur === null || _onBlur === void 0 ? void 0 : _onBlur(e);\n      },\n      onChange: function onChange(e) {\n        _this._changeHandler(e);\n        _onChange === null || _onChange === void 0 ? void 0 : _onChange(e);\n      },\n      onClick: function onClick(e) {\n        _this._onClickAndBlurHandler(e);\n        _onClick === null || _onClick === void 0 ? void 0 : _onClick(e);\n      },\n      onFocus: function onFocus(e) {\n        var _a, _b;\n        (_b = (_a = _this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, e);\n        _onFocus === null || _onFocus === void 0 ? void 0 : _onFocus(e);\n      },\n      onKeyDown: function onKeyDown(e) {\n        _this._handleKeyDown(e);\n        _onKeyDown === null || _onKeyDown === void 0 ? void 0 : _onKeyDown(e);\n      },\n      onScroll: function onScroll(e) {\n        _this._onScrollHandler(e);\n        _onScroll === null || _onScroll === void 0 ? void 0 : _onScroll(e);\n      },\n      onSelect: function onSelect(e) {\n        _this._selectHandler(e);\n        _onSelect === null || _onSelect === void 0 ? void 0 : _onSelect(e);\n      },\n      ref: function ref(_ref) {\n        var _a;\n        (_a = _this.props) === null || _a === void 0 ? void 0 : _a.innerRef(_ref);\n        _this.textareaRef = _ref;\n      },\n      style: style,\n      value: value\n    }, restAdditionalTextareaProps, {\n      defaultValue: undefined\n    })));\n  };\n  ReactTextareaAutocomplete.defaultProps = {\n    closeOnClickOutside: true,\n    maxRows: 10,\n    minChar: 1,\n    movePopupAsYouType: false,\n    scrollToItem: true,\n    value: ''\n  };\n  return ReactTextareaAutocomplete;\n}(React.Component);\nexport { ReactTextareaAutocomplete };\nReactTextareaAutocomplete.propTypes = {\n  className: PropTypes.string,\n  closeOnClickOutside: PropTypes.bool,\n  containerClassName: PropTypes.string,\n  containerStyle: PropTypes.object,\n  disableMentions: PropTypes.bool,\n  dropdownClassName: PropTypes.string,\n  dropdownStyle: PropTypes.object,\n  itemClassName: PropTypes.string,\n  itemStyle: PropTypes.object,\n  listClassName: PropTypes.string,\n  listStyle: PropTypes.object,\n  loaderClassName: PropTypes.string,\n  loaderStyle: PropTypes.object,\n  loadingComponent: PropTypes.elementType,\n  minChar: PropTypes.number,\n  onBlur: PropTypes.func,\n  onCaretPositionChange: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  shouldSubmit: PropTypes.func,\n  style: PropTypes.object,\n  SuggestionList: PropTypes.elementType,\n  trigger: triggerPropsCheck,\n  value: PropTypes.string\n};","map":null,"metadata":{},"sourceType":"module"}