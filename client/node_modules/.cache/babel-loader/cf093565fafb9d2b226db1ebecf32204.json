{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport function useNewMessageNotification(messages, currentUserId, hasMoreNewer) {\n  var _a = useState(false),\n    newMessagesNotification = _a[0],\n    setNewMessagesNotification = _a[1];\n  var _b = useState(true),\n    isMessageListScrolledToBottom = _b[0],\n    setIsMessageListScrolledToBottom = _b[1];\n  /**\n   * use the flag to avoid the initial \"new messages\" quick blink\n   */\n  var didMount = useRef(false);\n  var lastMessageId = useRef('');\n  var atBottom = useRef(false);\n  useEffect(function () {\n    var _a;\n    if (hasMoreNewer) {\n      setNewMessagesNotification(true);\n      return;\n    }\n    /* handle scrolling behavior for new messages */\n    if (!(messages === null || messages === void 0 ? void 0 : messages.length)) return;\n    var lastMessage = messages[messages.length - 1];\n    var prevMessageId = lastMessageId.current;\n    lastMessageId.current = lastMessage.id || ''; // update last message id\n    /* do nothing if new messages are loaded from top(loadMore)  */\n    if (lastMessage.id === prevMessageId) return;\n    /* if list is already at the bottom return, followOutput will do the job */\n    if (atBottom.current) return;\n    /* if the new message belongs to current user scroll to bottom */\n    if (((_a = lastMessage.user) === null || _a === void 0 ? void 0 : _a.id) !== currentUserId && didMount.current) {\n      /* otherwise just show newMessage notification  */\n      setNewMessagesNotification(true);\n    }\n    didMount.current = true;\n  }, [currentUserId, messages, hasMoreNewer]);\n  return {\n    atBottom: atBottom,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    newMessagesNotification: newMessagesNotification,\n    setIsMessageListScrolledToBottom: setIsMessageListScrolledToBottom,\n    setNewMessagesNotification: setNewMessagesNotification\n  };\n}","map":null,"metadata":{},"sourceType":"module"}