{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { isUserMuted, validateAndGetMessage } from '../utils';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport var missingUseMuteHandlerParamsWarning = 'useMuteHandler was called but it is missing one or more necessary parameter.';\nexport var useMuteHandler = function useMuteHandler(message, notifications) {\n  if (notifications === void 0) {\n    notifications = {};\n  }\n  var mutes = useChannelStateContext('useMuteHandler').mutes;\n  var client = useChatContext('useMuteHandler').client;\n  var t = useTranslationContext('useMuteHandler').t;\n  return function (event) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var getErrorNotification, getSuccessNotification, notify, successMessage, e_1, errorMessage, fallbackMessage, successMessage, e_2, errorMessage;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            event.preventDefault();\n            getErrorNotification = notifications.getErrorNotification, getSuccessNotification = notifications.getSuccessNotification, notify = notifications.notify;\n            if (!t || !(message === null || message === void 0 ? void 0 : message.user) || !notify || !client) {\n              console.warn(missingUseMuteHandlerParamsWarning);\n              return [2 /*return*/];\n            }\n\n            if (!!isUserMuted(message, mutes)) return [3 /*break*/, 5];\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.muteUser(message.user.id)];\n          case 2:\n            _a.sent();\n            successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]);\n            notify(successMessage || t(\"{{ user }} has been muted\", {\n              user: message.user.name || message.user.id\n            }), 'success');\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _a.sent();\n            errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]);\n            notify(errorMessage || t('Error muting a user ...'), 'error');\n            return [3 /*break*/, 4];\n          case 4:\n            return [3 /*break*/, 8];\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n            return [4 /*yield*/, client.unmuteUser(message.user.id)];\n          case 6:\n            _a.sent();\n            fallbackMessage = t(\"{{ user }} has been unmuted\", {\n              user: message.user.name || message.user.id\n            });\n            successMessage = getSuccessNotification && validateAndGetMessage(getSuccessNotification, [message.user]) || fallbackMessage;\n            if (typeof successMessage === 'string') {\n              notify(successMessage, 'success');\n            }\n            return [3 /*break*/, 8];\n          case 7:\n            e_2 = _a.sent();\n            errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message.user]) || t('Error unmuting a user ...');\n            if (typeof errorMessage === 'string') {\n              notify(errorMessage, 'error');\n            }\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"module"}