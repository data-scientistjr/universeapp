{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { FileUploadButton, ImageDropzone } from 'react-file-utils';\nimport { EmojiPicker } from './EmojiPicker';\nimport { EmojiIconSmall as DefaultEmojiIcon, FileUploadIconFlat as DefaultFileUploadIcon, SendButton as DefaultSendButton } from './icons';\nimport { UploadsPreview } from './UploadsPreview';\nimport { ChatAutoComplete } from '../ChatAutoComplete/ChatAutoComplete';\nimport { Tooltip } from '../Tooltip/Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { QuotedMessagePreview as DefaultQuotedMessagePreview } from './QuotedMessagePreview';\nimport { CooldownTimer as DefaultCooldownTimer } from './CooldownTimer';\n/**\n * @deprecated This component has beend deprecated in favor of [`MessageInputFlat`](./MessageInputFlat.tsx) from which\n * `MessageInputSmall` \"inherited\" most of the code with only slight modification to classNames\n * and markup.\n * In case you need to change styling in places where `MessageInputSmall` has been used previously ([`Thread`](../Thread/Thread.tsx))\n * please do so by updating the CSS or by overriding the component itself.\n *\n * **Will be removed with the complete transition to the theming V2 (next major release - `v11.0.0`).**\n */\nexport var MessageInputSmall = function MessageInputSmall() {\n  var _a = useChannelStateContext('MessageInputSmall'),\n    acceptedFiles = _a.acceptedFiles,\n    multipleUploads = _a.multipleUploads,\n    quotedMessage = _a.quotedMessage;\n  var setQuotedMessage = useChannelActionContext('MessageInputSmall').setQuotedMessage;\n  var t = useTranslationContext('MessageInputSmall').t;\n  var channel = useChatContext('MessageInputSmall').channel;\n  var _b = useMessageInputContext('MessageInputSmall'),\n    closeEmojiPicker = _b.closeEmojiPicker,\n    cooldownRemaining = _b.cooldownRemaining,\n    emojiPickerIsOpen = _b.emojiPickerIsOpen,\n    handleSubmit = _b.handleSubmit,\n    isUploadEnabled = _b.isUploadEnabled,\n    maxFilesLeft = _b.maxFilesLeft,\n    numberOfUploads = _b.numberOfUploads,\n    openEmojiPicker = _b.openEmojiPicker,\n    setCooldownRemaining = _b.setCooldownRemaining,\n    uploadNewFiles = _b.uploadNewFiles;\n  var _c = useComponentContext('MessageInputSmall'),\n    _d = _c.CooldownTimer,\n    CooldownTimer = _d === void 0 ? DefaultCooldownTimer : _d,\n    _e = _c.EmojiIcon,\n    EmojiIcon = _e === void 0 ? DefaultEmojiIcon : _e,\n    _f = _c.FileUploadIcon,\n    FileUploadIcon = _f === void 0 ? DefaultFileUploadIcon : _f,\n    _g = _c.SendButton,\n    SendButton = _g === void 0 ? DefaultSendButton : _g,\n    _h = _c.QuotedMessagePreview,\n    QuotedMessagePreview = _h === void 0 ? DefaultQuotedMessagePreview : _h;\n  useEffect(function () {\n    var handleQuotedMessageUpdate = function handleQuotedMessageUpdate(e) {\n      var _a;\n      if (!(quotedMessage && ((_a = e.message) === null || _a === void 0 ? void 0 : _a.id) === quotedMessage.id)) return;\n      if (e.type === 'message.deleted') {\n        setQuotedMessage(undefined);\n        return;\n      }\n      setQuotedMessage(e.message);\n    };\n    channel === null || channel === void 0 ? void 0 : channel.on('message.deleted', handleQuotedMessageUpdate);\n    channel === null || channel === void 0 ? void 0 : channel.on('message.updated', handleQuotedMessageUpdate);\n    return function () {\n      channel === null || channel === void 0 ? void 0 : channel.off('message.deleted', handleQuotedMessageUpdate);\n      channel === null || channel === void 0 ? void 0 : channel.off('message.updated', handleQuotedMessageUpdate);\n    };\n  }, [channel, quotedMessage]);\n  return React.createElement(\"div\", {\n    className: 'str-chat__small-message-input__wrapper'\n  }, React.createElement(ImageDropzone, {\n    accept: acceptedFiles,\n    disabled: !isUploadEnabled || maxFilesLeft === 0 || !!cooldownRemaining,\n    handleFiles: uploadNewFiles,\n    maxNumberOfFiles: maxFilesLeft,\n    multiple: multipleUploads\n  }, React.createElement(\"div\", {\n    className: \"str-chat__small-message-input \".concat(SendButton ? 'str-chat__small-message-input--send-button-active' : '', \" \").concat(quotedMessage && quotedMessage.parent_id ? 'str-chat__input-flat-quoted' : '', \" \").concat(numberOfUploads ? 'str-chat__small-message-input-has-attachments' : '', \" \")\n  }, quotedMessage && quotedMessage.parent_id && React.createElement(QuotedMessagePreview, {\n    quotedMessage: quotedMessage\n  }), isUploadEnabled && React.createElement(UploadsPreview, null), React.createElement(\"div\", {\n    className: 'str-chat__small-message-input--textarea-wrapper'\n  }, React.createElement(ChatAutoComplete, null), cooldownRemaining ? React.createElement(\"div\", {\n    className: 'str-chat__input-small-cooldown'\n  }, React.createElement(CooldownTimer, {\n    cooldownInterval: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  })) : React.createElement(React.Fragment, null, isUploadEnabled && React.createElement(\"div\", {\n    className: 'str-chat__fileupload-wrapper',\n    \"data-testid\": 'fileinput'\n  }, React.createElement(Tooltip, null, maxFilesLeft ? t('Attach files') : t(\"You've reached the maximum number of files\")), React.createElement(FileUploadButton, {\n    accepts: acceptedFiles,\n    disabled: maxFilesLeft === 0,\n    handleFiles: uploadNewFiles,\n    multiple: multipleUploads\n  }, React.createElement(\"span\", {\n    className: 'str-chat__small-message-input-fileupload'\n  }, React.createElement(FileUploadIcon, null)))), React.createElement(\"div\", {\n    className: 'str-chat__emojiselect-wrapper'\n  }, React.createElement(Tooltip, null, emojiPickerIsOpen ? t('Close emoji picker') : t('Open emoji picker')), React.createElement(\"button\", {\n    \"aria-label\": 'Emoji picker',\n    className: 'str-chat__small-message-input-emojiselect',\n    onClick: emojiPickerIsOpen ? closeEmojiPicker : openEmojiPicker\n  }, React.createElement(EmojiIcon, null)))), React.createElement(EmojiPicker, {\n    small: true\n  })), !cooldownRemaining && React.createElement(SendButton, {\n    sendMessage: handleSubmit\n  }))));\n};","map":null,"metadata":{},"sourceType":"module"}