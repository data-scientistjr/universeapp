{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelHiddenListener = function useChannelHiddenListener(setChannels, customHandler) {\n  var client = useChatContext('useChannelHiddenListener').client;\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      } else {\n        setChannels(function (channels) {\n          var channelIndex = channels.findIndex(function (channel) {\n            return channel.cid === event.cid;\n          });\n          if (channelIndex < 0) return __spreadArray([], channels, true);\n          // Remove the hidden channel from the list.s\n          channels.splice(channelIndex, 1);\n          return __spreadArray([], channels, true);\n        });\n      }\n    };\n    client.on('channel.hidden', handleEvent);\n    return function () {\n      client.off('channel.hidden', handleEvent);\n    };\n  }, [customHandler]);\n};","map":null,"metadata":{},"sourceType":"module"}