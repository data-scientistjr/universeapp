{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { Suspense, useState } from 'react';\nimport clsx from 'clsx';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nimport { useProcessReactions } from './hooks/useProcessReactions';\nimport { PopperTooltip } from '../Tooltip';\n// todo: merge with ReactionsList/ButtonWithTooltip\n// avoiding breaking change of replacing <span> with <button>\nvar WithTooltip = function WithTooltip(_a) {\n  var children = _a.children,\n    onMouseEnter = _a.onMouseEnter,\n    onMouseLeave = _a.onMouseLeave,\n    title = _a.title;\n  var _b = useState(null),\n    referenceElement = _b[0],\n    setReferenceElement = _b[1];\n  var _c = useEnterLeaveHandlers({\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    }),\n    handleEnter = _c.handleEnter,\n    handleLeave = _c.handleLeave,\n    tooltipVisible = _c.tooltipVisible;\n  var themeVersion = useChatContext('WithTooltip').themeVersion;\n  return React.createElement(React.Fragment, null, themeVersion === '2' && React.createElement(PopperTooltip, {\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, title), React.createElement(\"span\", {\n    onMouseEnter: handleEnter,\n    onMouseLeave: handleLeave,\n    ref: setReferenceElement\n  }, children));\n};\nvar UnMemoizedSimpleReactionsList = function UnMemoizedSimpleReactionsList(props) {\n  var propHandleReaction = props.handleReaction,\n    rest = __rest(props, [\"handleReaction\"]);\n  var _a = useEmojiContext('SimpleReactionsList'),\n    Emoji = _a.Emoji,\n    emojiConfig = _a.emojiConfig;\n  var contextHandleReaction = useMessageContext('SimpleReactionsList').handleReaction;\n  var _b = useProcessReactions(__assign({\n      emojiConfig: emojiConfig\n    }, rest)),\n    additionalEmojiProps = _b.additionalEmojiProps,\n    emojiData = _b.emojiData,\n    getEmojiByReactionType = _b.getEmojiByReactionType,\n    iHaveReactedWithReaction = _b.iHaveReactedWithReaction,\n    latestReactions = _b.latestReactions,\n    latestReactionTypes = _b.latestReactionTypes,\n    supportedReactionsArePresent = _b.supportedReactionsArePresent,\n    totalReactionCount = _b.totalReactionCount;\n  var _c = useState(undefined),\n    tooltipReactionType = _c[0],\n    setTooltipReactionType = _c[1];\n  var themeVersion = useChatContext('SimpleReactionsList').themeVersion;\n  var handleReaction = propHandleReaction || contextHandleReaction;\n  if (!latestReactions.length) return null;\n  if (!supportedReactionsArePresent) return null;\n  var getUsersPerReactionType = function getUsersPerReactionType(type) {\n    return latestReactions.map(function (reaction) {\n      var _a, _b;\n      if (type && reaction.type === type) {\n        return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);\n      }\n      return null;\n    }).filter(Boolean);\n  };\n  return React.createElement(\"div\", {\n    className: 'str-chat__message-reactions-container'\n  }, React.createElement(\"ul\", {\n    className: 'str-chat__simple-reactions-list str-chat__message-reactions',\n    \"data-testid\": 'simple-reaction-list',\n    onMouseLeave: function onMouseLeave() {\n      return setTooltipReactionType(undefined);\n    }\n  }, latestReactionTypes.map(function (reactionType, i) {\n    var _a;\n    var emojiObject = getEmojiByReactionType(reactionType);\n    var isOwnReaction = iHaveReactedWithReaction(reactionType);\n    var tooltipVisible = emojiObject && tooltipReactionType === (emojiObject === null || emojiObject === void 0 ? void 0 : emojiObject.id);\n    var tooltipContent = (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 : _a.join(', ');\n    return emojiObject ? React.createElement(\"li\", {\n      className: clsx('str-chat__simple-reactions-list-item', {\n        'str-chat__message-reaction-own': isOwnReaction\n      }),\n      key: \"\".concat(emojiObject.id, \"-\").concat(i),\n      onClick: function onClick(event) {\n        return handleReaction(reactionType, event);\n      },\n      onKeyUp: function onKeyUp(event) {\n        return handleReaction(reactionType, event);\n      }\n    }, React.createElement(WithTooltip, {\n      onMouseEnter: function onMouseEnter() {\n        return setTooltipReactionType(reactionType);\n      },\n      onMouseLeave: function onMouseLeave() {\n        return setTooltipReactionType(undefined);\n      },\n      title: tooltipContent\n    }, React.createElement(Suspense, {\n      fallback: null\n    }, React.createElement(Emoji, __assign({\n      data: emojiData,\n      emoji: emojiObject,\n      size: 13\n    }, additionalEmojiProps))), \"\\xA0\", tooltipVisible && themeVersion === '1' && React.createElement(\"div\", {\n      className: 'str-chat__simple-reactions-list-tooltip'\n    }, React.createElement(\"div\", {\n      className: 'arrow'\n    }), tooltipContent))) : null;\n  }), React.createElement(\"li\", {\n    className: 'str-chat__simple-reactions-list-item--last-number'\n  }, totalReactionCount)));\n};\nexport var SimpleReactionsList = React.memo(UnMemoizedSimpleReactionsList);","map":null,"metadata":{},"sourceType":"module"}