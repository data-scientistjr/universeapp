{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nvar UnMemoizedChatAutoComplete = function UnMemoizedChatAutoComplete(props) {\n  var _a = useComponentContext('ChatAutoComplete'),\n    SuggestionItem = _a.AutocompleteSuggestionItem,\n    SuggestionList = _a.AutocompleteSuggestionList;\n  var t = useTranslationContext('ChatAutoComplete').t;\n  var messageInput = useMessageInputContext('ChatAutoComplete');\n  var cooldownRemaining = messageInput.cooldownRemaining,\n    disabled = messageInput.disabled,\n    emojiIndex = messageInput.emojiIndex,\n    innerRef = messageInput.textareaRef;\n  var placeholder = props.placeholder || t('Type your message');\n  var emojiReplace = props.wordReplace ? function (word) {\n    var _a;\n    return (_a = props.wordReplace) === null || _a === void 0 ? void 0 : _a.call(props, word, emojiIndex);\n  } : function (word) {\n    var found = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(word)) || [];\n    var emoji = found.filter(Boolean).slice(0, 10).find(function (_a) {\n      var emoticons = _a.emoticons;\n      return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));\n    });\n    if (!emoji || !('native' in emoji)) return null;\n    return emoji.native;\n  };\n  var updateInnerRef = useCallback(function (ref) {\n    if (innerRef) {\n      innerRef.current = ref;\n    }\n  }, [innerRef]);\n  return React.createElement(AutoCompleteTextarea, {\n    additionalTextareaProps: messageInput.additionalTextareaProps,\n    \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    className: 'str-chat__textarea__textarea str-chat__message-textarea',\n    closeCommandsList: messageInput.closeCommandsList,\n    closeMentionsList: messageInput.closeMentionsList,\n    containerClassName: 'str-chat__textarea str-chat__message-textarea-react-host',\n    disabled: disabled || !!cooldownRemaining,\n    disableMentions: messageInput.disableMentions,\n    dropdownClassName: 'str-chat__emojisearch',\n    grow: messageInput.grow,\n    handleSubmit: props.handleSubmit || messageInput.handleSubmit,\n    innerRef: updateInnerRef,\n    itemClassName: 'str-chat__emojisearch__item',\n    listClassName: 'str-chat__emojisearch__list',\n    loadingComponent: LoadingIndicator,\n    maxRows: messageInput.maxRows,\n    minChar: 0,\n    onBlur: props.onBlur,\n    onChange: props.onChange || messageInput.handleChange,\n    onFocus: props.onFocus,\n    onPaste: props.onPaste || messageInput.onPaste,\n    placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    replaceWord: emojiReplace,\n    rows: props.rows || 1,\n    shouldSubmit: messageInput.shouldSubmit,\n    showCommandsList: messageInput.showCommandsList,\n    showMentionsList: messageInput.showMentionsList,\n    SuggestionItem: SuggestionItem,\n    SuggestionList: SuggestionList,\n    trigger: messageInput.autocompleteTriggers || {},\n    value: props.value || messageInput.text\n  });\n};\nexport var ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);","map":null,"metadata":{},"sourceType":"module"}