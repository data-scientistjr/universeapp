{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect, useMemo, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var useCooldownTimer = function useCooldownTimer() {\n  var _a;\n  var latestMessageDatesByChannels = useChatContext('useCooldownTimer').latestMessageDatesByChannels;\n  var _b = useChannelStateContext('useCooldownTimer'),\n    channel = _b.channel,\n    _c = _b.messages,\n    messages = _c === void 0 ? [] : _c;\n  var client = useChatContext('useCooldownTimer').client;\n  var _d = useState(),\n    cooldownRemaining = _d[0],\n    setCooldownRemaining = _d[1];\n  var _e = channel.data || {},\n    cooldownInterval = _e.cooldown,\n    own_capabilities = _e.own_capabilities;\n  var skipCooldown = !(own_capabilities === null || own_capabilities === void 0 ? void 0 : own_capabilities.includes('slow-mode'));\n  var ownLatestMessageDate = useMemo(function () {\n    var _a, _b;\n    return (_a = latestMessageDatesByChannels[channel.cid]) !== null && _a !== void 0 ? _a : (_b = __spreadArray([], messages, true).sort(function (a, b) {\n      var _a, _b;\n      return ((_a = b.created_at) === null || _a === void 0 ? void 0 : _a.getTime()) - ((_b = a.created_at) === null || _b === void 0 ? void 0 : _b.getTime());\n    }).find(function (v) {\n      var _a, _b;\n      return ((_a = v.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);\n    })) === null || _b === void 0 ? void 0 : _b.created_at;\n  }, [messages, (_a = client.user) === null || _a === void 0 ? void 0 : _a.id, latestMessageDatesByChannels, channel.cid]);\n  useEffect(function () {\n    if (skipCooldown || !cooldownInterval || !ownLatestMessageDate) return;\n    var remainingCooldown = Math.round(cooldownInterval - (new Date().getTime() - ownLatestMessageDate.getTime()) / 1000);\n    if (remainingCooldown > 0) setCooldownRemaining(remainingCooldown);\n  }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);\n  return {\n    cooldownInterval: cooldownInterval !== null && cooldownInterval !== void 0 ? cooldownInterval : 0,\n    cooldownRemaining: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  };\n};","map":null,"metadata":{},"sourceType":"module"}