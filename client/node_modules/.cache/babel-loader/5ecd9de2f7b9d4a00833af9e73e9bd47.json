{"ast":null,"code":"\"use strict\";\n\nvar visit = require('unist-util-visit');\nvar splice = [].splice;\nexports.ofType = function (types, mode) {\n  return ifNotMatch(allow, mode);\n  function allow(node, index, parent) {\n    return !types.includes(node.type);\n  }\n};\nexports.ifNotMatch = ifNotMatch;\nfunction ifNotMatch(allow, mode) {\n  return transform;\n  function transform(tree) {\n    visit(tree, filter);\n    return tree;\n  } // eslint-disable-next-line consistent-return\n\n  function filter(node, index, parent) {\n    if (parent && !allow(node, index, parent)) {\n      var parameters = [index, 1];\n      if (mode === 'unwrap' && node.children) {\n        parameters = parameters.concat(node.children);\n      }\n      splice.apply(parent.children, parameters);\n      return index;\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}