{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\nvar UnMemoizedScrollToBottomButton = function UnMemoizedScrollToBottomButton(props) {\n  var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom,\n    onClick = props.onClick,\n    threadList = props.threadList;\n  var _a = useChatContext(),\n    activeChannel = _a.channel,\n    client = _a.client;\n  var thread = useChannelStateContext().thread;\n  var _b = useState((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0),\n    countUnread = _b[0],\n    setCountUnread = _b[1];\n  var _c = useState((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0),\n    replyCount = _c[0],\n    setReplyCount = _c[1];\n  var observedEvent = threadList ? 'message.updated' : 'message.new';\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      var _a, _b, _c, _d, _e;\n      var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);\n      var newMessageIsMine = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);\n      var isThreadOpen = !!thread;\n      var newMessageIsReply = !!((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id);\n      var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {\n        return;\n      }\n      if (event.type === 'message.new') {\n        // cannot rely on channel.countUnread because active channel is automatically marked read\n        setCountUnread(function (prev) {\n          return prev + 1;\n        });\n      } else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {\n        var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;\n        setCountUnread(function () {\n          return newReplyCount_1 - replyCount;\n        });\n      }\n    };\n    client.on(observedEvent, handleEvent);\n    return function () {\n      client.off(observedEvent, handleEvent);\n    };\n  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n  useEffect(function () {\n    if (isMessageListScrolledToBottom) {\n      setCountUnread(0);\n      setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);\n    }\n  }, [isMessageListScrolledToBottom, thread]);\n  if (isMessageListScrolledToBottom) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__jump-to-latest-message'\n  }, React.createElement(\"button\", {\n    \"aria-live\": 'polite',\n    className: \"\\n        str-chat__message-notification-right\\n        str-chat__message-notification-scroll-to-latest\\n        str-chat__circle-fab\\n      \",\n    \"data-testid\": 'message-notification',\n    onClick: onClick\n  }, React.createElement(ArrowDown, null), countUnread > 0 && React.createElement(\"div\", {\n    className: clsx('str-chat__message-notification', 'str-chat__message-notification-scroll-to-latest-unread-count', 'str-chat__jump-to-latest-unread-count'),\n    \"data-testid\": 'unread-message-notification-counter'\n  }, countUnread)));\n};\nexport var ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);","map":null,"metadata":{},"sourceType":"module"}