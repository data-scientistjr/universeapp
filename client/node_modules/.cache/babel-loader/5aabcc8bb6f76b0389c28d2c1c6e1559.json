{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nexport var PROGRESS_UPDATE_INTERVAL = 100;\nexport var useAudioController = function useAudioController() {\n  var _a = useState(false),\n    isPlaying = _a[0],\n    setIsPlaying = _a[1];\n  var _b = useState(0),\n    progress = _b[0],\n    setProgress = _b[1];\n  var audioRef = useRef(null);\n  var togglePlay = useCallback(function () {\n    setIsPlaying(function (playing) {\n      return !playing;\n    });\n  }, []);\n  var seek = useCallback(function (_a) {\n    var clientX = _a.clientX,\n      currentTarget = _a.currentTarget;\n    if (!audioRef.current) return;\n    var _b = currentTarget.getBoundingClientRect(),\n      width = _b.width,\n      x = _b.x;\n    var ratio = (clientX - x) / width;\n    if (!isPlaying) setProgress(ratio * 100);\n    audioRef.current.currentTime = ratio * audioRef.current.duration;\n  }, [isPlaying]);\n  useEffect(function () {\n    if (!audioRef.current || !isPlaying) return;\n    var interval = window.setInterval(function () {\n      if (!audioRef.current) return;\n      var _a = audioRef.current,\n        currentTime = _a.currentTime,\n        duration = _a.duration;\n      setProgress(currentTime / duration * 100);\n      if (currentTime === duration) setIsPlaying(false);\n    }, PROGRESS_UPDATE_INTERVAL);\n    audioRef.current.play();\n    return function () {\n      var _a;\n      (_a = audioRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n      window.clearInterval(interval);\n    };\n  }, [isPlaying]);\n  return {\n    audioRef: audioRef,\n    isPlaying: isPlaying,\n    progress: progress,\n    seek: seek,\n    togglePlay: togglePlay\n  };\n};","map":null,"metadata":{},"sourceType":"module"}