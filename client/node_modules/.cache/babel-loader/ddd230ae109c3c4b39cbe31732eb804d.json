{"ast":null,"code":"import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedMessageOptions = function UnMemoizedMessageOptions(props) {\n  var _a = props.ActionsIcon,\n    ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a,\n    _b = props.displayReplies,\n    displayReplies = _b === void 0 ? true : _b,\n    propHandleOpenThread = props.handleOpenThread,\n    messageWrapperRef = props.messageWrapperRef,\n    _c = props.ReactionIcon,\n    ReactionIcon = _c === void 0 ? DefaultReactionIcon : _c,\n    _d = props.theme,\n    theme = _d === void 0 ? 'simple' : _d,\n    _e = props.ThreadIcon,\n    ThreadIcon = _e === void 0 ? DefaultThreadIcon : _e;\n  var _f = useMessageContext('MessageOptions'),\n    customMessageActions = _f.customMessageActions,\n    getMessageActions = _f.getMessageActions,\n    contextHandleOpenThread = _f.handleOpenThread,\n    initialMessage = _f.initialMessage,\n    message = _f.message,\n    onReactionListClick = _f.onReactionListClick,\n    threadList = _f.threadList;\n  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n  var rootClassName = \"str-chat__message-\".concat(theme, \"__actions str-chat__message-options\");\n  return React.createElement(\"div\", {\n    className: rootClassName,\n    \"data-testid\": 'message-options'\n  }, showActionsBox && React.createElement(MessageActions, {\n    ActionsIcon: ActionsIcon,\n    messageWrapperRef: messageWrapperRef\n  }), shouldShowReplies && React.createElement(\"button\", {\n    \"aria-label\": 'Open Thread',\n    className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--thread str-chat__message-reply-in-thread-button\"),\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, {\n    className: 'str-chat__message-action-icon'\n  })), shouldShowReactions && React.createElement(\"button\", {\n    \"aria-label\": 'Open Reaction Selector',\n    className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--reactions str-chat__message-reactions-button\"),\n    \"data-testid\": 'message-reaction-action',\n    onClick: onReactionListClick\n  }, React.createElement(ReactionIcon, {\n    className: 'str-chat__message-action-icon'\n  })));\n};\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);","map":null,"metadata":{},"sourceType":"module"}