{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelUpdatedListener = function useChannelUpdatedListener(setChannels, customHandler, forceUpdate) {\n  var client = useChatContext('useChannelUpdatedListener').client;\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      setChannels(function (channels) {\n        var _a, _b, _c, _d, _e, _f;\n        var channelIndex = channels.findIndex(function (channel) {\n          var _a;\n          return channel.cid === ((_a = event.channel) === null || _a === void 0 ? void 0 : _a.cid);\n        });\n        if (channelIndex > -1 && event.channel) {\n          var newChannels = channels;\n          newChannels[channelIndex].data = __assign(__assign({}, event.channel), {\n            hidden: (_b = (_a = event.channel) === null || _a === void 0 ? void 0 : _a.hidden) !== null && _b !== void 0 ? _b : (_c = newChannels[channelIndex].data) === null || _c === void 0 ? void 0 : _c.hidden,\n            own_capabilities: (_e = (_d = event.channel) === null || _d === void 0 ? void 0 : _d.own_capabilities) !== null && _e !== void 0 ? _e : (_f = newChannels[channelIndex].data) === null || _f === void 0 ? void 0 : _f.own_capabilities\n          });\n          return __spreadArray([], newChannels, true);\n        }\n        return channels;\n      });\n      if (forceUpdate) {\n        forceUpdate();\n      }\n      if (customHandler && typeof customHandler === 'function') {\n        customHandler(setChannels, event);\n      }\n    };\n    client.on('channel.updated', handleEvent);\n    return function () {\n      client.off('channel.updated', handleEvent);\n    };\n  }, [customHandler]);\n};","map":null,"metadata":{},"sourceType":"module"}