{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { useActionHandler, useDeleteHandler, useUserRole } from './hooks';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageTimestamp } from './MessageTimestamp';\nimport { getMessageActions } from './utils';\nimport { Avatar } from '../Avatar';\nimport { Gallery } from '../Gallery';\nimport { MessageActions } from '../MessageActions';\nimport { MML } from '../MML';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { renderText } from '../../utils';\nvar selectColor = function selectColor(number, dark) {\n  var hue = number * 137.508; // use golden angle approximation\n  return \"hsl(\".concat(hue, \",\").concat(dark ? '50%' : '85%', \", \").concat(dark ? '75%' : '55%', \")\");\n};\nvar hashUserId = function hashUserId(userId) {\n  var hash = userId.split('').reduce(function (acc, c) {\n    acc = (acc << 5) - acc + c.charCodeAt(0); // eslint-disable-line\n    return acc & acc; // eslint-disable-line no-bitwise\n  }, 0);\n  return Math.abs(hash) / Math.pow(10, Math.ceil(Math.log10(Math.abs(hash) + 1)));\n};\nvar getUserColor = function getUserColor(theme, userId) {\n  return selectColor(hashUserId(userId), theme.includes('dark'));\n};\nvar UnMemoizedFixedHeightMessage = function UnMemoizedFixedHeightMessage(props) {\n  var _a, _b, _c, _d;\n  var propGroupedByUser = props.groupedByUser,\n    propMessage = props.message;\n  var theme = useChatContext('FixedHeightMessage').theme;\n  var _e = useMessageContext('FixedHeightMessage'),\n    contextGroupedByUser = _e.groupedByUser,\n    contextMessage = _e.message;\n  var _f = useComponentContext('FixedHeightMessage').MessageDeleted,\n    MessageDeleted = _f === void 0 ? DefaultMessageDeleted : _f;\n  var userLanguage = useTranslationContext('FixedHeightMessage').userLanguage;\n  var groupedByUser = propGroupedByUser !== undefined ? propGroupedByUser : contextGroupedByUser;\n  var message = propMessage || contextMessage;\n  var handleAction = useActionHandler(message);\n  var handleDelete = useDeleteHandler(message);\n  var role = useUserRole(message);\n  var messageTextToRender = ((_a = message === null || message === void 0 ? void 0 : message.i18n) === null || _a === void 0 ? void 0 : _a[\"\".concat(userLanguage, \"_text\")]) || (message === null || message === void 0 ? void 0 : message.text);\n  var renderedText = useMemo(function () {\n    return renderText(messageTextToRender, message.mentioned_users);\n  }, [message.mentioned_users, messageTextToRender]);\n  var userId = ((_b = message.user) === null || _b === void 0 ? void 0 : _b.id) || '';\n  var userColor = useMemo(function () {\n    return getUserColor(theme, userId);\n  }, [userId, theme]);\n  var messageActionsHandler = useCallback(function () {\n    return getMessageActions(['delete'], {\n      canDelete: role.canDelete\n    });\n  }, [role]);\n  var images = (_c = message === null || message === void 0 ? void 0 : message.attachments) === null || _c === void 0 ? void 0 : _c.filter(function (_a) {\n    var type = _a.type;\n    return type === 'image';\n  });\n  return React.createElement(\"div\", {\n    className: \"str-chat__virtual-message__wrapper \".concat(role.isMyMessage ? 'str-chat__virtual-message__wrapper--me' : '', \" \").concat(groupedByUser ? 'str-chat__virtual-message__wrapper--group' : ''),\n    key: message.id\n  }, message.user && React.createElement(Avatar, {\n    image: message.user.image,\n    name: message.user.name || message.user.id,\n    shape: 'rounded',\n    size: 38,\n    user: message.user\n  }), React.createElement(\"div\", {\n    className: 'str-chat__virtual-message__content'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__virtual-message__meta'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__virtual-message__author',\n    style: {\n      color: userColor\n    }\n  }, React.createElement(\"strong\", null, ((_d = message.user) === null || _d === void 0 ? void 0 : _d.name) || 'unknown'))), message.deleted_at || message.type === 'deleted' ? React.createElement(MessageDeleted, {\n    message: message\n  }) : React.createElement(React.Fragment, null, images && React.createElement(Gallery, {\n    images: images\n  }), React.createElement(\"div\", {\n    className: 'str-chat__virtual-message__text',\n    \"data-testid\": 'msg-text'\n  }, renderedText, message.mml && React.createElement(MML, {\n    actionHandler: handleAction,\n    align: 'left',\n    source: message.mml\n  }), React.createElement(\"div\", {\n    className: 'str-chat__virtual-message__data'\n  }, React.createElement(MessageActions, {\n    customWrapperClass: 'str-chat__virtual-message__actions',\n    getMessageActions: messageActionsHandler,\n    handleDelete: handleDelete,\n    message: message,\n    mine: function mine() {\n      return role.isMyMessage;\n    }\n  }), React.createElement(\"span\", {\n    className: 'str-chat__virtual-message__date'\n  }, React.createElement(MessageTimestamp, {\n    customClass: 'str-chat__message-simple-timestamp',\n    message: message\n  })))))));\n};\n/**\n * @deprecated - This UI component will be removed in the next major release.\n *\n * FixedHeightMessage - This component renders a single message.\n * It uses fixed height elements to make sure it works well in VirtualizedMessageList\n */\nexport var FixedHeightMessage = React.memo(UnMemoizedFixedHeightMessage);","map":null,"metadata":{},"sourceType":"module"}