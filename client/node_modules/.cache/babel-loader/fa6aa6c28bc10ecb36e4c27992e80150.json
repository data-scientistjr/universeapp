{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback, useState } from 'react';\nimport throttle from 'lodash.throttle';\nimport { searchLocalUsers } from './utils';\nimport { UserItem } from '../../UserItem/UserItem';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var useUserTrigger = function useUserTrigger(params) {\n  var disableMentions = params.disableMentions,\n    mentionAllAppUsers = params.mentionAllAppUsers,\n    _a = params.mentionQueryParams,\n    mentionQueryParams = _a === void 0 ? {} : _a,\n    onSelectUser = params.onSelectUser,\n    useMentionsTransliteration = params.useMentionsTransliteration;\n  var _b = useState(false),\n    searching = _b[0],\n    setSearching = _b[1];\n  var _c = useChatContext('useUserTrigger'),\n    client = _c.client,\n    mutes = _c.mutes,\n    themeVersion = _c.themeVersion;\n  var channel = useChannelStateContext('useUserTrigger').channel;\n  var members = channel.state.members;\n  var watchers = channel.state.watchers;\n  var getMembersAndWatchers = useCallback(function () {\n    var memberUsers = members ? Object.values(members).map(function (_a) {\n      var user = _a.user;\n      return user;\n    }) : [];\n    var watcherUsers = watchers ? Object.values(watchers) : [];\n    var users = __spreadArray(__spreadArray([], memberUsers, true), watcherUsers, true);\n    // make sure we don't list users twice\n    var uniqueUsers = {};\n    users.forEach(function (user) {\n      if (user && !uniqueUsers[user.id]) {\n        uniqueUsers[user.id] = user;\n      }\n    });\n    return Object.values(uniqueUsers);\n  }, [members, watchers]);\n  var queryMembersThrottled = useCallback(throttle(function (query, onReady) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var response, users, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, channel.queryMembers({\n              name: {\n                $autocomplete: query\n              }\n            })];\n          case 1:\n            response = _a.sent();\n            users = response.members.map(function (member) {\n              return member.user;\n            });\n            if (onReady && users.length) {\n              onReady(users);\n            } else {\n              onReady([]);\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_1 = _a.sent();\n            console.log({\n              error: error_1\n            });\n            return [3 /*break*/, 3];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, 200), [channel]);\n  var queryUsers = function queryUsers(query, onReady) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var users, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!query || searching) return [2 /*return*/];\n            setSearching(true);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.queryUsers(__assign({\n              $or: [{\n                id: {\n                  $autocomplete: query\n                }\n              }, {\n                name: {\n                  $autocomplete: query\n                }\n              }],\n              id: {\n                $ne: client.userID\n              }\n            }, typeof mentionQueryParams.filters === 'function' ? mentionQueryParams.filters(query) : mentionQueryParams.filters), Array.isArray(mentionQueryParams.sort) ? __spreadArray([{\n              id: 1\n            }], mentionQueryParams.sort, true) : __assign({\n              id: 1\n            }, mentionQueryParams.sort), __assign({\n              limit: 10\n            }, mentionQueryParams.options))];\n          case 2:\n            users = _a.sent().users;\n            if (onReady && users.length) {\n              onReady(users);\n            } else {\n              onReady([]);\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            error_2 = _a.sent();\n            console.log({\n              error: error_2\n            });\n            return [3 /*break*/, 4];\n          case 4:\n            setSearching(false);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var queryUsersThrottled = throttle(queryUsers, 200);\n  return {\n    callback: function callback(item) {\n      return onSelectUser(item);\n    },\n    component: UserItem,\n    dataProvider: function dataProvider(query, text, onReady) {\n      var _a, _b;\n      if (disableMentions) return;\n      var filterMutes = function filterMutes(data) {\n        if (text.includes('/unmute') && !mutes.length) {\n          return [];\n        }\n        if (!mutes.length) return data;\n        if (text.includes('/unmute')) {\n          return data.filter(function (suggestion) {\n            return mutes.some(function (mute) {\n              return mute.target.id === suggestion.id;\n            });\n          });\n        }\n        return data.filter(function (suggestion) {\n          return mutes.every(function (mute) {\n            return mute.target.id !== suggestion.id;\n          });\n        });\n      };\n      if (mentionAllAppUsers) {\n        return queryUsersThrottled(query, function (data) {\n          if (onReady) onReady(filterMutes(data), query);\n        });\n      }\n      /**\n       * By default, we return maximum 100 members via queryChannels api call.\n       * Thus it is safe to assume, that if number of members in channel.state is < 100,\n       * then all the members are already available on client side and we don't need to\n       * make any api call to queryMembers endpoint.\n       */\n      if (!query || Object.values(members || {}).length < 100) {\n        var users = getMembersAndWatchers();\n        var params_1 = {\n          ownUserId: client.userID,\n          query: query,\n          text: text,\n          useMentionsTransliteration: useMentionsTransliteration,\n          users: users\n        };\n        var matchingUsers = searchLocalUsers(params_1);\n        var usersToShow = (_b = (_a = mentionQueryParams.options) === null || _a === void 0 ? void 0 : _a.limit) !== null && _b !== void 0 ? _b : themeVersion === '2' ? 7 : 10;\n        var data = matchingUsers.slice(0, usersToShow);\n        if (onReady) onReady(filterMutes(data), query);\n        return data;\n      }\n      return queryMembersThrottled(query, function (data) {\n        if (onReady) onReady(filterMutes(data), query);\n      });\n    },\n    output: function output(entity) {\n      return {\n        caretPosition: 'next',\n        key: entity.id,\n        text: \"@\".concat(entity.name || entity.id)\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}