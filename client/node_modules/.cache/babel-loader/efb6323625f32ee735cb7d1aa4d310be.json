{"ast":null,"code":"import { CommandItem } from '../../CommandItem/CommandItem';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useCommandTrigger = function useCommandTrigger() {\n  var themeVersion = useChatContext('useCommandTrigger').themeVersion;\n  var channelConfig = useChannelStateContext('useCommandTrigger').channelConfig;\n  var commands = channelConfig === null || channelConfig === void 0 ? void 0 : channelConfig.commands;\n  return {\n    component: CommandItem,\n    dataProvider: function dataProvider(query, text, onReady) {\n      if (text.indexOf('/') !== 0 || !commands) {\n        return [];\n      }\n      var selectedCommands = commands.filter(function (command) {\n        var _a;\n        return ((_a = command.name) === null || _a === void 0 ? void 0 : _a.indexOf(query)) !== -1;\n      });\n      // sort alphabetically unless the you're matching the first char\n      selectedCommands.sort(function (a, b) {\n        var _a, _b;\n        var nameA = (_a = a.name) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        var nameB = (_b = b.name) === null || _b === void 0 ? void 0 : _b.toLowerCase();\n        if ((nameA === null || nameA === void 0 ? void 0 : nameA.indexOf(query)) === 0) {\n          nameA = \"0\".concat(nameA);\n        }\n        if ((nameB === null || nameB === void 0 ? void 0 : nameB.indexOf(query)) === 0) {\n          nameB = \"0\".concat(nameB);\n        }\n        // Should confirm possible null / undefined when TS is fully implemented\n        if (nameA != null && nameB != null) {\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      var result = selectedCommands.slice(0, themeVersion === '2' ? 5 : 10);\n      if (onReady) onReady(result.filter(function (result) {\n        return result.name !== undefined;\n      }), query);\n      return result;\n    },\n    output: function output(entity) {\n      return {\n        caretPosition: 'next',\n        key: entity.name,\n        text: \"/\".concat(entity.name)\n      };\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}