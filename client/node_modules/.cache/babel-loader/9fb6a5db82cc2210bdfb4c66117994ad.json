{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useCallback, useEffect } from 'react';\nimport { checkUploadPermissions } from './utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport var useFileUploads = function useFileUploads(props, state, dispatch) {\n  var doFileUploadRequest = props.doFileUploadRequest,\n    errorHandler = props.errorHandler;\n  var fileUploads = state.fileUploads;\n  var channel = useChannelStateContext('useFileUploads').channel;\n  var addNotification = useChannelActionContext('useFileUploads').addNotification;\n  var getAppSettings = useChatContext('useFileUploads').getAppSettings;\n  var t = useTranslationContext('useFileUploads').t;\n  var uploadFile = useCallback(function (id) {\n    dispatch({\n      id: id,\n      state: 'uploading',\n      type: 'setFileUpload'\n    });\n  }, []);\n  var removeFile = useCallback(function (id) {\n    // TODO: cancel upload if still uploading\n    dispatch({\n      id: id,\n      type: 'removeFileUpload'\n    });\n  }, []);\n  useEffect(function () {\n    (function () {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var upload, file, id, canUpload, response, error_1, errorMessage, alreadyRemoved;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              upload = Object.values(fileUploads).find(function (fileUpload) {\n                return fileUpload.state === 'uploading' && fileUpload.file;\n              });\n              if (!upload) return [2 /*return*/];\n              file = upload.file, id = upload.id;\n              return [4 /*yield*/, checkUploadPermissions({\n                addNotification: addNotification,\n                file: file,\n                getAppSettings: getAppSettings,\n                t: t,\n                uploadType: 'file'\n              })];\n            case 1:\n              canUpload = _a.sent();\n              if (!canUpload) return [2 /*return*/, removeFile(id)];\n              _a.label = 2;\n            case 2:\n              _a.trys.push([2, 7,, 8]);\n              if (!doFileUploadRequest) return [3 /*break*/, 4];\n              return [4 /*yield*/, doFileUploadRequest(file, channel)];\n            case 3:\n              response = _a.sent();\n              return [3 /*break*/, 6];\n            case 4:\n              return [4 /*yield*/, channel.sendFile(file)];\n            case 5:\n              response = _a.sent();\n              _a.label = 6;\n            case 6:\n              return [3 /*break*/, 8];\n            case 7:\n              error_1 = _a.sent();\n              errorMessage = typeof error_1.message === 'string' ? error_1.message : t('Error uploading file');\n              addNotification(errorMessage, 'error');\n              alreadyRemoved = false;\n              if (!fileUploads[id]) {\n                alreadyRemoved = true;\n              } else {\n                dispatch({\n                  id: id,\n                  state: 'failed',\n                  type: 'setFileUpload'\n                });\n              }\n              if (!alreadyRemoved && errorHandler) {\n                // TODO: verify if the parameters passed to the error handler actually make sense\n                errorHandler(error_1, 'upload-file', file);\n              }\n              return [2 /*return*/];\n            case 8:\n              // If doImageUploadRequest returns any falsy value, then don't create the upload preview.\n              // This is for the case if someone wants to handle failure on app level.\n              if (!response) {\n                removeFile(id);\n                return [2 /*return*/];\n              }\n\n              dispatch({\n                id: id,\n                state: 'finished',\n                thumb_url: response.thumb_url,\n                type: 'setFileUpload',\n                url: response.file\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    })();\n  }, [fileUploads, channel, doFileUploadRequest, errorHandler, removeFile]);\n  return {\n    removeFile: removeFile,\n    uploadFile: uploadFile\n  };\n};","map":null,"metadata":{},"sourceType":"module"}