{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect, useMemo, useState } from 'react';\nimport { MAX_QUERY_CHANNELS_LIMIT } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var usePaginatedChannels = function usePaginatedChannels(client, filters, sort, options, activeChannelHandler) {\n  var _a = useChatContext('usePaginatedChannels').channelsQueryState,\n    setError = _a.setError,\n    setQueryInProgress = _a.setQueryInProgress;\n  var _b = useState([]),\n    channels = _b[0],\n    setChannels = _b[1];\n  var _c = useState(true),\n    hasNextPage = _c[0],\n    setHasNextPage = _c[1];\n  // memoize props\n  var filterString = useMemo(function () {\n    return JSON.stringify(filters);\n  }, [filters]);\n  var sortString = useMemo(function () {\n    return JSON.stringify(sort);\n  }, [sort]);\n  var queryChannels = function queryChannels(queryType) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var offset, newOptions, channelQueryResponse, newChannels, err_1;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            setError(null);\n            if (queryType === 'reload') {\n              setChannels([]);\n              setQueryInProgress('reload');\n            } else {\n              setQueryInProgress('load-more');\n            }\n            offset = queryType === 'reload' ? 0 : channels.length;\n            newOptions = __assign({\n              limit: (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : MAX_QUERY_CHANNELS_LIMIT,\n              offset: offset\n            }, options);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.queryChannels(filters, sort || {}, newOptions)];\n          case 2:\n            channelQueryResponse = _b.sent();\n            newChannels = queryType === 'reload' ? channelQueryResponse : __spreadArray(__spreadArray([], channels, true), channelQueryResponse, true);\n            setChannels(newChannels);\n            setHasNextPage(channelQueryResponse.length >= newOptions.limit);\n            // Set active channel only on load of first page\n            if (!offset && activeChannelHandler) {\n              activeChannelHandler(newChannels, setChannels);\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _b.sent();\n            console.warn(err_1);\n            setError(err_1);\n            return [3 /*break*/, 4];\n          case 4:\n            setQueryInProgress(null);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var loadNextPage = function loadNextPage() {\n    queryChannels();\n  };\n  useEffect(function () {\n    queryChannels('reload');\n  }, [filterString, sortString]);\n  return {\n    channels: channels,\n    hasNextPage: hasNextPage,\n    loadNextPage: loadNextPage,\n    setChannels: setChannels\n  };\n};","map":null,"metadata":{},"sourceType":"module"}