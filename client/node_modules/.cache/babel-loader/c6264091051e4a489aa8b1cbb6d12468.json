{"ast":null,"code":"import React, { useCallback, useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { SearchIcon } from './icons';\nimport { ChannelPreview } from '../ChannelPreview';\nimport { isChannel } from './utils';\nimport { Avatar } from '../Avatar';\nimport { useChatContext, useTranslationContext } from '../../context';\nvar DefaultSearchEmpty = function DefaultSearchEmpty() {\n  var t = useTranslationContext('SearchResults').t;\n  return React.createElement(\"div\", {\n    \"aria-live\": 'polite',\n    className: 'str-chat__channel-search-container-empty'\n  }, React.createElement(SearchIcon, null), t('No results found'));\n};\nvar DefaultSearchResultsHeader = function DefaultSearchResultsHeader(_a) {\n  var results = _a.results;\n  var t = useTranslationContext('SearchResultsHeader').t;\n  return React.createElement(\"div\", {\n    className: 'str-chat__channel-search-results-header',\n    \"data-testid\": 'channel-search-results-header'\n  }, t('searchResultsCount', {\n    count: results.length\n  }));\n};\nvar DefaultSearchResultsList = function DefaultSearchResultsList(props) {\n  var focusedUser = props.focusedUser,\n    results = props.results,\n    _a = props.SearchResultItem,\n    SearchResultItem = _a === void 0 ? DefaultSearchResultItem : _a,\n    selectResult = props.selectResult;\n  return React.createElement(React.Fragment, null, results.map(function (result, index) {\n    return React.createElement(SearchResultItem, {\n      focusedUser: focusedUser,\n      index: index,\n      key: index,\n      result: result,\n      selectResult: selectResult\n    });\n  }));\n};\nvar DefaultSearchResultItem = function DefaultSearchResultItem(props) {\n  var _a, _b;\n  var focusedUser = props.focusedUser,\n    index = props.index,\n    result = props.result,\n    selectResult = props.selectResult;\n  var focused = focusedUser === index;\n  var themeVersion = useChatContext().themeVersion;\n  var className = clsx('str-chat__channel-search-result', focused && 'str-chat__channel-search-result--focused focused');\n  if (isChannel(result)) {\n    var channel_1 = result;\n    return themeVersion === '2' ? React.createElement(ChannelPreview, {\n      channel: channel_1,\n      className: className,\n      onSelect: function onSelect() {\n        return selectResult(channel_1);\n      }\n    }) : React.createElement(\"button\", {\n      \"aria-label\": \"Select Channel: \".concat(((_a = channel_1.data) === null || _a === void 0 ? void 0 : _a.name) || ''),\n      className: className,\n      \"data-testid\": 'channel-search-result-channel',\n      onClick: function onClick() {\n        return selectResult(channel_1);\n      },\n      role: 'option'\n    }, React.createElement(\"div\", {\n      className: 'result-hashtag'\n    }, \"#\"), React.createElement(\"p\", {\n      className: 'channel-search__result-text'\n    }, (_b = channel_1.data) === null || _b === void 0 ? void 0 : _b.name));\n  } else {\n    return React.createElement(\"button\", {\n      \"aria-label\": \"Select User Channel: \".concat(result.name || ''),\n      className: className,\n      \"data-testid\": 'channel-search-result-user',\n      onClick: function onClick() {\n        return selectResult(result);\n      },\n      role: 'option'\n    }, React.createElement(Avatar, {\n      image: result.image,\n      name: result.name || result.id,\n      size: themeVersion === '2' ? 40 : undefined,\n      user: result\n    }), React.createElement(\"div\", {\n      className: 'str-chat__channel-search-result--display-name'\n    }, result.name || result.id));\n  }\n};\nvar ResultsContainer = function ResultsContainer(_a) {\n  var children = _a.children,\n    popupResults = _a.popupResults;\n  return React.createElement(\"div\", {\n    \"aria-label\": 'Channel search results',\n    className: clsx(\"str-chat__channel-search-container str-chat__channel-search-result-list\", popupResults ? 'popup' : 'inline')\n  }, children);\n};\nexport var SearchResults = function SearchResults(props) {\n  var popupResults = props.popupResults,\n    results = props.results,\n    searching = props.searching,\n    _a = props.SearchEmpty,\n    SearchEmpty = _a === void 0 ? DefaultSearchEmpty : _a,\n    _b = props.SearchResultsHeader,\n    SearchResultsHeader = _b === void 0 ? DefaultSearchResultsHeader : _b,\n    SearchLoading = props.SearchLoading,\n    _c = props.SearchResultItem,\n    SearchResultItem = _c === void 0 ? DefaultSearchResultItem : _c,\n    _d = props.SearchResultsList,\n    SearchResultsList = _d === void 0 ? DefaultSearchResultsList : _d,\n    selectResult = props.selectResult;\n  var t = useTranslationContext('SearchResults').t;\n  var _e = useState(),\n    focusedResult = _e[0],\n    setFocusedResult = _e[1];\n  var handleKeyDown = useCallback(function (event) {\n    if (event.key === 'ArrowUp') {\n      setFocusedResult(function (prevFocused) {\n        if (prevFocused === undefined) return 0;\n        return prevFocused === 0 ? results.length - 1 : prevFocused - 1;\n      });\n    }\n    if (event.key === 'ArrowDown') {\n      setFocusedResult(function (prevFocused) {\n        if (prevFocused === undefined) return 0;\n        return prevFocused === results.length - 1 ? 0 : prevFocused + 1;\n      });\n    }\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      if (focusedResult !== undefined) {\n        selectResult(results[focusedResult]);\n        return setFocusedResult(undefined);\n      }\n    }\n  }, [focusedResult]);\n  useEffect(function () {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  if (searching) {\n    return React.createElement(ResultsContainer, {\n      popupResults: popupResults\n    }, SearchLoading ? React.createElement(SearchLoading, null) : React.createElement(\"div\", {\n      className: 'str-chat__channel-search-container-searching',\n      \"data-testid\": 'search-in-progress-indicator'\n    }, t('Searching...')));\n  }\n  if (!results.length) {\n    return React.createElement(ResultsContainer, {\n      popupResults: popupResults\n    }, React.createElement(SearchEmpty, null));\n  }\n  return React.createElement(ResultsContainer, {\n    popupResults: popupResults\n  }, React.createElement(SearchResultsHeader, {\n    results: results\n  }), React.createElement(SearchResultsList, {\n    focusedUser: focusedResult,\n    results: results,\n    SearchResultItem: SearchResultItem,\n    selectResult: selectResult\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}