{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport var ChatContext = React.createContext(undefined);\nexport var ChatProvider = function ChatProvider(_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(ChatContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useChatContext = function useChatContext(componentName) {\n  var contextValue = useContext(ChatContext);\n  if (!contextValue) {\n    console.warn(\"The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the \".concat(componentName, \" component.\"));\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withChatContext = function withChatContext(Component) {\n  var WithChatContextComponent = function WithChatContextComponent(props) {\n    var chatContext = useChatContext();\n    return React.createElement(Component, __assign({}, props, chatContext));\n  };\n  WithChatContextComponent.displayName = \"WithChatContext\".concat(getDisplayName(Component));\n  return WithChatContextComponent;\n};","map":null,"metadata":{},"sourceType":"module"}