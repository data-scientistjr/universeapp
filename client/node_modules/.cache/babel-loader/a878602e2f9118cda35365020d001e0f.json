{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport throttle from 'lodash.throttle';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useChannelSearch = function useChannelSearch(_a) {\n  var _b = _a.channelType,\n    channelType = _b === void 0 ? 'messaging' : _b,\n    _c = _a.clearSearchOnClickOutside,\n    clearSearchOnClickOutside = _c === void 0 ? true : _c,\n    _d = _a.disabled,\n    disabled = _d === void 0 ? false : _d,\n    onSearchCallback = _a.onSearch,\n    onSearchExit = _a.onSearchExit,\n    onSelectResult = _a.onSelectResult,\n    _e = _a.searchForChannels,\n    searchForChannels = _e === void 0 ? false : _e,\n    searchFunction = _a.searchFunction,\n    searchQueryParams = _a.searchQueryParams,\n    setChannels = _a.setChannels;\n  var _f = useChatContext('useChannelSearch'),\n    client = _f.client,\n    navOpen = _f.navOpen,\n    setActiveChannel = _f.setActiveChannel,\n    themeVersion = _f.themeVersion;\n  var _g = useState(false),\n    inputIsFocused = _g[0],\n    setInputIsFocused = _g[1];\n  var _h = useState(''),\n    query = _h[0],\n    setQuery = _h[1];\n  var _j = useState([]),\n    results = _j[0],\n    setResults = _j[1];\n  var _k = useState(false),\n    searching = _k[0],\n    setSearching = _k[1];\n  var inputRef = useRef(null);\n  var searchBarRef = useRef(null);\n  var clearState = useCallback(function () {\n    setQuery('');\n    setResults([]);\n    setSearching(false);\n  }, []);\n  var activateSearch = useCallback(function () {\n    setInputIsFocused(true);\n  }, []);\n  var exitSearch = useCallback(function () {\n    var _a;\n    setInputIsFocused(false);\n    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();\n    clearState();\n    onSearchExit === null || onSearchExit === void 0 ? void 0 : onSearchExit();\n  }, [clearState, onSearchExit]);\n  useEffect(function () {\n    if (disabled) return;\n    var clickListener = function clickListener(event) {\n      var _a, _b;\n      if (!(event.target instanceof HTMLElement)) return;\n      var isInputClick = themeVersion === '2' ? (_a = searchBarRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target) : (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);\n      if (isInputClick) return;\n      if (inputIsFocused && (!query || navOpen) || clearSearchOnClickOutside) {\n        exitSearch();\n      }\n    };\n    document.addEventListener('click', clickListener);\n    return function () {\n      return document.removeEventListener('click', clickListener);\n    };\n  }, [disabled, inputIsFocused, query, exitSearch, navOpen, clearSearchOnClickOutside]);\n  useEffect(function () {\n    if (!inputRef.current || disabled) return;\n    var handleKeyDown = function handleKeyDown(event) {\n      if (event.key === 'Escape') return exitSearch();\n    };\n    inputRef.current.addEventListener('keydown', handleKeyDown);\n    return function () {\n      var _a;\n      (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [disabled]);\n  var selectResult = useCallback(function (result) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var selectedChannel, newChannel;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!client.userID) return [2 /*return*/];\n            if (!onSelectResult) return [3 /*break*/, 2];\n            return [4 /*yield*/, onSelectResult({\n              setQuery: setQuery,\n              setResults: setResults,\n              setSearching: setSearching\n            }, result)];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n          case 2:\n            if (!isChannel(result)) return [3 /*break*/, 3];\n            setActiveChannel(result);\n            selectedChannel = result;\n            return [3 /*break*/, 5];\n          case 3:\n            newChannel = client.channel(channelType, {\n              members: [client.userID, result.id]\n            });\n            return [4 /*yield*/, newChannel.watch()];\n          case 4:\n            _a.sent();\n            setActiveChannel(newChannel);\n            selectedChannel = newChannel;\n            _a.label = 5;\n          case 5:\n            setChannels(function (channels) {\n              return uniqBy(__spreadArray([selectedChannel], channels, true), 'cid');\n            });\n            if (clearSearchOnClickOutside) {\n              exitSearch();\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]);\n  var getChannels = useCallback(function (text) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var userResponse, channelResponse, _a, channels, users_1, users, error_1;\n      var _b, _c, _d, _e, _f, _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            if (!text || searching) return [2 /*return*/];\n            setSearching(true);\n            _h.label = 1;\n          case 1:\n            _h.trys.push([1, 6,, 7]);\n            return [4 /*yield*/, client.queryUsers(__assign({\n              $or: [{\n                id: {\n                  $autocomplete: text\n                }\n              }, {\n                name: {\n                  $autocomplete: text\n                }\n              }],\n              id: {\n                $ne: client.userID\n              }\n            }, (_b = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _b === void 0 ? void 0 : _b.filters), __assign({\n              id: 1\n            }, (_c = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _c === void 0 ? void 0 : _c.sort), __assign({\n              limit: 8\n            }, (_d = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.userFilters) === null || _d === void 0 ? void 0 : _d.options))];\n          case 2:\n            userResponse = _h.sent();\n            if (!searchForChannels) return [3 /*break*/, 4];\n            channelResponse = client.queryChannels(__assign({\n              name: {\n                $autocomplete: text\n              }\n            }, (_e = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _e === void 0 ? void 0 : _e.filters), ((_f = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _f === void 0 ? void 0 : _f.sort) || {}, __assign({\n              limit: 5\n            }, (_g = searchQueryParams === null || searchQueryParams === void 0 ? void 0 : searchQueryParams.channelFilters) === null || _g === void 0 ? void 0 : _g.options));\n            return [4 /*yield*/, Promise.all([channelResponse, userResponse])];\n          case 3:\n            _a = _h.sent(), channels = _a[0], users_1 = _a[1].users;\n            setResults(__spreadArray(__spreadArray([], channels, true), users_1, true));\n            setSearching(false);\n            return [2 /*return*/];\n          case 4:\n            return [4 /*yield*/, Promise.resolve(userResponse)];\n          case 5:\n            users = _h.sent().users;\n            setResults(users);\n            return [3 /*break*/, 7];\n          case 6:\n            error_1 = _h.sent();\n            clearState();\n            console.error(error_1);\n            return [3 /*break*/, 7];\n          case 7:\n            setSearching(false);\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [client, searching, searchForChannels]);\n  var getChannelsThrottled = throttle(getChannels, 200);\n  var onSearch = useCallback(function (event) {\n    event.preventDefault();\n    if (disabled) return;\n    if (searchFunction) {\n      searchFunction({\n        setQuery: setQuery,\n        setResults: setResults,\n        setSearching: setSearching\n      }, event);\n    } else {\n      setQuery(event.target.value);\n      getChannelsThrottled(event.target.value);\n    }\n    onSearchCallback === null || onSearchCallback === void 0 ? void 0 : onSearchCallback(event);\n  }, [disabled, getChannelsThrottled, onSearchCallback, searchFunction]);\n  return {\n    activateSearch: activateSearch,\n    clearState: clearState,\n    exitSearch: exitSearch,\n    inputIsFocused: inputIsFocused,\n    inputRef: inputRef,\n    onSearch: onSearch,\n    query: query,\n    results: results,\n    searchBarRef: searchBarRef,\n    searching: searching,\n    selectResult: selectResult\n  };\n};","map":null,"metadata":{},"sourceType":"module"}