{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\n/* eslint-disable no-continue */\nimport React, { useMemo } from 'react';\nimport { useLastReadData } from './useLastReadData';\nimport { getLastReceived } from '../utils';\nimport { CUSTOM_MESSAGE_TYPE } from '../../../constants/messageTypes';\nimport { DateSeparator as DefaultDateSeparator } from '../../DateSeparator/DateSeparator';\nimport { EventComponent } from '../../EventComponent/EventComponent';\nimport { Message } from '../../Message';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useComponentContext } from '../../../context/ComponentContext';\nimport { isDate } from '../../../context/TranslationContext';\nexport var useMessageListElements = function useMessageListElements(props) {\n  var enrichedMessages = props.enrichedMessages,\n    internalMessageProps = props.internalMessageProps,\n    messageGroupStyles = props.messageGroupStyles,\n    read = props.read,\n    returnAllReadData = props.returnAllReadData,\n    threadList = props.threadList;\n  var _a = useChatContext('useMessageListElements'),\n    client = _a.client,\n    customClasses = _a.customClasses;\n  var _b = useComponentContext('useMessageListElements'),\n    _c = _b.DateSeparator,\n    DateSeparator = _c === void 0 ? DefaultDateSeparator : _c,\n    HeaderComponent = _b.HeaderComponent,\n    _d = _b.MessageSystem,\n    MessageSystem = _d === void 0 ? EventComponent : _d;\n  // get the readData, but only for messages submitted by the user themselves\n  var readData = useLastReadData({\n    messages: enrichedMessages,\n    read: read,\n    returnAllReadData: returnAllReadData,\n    userID: client.userID\n  });\n  var lastReceivedId = useMemo(function () {\n    return getLastReceived(enrichedMessages);\n  }, [enrichedMessages]);\n  var elements = useMemo(function () {\n    return enrichedMessages.map(function (message) {\n      if (message.customType === CUSTOM_MESSAGE_TYPE.date && message.date && isDate(message.date)) {\n        return React.createElement(\"li\", {\n          key: \"\".concat(message.date.toISOString(), \"-i\")\n        }, React.createElement(DateSeparator, {\n          date: message.date,\n          formatDate: internalMessageProps.formatDate,\n          unread: message.unread\n        }));\n      }\n      if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {\n        return React.createElement(\"li\", {\n          key: 'intro'\n        }, React.createElement(HeaderComponent, null));\n      }\n      if (message.type === 'system') {\n        return React.createElement(\"li\", {\n          key: message.id || message.created_at\n        }, React.createElement(MessageSystem, {\n          message: message\n        }));\n      }\n      var groupStyles = messageGroupStyles[message.id] || '';\n      var messageClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.message) || \"str-chat__li str-chat__li--\".concat(groupStyles);\n      return React.createElement(\"li\", {\n        className: messageClass,\n        \"data-message-id\": message.id,\n        \"data-testid\": messageClass,\n        key: message.id || message.created_at\n      }, React.createElement(Message, __assign({\n        groupStyles: [groupStyles],\n        lastReceivedId: lastReceivedId,\n        message: message,\n        readBy: readData[message.id] || [],\n        threadList: threadList\n      }, internalMessageProps)));\n    });\n  }, [enrichedMessages, internalMessageProps, lastReceivedId, messageGroupStyles, readData, threadList]);\n  return elements;\n};","map":null,"metadata":{},"sourceType":"module"}