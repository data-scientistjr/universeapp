{"ast":null,"code":"import { createContext, forwardRef, useState, useImperativeHandle, createElement, useLayoutEffect, useEffect, useCallback, useContext } from 'react';\nimport { tap, init, curry1to0, subscribe, reset, always, publish, eventHandler, curry2to1, getValue } from '@virtuoso.dev/urx';\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nvar _excluded = [\"children\"];\n/** @internal */\n\nfunction omit(keys, obj) {\n  var result = {};\n  var index = {};\n  var idx = 0;\n  var len = keys.length;\n  while (idx < len) {\n    index[keys[idx]] = 1;\n    idx += 1;\n  }\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n}\nvar useIsomorphicLayoutEffect = typeof document !== 'undefined' ? useLayoutEffect : useEffect;\n/**\r\n * Converts a system spec to React component by mapping the system streams to component properties, events and methods. Returns hooks for querying and modifying\r\n * the system streams from the component's child components.\r\n * @param systemSpec The return value from a [[system]] call.\r\n * @param map The streams to props / events / methods mapping Check [[SystemPropsMap]] for more details.\r\n * @param Root The optional React component to render. By default, the resulting component renders nothing, acting as a logical wrapper for its children.\r\n * @returns an object containing the following:\r\n *  - `Component`: the React component.\r\n *  - `useEmitterValue`: a hook that lets child components use values emitted from the specified output stream.\r\n *  - `useEmitter`: a hook that calls the provided callback whenever the specified stream emits a value.\r\n *  - `usePublisher`: a hook which lets child components publish values to the specified stream.\r\n *  <hr />\r\n */\n\nfunction systemToComponent(systemSpec, map, Root) {\n  var requiredPropNames = Object.keys(map.required || {});\n  var optionalPropNames = Object.keys(map.optional || {});\n  var methodNames = Object.keys(map.methods || {});\n  var eventNames = Object.keys(map.events || {});\n  var Context = createContext({});\n  function applyPropsToSystem(system, props) {\n    if (system['propsReady']) {\n      publish(system['propsReady'], false);\n    }\n    for (var _iterator = _createForOfIteratorHelperLoose(requiredPropNames), _step; !(_step = _iterator()).done;) {\n      var requiredPropName = _step.value;\n      var stream = system[map.required[requiredPropName]];\n      publish(stream, props[requiredPropName]);\n    }\n    for (var _iterator2 = _createForOfIteratorHelperLoose(optionalPropNames), _step2; !(_step2 = _iterator2()).done;) {\n      var optionalPropName = _step2.value;\n      if (optionalPropName in props) {\n        var _stream = system[map.optional[optionalPropName]];\n        publish(_stream, props[optionalPropName]);\n      }\n    }\n    if (system['propsReady']) {\n      publish(system['propsReady'], true);\n    }\n  }\n  function buildMethods(system) {\n    return methodNames.reduce(function (acc, methodName) {\n      acc[methodName] = function (value) {\n        var stream = system[map.methods[methodName]];\n        publish(stream, value);\n      };\n      return acc;\n    }, {});\n  }\n  function buildEventHandlers(system) {\n    return eventNames.reduce(function (handlers, eventName) {\n      handlers[eventName] = eventHandler(system[map.events[eventName]]);\n      return handlers;\n    }, {});\n  }\n  /**\r\n   * A React component generated from an urx system\r\n   */\n\n  var Component = forwardRef(function (propsWithChildren, ref) {\n    var children = propsWithChildren.children,\n      props = _objectWithoutPropertiesLoose(propsWithChildren, _excluded);\n    var _useState = useState(function () {\n        return tap(init(systemSpec), function (system) {\n          return applyPropsToSystem(system, props);\n        });\n      }),\n      system = _useState[0];\n    var _useState2 = useState(curry1to0(buildEventHandlers, system)),\n      handlers = _useState2[0];\n    useIsomorphicLayoutEffect(function () {\n      for (var _iterator3 = _createForOfIteratorHelperLoose(eventNames), _step3; !(_step3 = _iterator3()).done;) {\n        var eventName = _step3.value;\n        if (eventName in props) {\n          subscribe(handlers[eventName], props[eventName]);\n        }\n      }\n      return function () {\n        Object.values(handlers).map(reset);\n      };\n    }, [props, handlers, system]);\n    useIsomorphicLayoutEffect(function () {\n      applyPropsToSystem(system, props);\n    });\n    useImperativeHandle(ref, always(buildMethods(system)));\n    return createElement(Context.Provider, {\n      value: system\n    }, Root ? createElement(Root, omit([].concat(requiredPropNames, optionalPropNames, eventNames), props), children) : children);\n  });\n  var usePublisher = function usePublisher(key) {\n    return useCallback(curry2to1(publish, useContext(Context)[key]), [key]);\n  };\n  /**\r\n   * Returns the value emitted from the stream.\r\n   */\n\n  var useEmitterValue = function useEmitterValue(key) {\n    var context = useContext(Context);\n    var source = context[key];\n    var _useState3 = useState(curry1to0(getValue, source)),\n      value = _useState3[0],\n      setValue = _useState3[1];\n    useIsomorphicLayoutEffect(function () {\n      return subscribe(source, function (next) {\n        if (next !== value) {\n          setValue(always(next));\n        }\n      });\n    }, [source, value]);\n    return value;\n  };\n  var useEmitter = function useEmitter(key, callback) {\n    var context = useContext(Context);\n    var source = context[key];\n    useIsomorphicLayoutEffect(function () {\n      return subscribe(source, callback);\n    }, [callback, source]);\n  };\n  return {\n    Component: Component,\n    usePublisher: usePublisher,\n    useEmitterValue: useEmitterValue,\n    useEmitter: useEmitter\n  };\n}\nexport { systemToComponent };","map":null,"metadata":{},"sourceType":"module"}