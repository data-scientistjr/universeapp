{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport { useEnrichedMessages } from './hooks/useEnrichedMessages';\nimport { useMessageListElements } from './hooks/useMessageListElements';\nimport { useScrollLocationLogic } from './hooks/useScrollLocationLogic';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel } from './MessageListMainPanel';\nvar MessageListWithContext = function MessageListWithContext(props) {\n  var channel = props.channel,\n    _a = props.disableDateSeparator,\n    disableDateSeparator = _a === void 0 ? false : _a,\n    groupStyles = props.groupStyles,\n    _b = props.hideDeletedMessages,\n    hideDeletedMessages = _b === void 0 ? false : _b,\n    _c = props.hideNewMessageSeparator,\n    hideNewMessageSeparator = _c === void 0 ? false : _c,\n    internalInfiniteScrollProps = props.internalInfiniteScrollProps,\n    _d = props.messageActions,\n    messageActions = _d === void 0 ? Object.keys(MESSAGE_ACTIONS) : _d,\n    _e = props.messages,\n    messages = _e === void 0 ? [] : _e,\n    notifications = props.notifications,\n    _f = props.noGroupByUser,\n    noGroupByUser = _f === void 0 ? false : _f,\n    _g = props.pinPermissions,\n    pinPermissions = _g === void 0 ? defaultPinPermissions : _g,\n    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    _h = props.returnAllReadData,\n    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    returnAllReadData = _h === void 0 ? false : _h,\n    _j = props.threadList,\n    threadList = _j === void 0 ? false : _j,\n    _k = props.unsafeHTML,\n    unsafeHTML = _k === void 0 ? false : _k,\n    headerPosition = props.headerPosition,\n    read = props.read,\n    _l = props.messageLimit,\n    messageLimit = _l === void 0 ? 100 : _l,\n    loadMoreCallback = props.loadMore,\n    loadMoreNewerCallback = props.loadMoreNewer,\n    _m = props.hasMoreNewer,\n    hasMoreNewer = _m === void 0 ? false : _m,\n    suppressAutoscroll = props.suppressAutoscroll,\n    highlightedMessageId = props.highlightedMessageId,\n    _o = props.jumpToLatestMessage,\n    jumpToLatestMessage = _o === void 0 ? function () {\n      return Promise.resolve();\n    } : _o;\n  var _p = React.useState(null),\n    listElement = _p[0],\n    setListElement = _p[1];\n  var _q = React.useState(null),\n    ulElement = _q[0],\n    setUlElement = _q[1];\n  var customClasses = useChatContext('MessageList').customClasses;\n  var _r = useComponentContext('MessageList'),\n    _s = _r.EmptyStateIndicator,\n    EmptyStateIndicator = _s === void 0 ? DefaultEmptyStateIndicator : _s,\n    _t = _r.LoadingIndicator,\n    LoadingIndicator = _t === void 0 ? DefaultLoadingIndicator : _t,\n    _u = _r.MessageListNotifications,\n    MessageListNotifications = _u === void 0 ? DefaultMessageListNotifications : _u,\n    _v = _r.MessageNotification,\n    MessageNotification = _v === void 0 ? DefaultMessageNotification : _v,\n    _w = _r.TypingIndicator,\n    TypingIndicator = _w === void 0 ? DefaultTypingIndicator : _w;\n  var loadMoreScrollThreshold = (internalInfiniteScrollProps === null || internalInfiniteScrollProps === void 0 ? void 0 : internalInfiniteScrollProps.threshold) || 250;\n  var _x = useScrollLocationLogic({\n      hasMoreNewer: hasMoreNewer,\n      listElement: listElement,\n      loadMoreScrollThreshold: loadMoreScrollThreshold,\n      messages: messages,\n      scrolledUpThreshold: props.scrolledUpThreshold,\n      suppressAutoscroll: suppressAutoscroll\n    }),\n    hasNewMessages = _x.hasNewMessages,\n    isMessageListScrolledToBottom = _x.isMessageListScrolledToBottom,\n    onScroll = _x.onScroll,\n    scrollToBottom = _x.scrollToBottom,\n    wrapperRect = _x.wrapperRect;\n  var _y = useEnrichedMessages({\n      channel: channel,\n      disableDateSeparator: disableDateSeparator,\n      groupStyles: groupStyles,\n      headerPosition: headerPosition,\n      hideDeletedMessages: hideDeletedMessages,\n      hideNewMessageSeparator: hideNewMessageSeparator,\n      messages: messages,\n      noGroupByUser: noGroupByUser\n    }),\n    messageGroupStyles = _y.messageGroupStyles,\n    enrichedMessages = _y.messages;\n  var elements = useMessageListElements({\n    enrichedMessages: enrichedMessages,\n    internalMessageProps: {\n      additionalMessageInputProps: props.additionalMessageInputProps,\n      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n      customMessageActions: props.customMessageActions,\n      disableQuotedMessages: props.disableQuotedMessages,\n      formatDate: props.formatDate,\n      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n      getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n      getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n      Message: props.Message,\n      messageActions: messageActions,\n      messageListRect: wrapperRect,\n      onlySenderCanEdit: props.onlySenderCanEdit,\n      onMentionsClick: props.onMentionsClick,\n      onMentionsHover: props.onMentionsHover,\n      onUserClick: props.onUserClick,\n      onUserHover: props.onUserHover,\n      openThread: props.openThread,\n      pinPermissions: pinPermissions,\n      renderText: props.renderText,\n      retrySendMessage: props.retrySendMessage,\n      unsafeHTML: unsafeHTML\n    },\n    messageGroupStyles: messageGroupStyles,\n    read: read,\n    returnAllReadData: returnAllReadData,\n    threadList: threadList\n  });\n  var messageListClass = (customClasses === null || customClasses === void 0 ? void 0 : customClasses.messageList) || 'str-chat__list';\n  var threadListClass = threadList ? (customClasses === null || customClasses === void 0 ? void 0 : customClasses.threadList) || 'str-chat__list--thread str-chat__thread-list' : '';\n  var loadMore = React.useCallback(function () {\n    if (loadMoreCallback) {\n      loadMoreCallback(messageLimit);\n    }\n  }, [loadMoreCallback, messageLimit]);\n  var loadMoreNewer = React.useCallback(function () {\n    if (loadMoreNewerCallback) {\n      loadMoreNewerCallback(messageLimit);\n    }\n  }, [loadMoreNewerCallback, messageLimit]);\n  var scrollToBottomFromNotification = React.useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!hasMoreNewer) return [3 /*break*/, 2];\n            return [4 /*yield*/, jumpToLatestMessage()];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            scrollToBottom();\n            _a.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }, [scrollToBottom, hasMoreNewer]);\n  React.useLayoutEffect(function () {\n    if (highlightedMessageId) {\n      var element = ulElement === null || ulElement === void 0 ? void 0 : ulElement.querySelector(\"[data-message-id='\".concat(highlightedMessageId, \"']\"));\n      element === null || element === void 0 ? void 0 : element.scrollIntoView({\n        block: 'center'\n      });\n    }\n  }, [highlightedMessageId]);\n  var showEmptyStateIndicator = elements.length === 0 && !threadList;\n  return React.createElement(React.Fragment, null, React.createElement(MessageListMainPanel, null, React.createElement(\"div\", {\n    className: \"\".concat(messageListClass, \" \").concat(threadListClass),\n    onScroll: onScroll,\n    ref: setListElement,\n    tabIndex: 0\n  }, showEmptyStateIndicator ? React.createElement(EmptyStateIndicator, {\n    key: 'empty-state-indicator',\n    listType: threadList ? 'thread' : 'message'\n  }) : React.createElement(InfiniteScroll, __assign({\n    className: 'str-chat__reverse-infinite-scroll  str-chat__message-list-scroll',\n    \"data-testid\": 'reverse-infinite-scroll',\n    hasNextPage: props.hasMoreNewer,\n    hasPreviousPage: props.hasMore,\n    head: props.head,\n    isLoading: props.loadingMore,\n    loader: React.createElement(\"div\", {\n      className: 'str-chat__list__loading',\n      key: 'loading-indicator'\n    }, props.loadingMore && React.createElement(LoadingIndicator, {\n      size: 20\n    })),\n    loadNextPage: loadMoreNewer,\n    loadPreviousPage: loadMore\n  }, props.internalInfiniteScrollProps, {\n    threshold: loadMoreScrollThreshold\n  }), React.createElement(\"ul\", {\n    className: 'str-chat__ul',\n    ref: setUlElement\n  }, elements), React.createElement(TypingIndicator, {\n    threadList: threadList\n  }), React.createElement(\"div\", {\n    key: 'bottom'\n  })))), React.createElement(MessageListNotifications, {\n    hasNewMessages: hasNewMessages,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet: hasMoreNewer,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottomFromNotification,\n    threadList: threadList\n  }));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport var MessageList = function MessageList(props) {\n  var _a = useChannelActionContext('MessageList'),\n    jumpToLatestMessage = _a.jumpToLatestMessage,\n    loadMore = _a.loadMore,\n    loadMoreNewer = _a.loadMoreNewer;\n  var _b = useChannelStateContext('MessageList'),\n    membersPropToNotPass = _b.members,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutesPropToNotPass = _b.mutes,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchersPropToNotPass = _b.watchers,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    restChannelStateContext = __rest(_b, [\"members\", \"mutes\", \"watchers\"]);\n  return React.createElement(MessageListWithContext, __assign({\n    jumpToLatestMessage: jumpToLatestMessage,\n    loadMore: loadMore,\n    loadMoreNewer: loadMoreNewer\n  }, restChannelStateContext, props));\n};","map":null,"metadata":{},"sourceType":"module"}