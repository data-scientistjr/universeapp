{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/ebubechi/Desktop/UniVerse/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar XmlNode = require('./XmlNode');\n\n/**\nElement in an XML document.\n\n@public\n*/\nvar XmlElement = /*#__PURE__*/function (_XmlNode) {\n  _inherits(XmlElement, _XmlNode);\n  /**\n  @param {string} name\n  @param {{[attrName: string]: string}} [attributes]\n  @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]\n  */\n  function XmlElement(name) {\n    var _this;\n    var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.create(null);\n    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    _classCallCheck(this, XmlElement);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(XmlElement).call(this));\n\n    /**\n    Name of this element.\n     @type {string}\n    @public\n    */\n    _this.name = name;\n\n    /**\n    Attributes on this element.\n     @type {{[attrName: string]: string}}\n    @public\n    */\n    _this.attributes = attributes;\n\n    /**\n    Child nodes of this element.\n     @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}\n    @public\n    */\n    _this.children = children;\n    return _this;\n  }\n\n  /**\n  Whether this node is empty (meaning it has no children).\n   @type {boolean}\n  @public\n  */\n  _createClass(XmlElement, [{\n    key: \"toJSON\",\n    /** @returns {{[key: string]: any}} */value: function toJSON() {\n      return Object.assign(XmlNode.prototype.toJSON.call(this), {\n        name: this.name,\n        attributes: this.attributes,\n        children: this.children.map(function (child) {\n          return child.toJSON();\n        })\n      });\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.children.length === 0;\n    } /** @type {boolean} */\n  }, {\n    key: \"preserveWhitespace\",\n    get: function get() {\n      /** @type {XmlNode?} */\n      var node = this;\n      while (node instanceof XmlElement) {\n        if ('xml:space' in node.attributes) {\n          return node.attributes['xml:space'] === 'preserve';\n        }\n        node = node.parent;\n      }\n      return false;\n    }\n    /**\n    Text content of this element and all its descendants.\n     @type {string}\n    @public\n    */\n  }, {\n    key: \"text\",\n    get: function get() {\n      return this.children.map(function (child) {\n        return 'text' in child ? child.text : '';\n      }).join('');\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return XmlNode.TYPE_ELEMENT;\n    }\n  }]);\n  return XmlElement;\n}(XmlNode);\nmodule.exports = XmlElement;\n\n/** @typedef {import('./XmlCdata')} XmlCdata */\n/** @typedef {import('./XmlComment')} XmlComment */\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\n/** @typedef {import('./XmlText')} XmlText */","map":null,"metadata":{},"sourceType":"script"}