{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React from 'react';\nimport { iconMap } from './iconMap';\nexport function mimeTypeToIcon(type, version, mimeType) {\n  var _a;\n  if (type === void 0) {\n    type = 'standard';\n  }\n  if (version === void 0) {\n    version = '1';\n  }\n  var theMap = ((_a = iconMap[version]) === null || _a === void 0 ? void 0 : _a[type]) || iconMap[version]['standard'];\n  if (!mimeType) return theMap.fallback;\n  var icon = theMap[mimeType];\n  if (icon) return icon;\n  if (mimeType.startsWith('audio/')) return theMap['audio/'];\n  if (mimeType.startsWith('video/')) return theMap['video/'];\n  if (mimeType.startsWith('image/')) return theMap['image/'];\n  if (mimeType.startsWith('text/')) return theMap['text/'];\n  return theMap.fallback;\n}\nexport var FileIcon = function FileIcon(props) {\n  var _a = props.big,\n    big = _a === void 0 ? false : _a,\n    mimeType = props.mimeType,\n    _b = props.size,\n    size = _b === void 0 ? 50 : _b,\n    _c = props.sizeSmall,\n    sizeSmall = _c === void 0 ? 20 : _c,\n    _d = props.type,\n    type = _d === void 0 ? 'standard' : _d,\n    _e = props.version,\n    version = _e === void 0 ? '1' : _e,\n    rest = __rest(props, [\"big\", \"mimeType\", \"size\", \"sizeSmall\", \"type\", \"version\"]);\n  var Icon = mimeTypeToIcon(type, version, mimeType);\n  return React.createElement(Icon, __assign({}, rest, {\n    size: big ? size : sizeSmall\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}