{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from 'react';\nimport clsx from 'clsx';\nimport ReactPlayer from 'react-player';\nimport { PlayButton, ProgressBar } from './Audio';\nimport { ImageComponent } from '../Gallery';\nimport { SafeAnchor } from '../SafeAnchor';\nimport { useAudioController } from './hooks/useAudioController';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar getHostFromURL = function getHostFromURL(url) {\n  if (url !== undefined && url !== null) {\n    var trimmedUrl = url.replace(/^(?:https?:\\/\\/)?(?:www\\.)?/i, '').split('/')[0];\n    return trimmedUrl;\n  }\n  return null;\n};\nvar UnableToRenderCard = function UnableToRenderCard(_a) {\n  var _b;\n  var type = _a.type;\n  var t = useTranslationContext('Card').t;\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__message-attachment-card', (_b = {}, _b[\"str-chat__message-attachment-card--\".concat(type)] = type, _b))\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--content'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--text'\n  }, t('this content could not be displayed'))));\n};\nvar CardV1 = function CardV1(props) {\n  var asset_url = props.asset_url,\n    giphy = props.giphy,\n    image_url = props.image_url,\n    og_scrape_url = props.og_scrape_url,\n    text = props.text,\n    thumb_url = props.thumb_url,\n    title = props.title,\n    title_link = props.title_link,\n    type = props.type;\n  var giphyVersionName = useChannelStateContext('Card').giphyVersion;\n  var image = thumb_url || image_url;\n  var dimensions = {};\n  if (type === 'giphy' && typeof giphy !== 'undefined') {\n    var giphyVersion = giphy[giphyVersionName];\n    image = giphyVersion.url;\n    dimensions.height = giphyVersion.height;\n    dimensions.width = giphyVersion.width;\n  }\n  if (!title && !title_link && !asset_url && !image) {\n    return React.createElement(UnableToRenderCard, {\n      type: type\n    });\n  }\n  if (!title_link && !og_scrape_url) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    className: \"str-chat__message-attachment-card str-chat__message-attachment-card--\".concat(type)\n  }, React.createElement(CardHeader, __assign({}, props, {\n    dimensions: dimensions,\n    image: image\n  })), type !== 'video' && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--content'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--flex'\n  }, title && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--title'\n  }, title), text && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--text'\n  }, text), (title_link || og_scrape_url) && React.createElement(SafeAnchor, {\n    className: 'str-chat__message-attachment-card--url',\n    href: title_link || og_scrape_url,\n    rel: 'noopener noreferrer',\n    target: '_blank'\n  }, getHostFromURL(title_link || og_scrape_url)))));\n};\nvar SourceLink = function SourceLink(_a) {\n  var author_name = _a.author_name,\n    url = _a.url;\n  return React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--source-link',\n    \"data-testid\": 'card-source-link'\n  }, React.createElement(SafeAnchor, {\n    className: 'str-chat__message-attachment-card--url',\n    href: url,\n    rel: 'noopener noreferrer',\n    target: '_blank'\n  }, author_name || getHostFromURL(url)));\n};\nvar CardHeader = function CardHeader(props) {\n  var asset_url = props.asset_url,\n    dimensions = props.dimensions,\n    image = props.image,\n    image_url = props.image_url,\n    thumb_url = props.thumb_url,\n    title = props.title,\n    type = props.type;\n  var visual = null;\n  if (asset_url && type === 'video') {\n    visual = React.createElement(ReactPlayer, {\n      className: 'react-player',\n      controls: true,\n      height: '100%',\n      url: asset_url,\n      width: '100%'\n    });\n  } else if (image) {\n    visual = React.createElement(ImageComponent, {\n      dimensions: dimensions,\n      fallback: title || image,\n      image_url: image_url,\n      thumb_url: thumb_url\n    });\n  }\n  return visual ? React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--header str-chat__message-attachment-card-react--header',\n    \"data-testid\": 'card-header'\n  }, visual) : null;\n};\nvar CardContent = function CardContent(props) {\n  var author_name = props.author_name,\n    og_scrape_url = props.og_scrape_url,\n    text = props.text,\n    title = props.title,\n    title_link = props.title_link,\n    type = props.type;\n  var url = title_link || og_scrape_url;\n  return React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--content'\n  }, type === 'audio' ? React.createElement(CardAudio, {\n    og: props\n  }) : React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--flex'\n  }, url && React.createElement(SourceLink, {\n    author_name: author_name,\n    url: url\n  }), title && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--title'\n  }, title), text && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card--text'\n  }, text)));\n};\nvar CardV2 = function CardV2(props) {\n  var asset_url = props.asset_url,\n    giphy = props.giphy,\n    image_url = props.image_url,\n    thumb_url = props.thumb_url,\n    title = props.title,\n    title_link = props.title_link,\n    type = props.type;\n  var giphyVersionName = useChannelStateContext('CardHeader').giphyVersion;\n  var image = thumb_url || image_url;\n  var dimensions = {};\n  if (type === 'giphy' && typeof giphy !== 'undefined') {\n    var giphyVersion = giphy[giphyVersionName];\n    image = giphyVersion.url;\n    dimensions.height = giphyVersion.height;\n    dimensions.width = giphyVersion.width;\n  }\n  if (!title && !title_link && !asset_url && !image) {\n    return React.createElement(UnableToRenderCard, null);\n  }\n  return React.createElement(\"div\", {\n    className: \"str-chat__message-attachment-card str-chat__message-attachment-card--\".concat(type)\n  }, React.createElement(CardHeader, __assign({}, props, {\n    dimensions: dimensions,\n    image: image\n  })), React.createElement(CardContent, __assign({}, props)));\n};\nexport var CardAudio = function CardAudio(_a) {\n  var _b = _a.og,\n    asset_url = _b.asset_url,\n    author_name = _b.author_name,\n    og_scrape_url = _b.og_scrape_url,\n    text = _b.text,\n    title = _b.title,\n    title_link = _b.title_link;\n  var _c = useAudioController(),\n    audioRef = _c.audioRef,\n    isPlaying = _c.isPlaying,\n    progress = _c.progress,\n    seek = _c.seek,\n    togglePlay = _c.togglePlay;\n  var url = title_link || og_scrape_url;\n  var dataTestId = 'card-audio-widget';\n  var rootClassName = 'str-chat__message-attachment-card-audio-widget';\n  return React.createElement(\"div\", {\n    className: rootClassName,\n    \"data-testid\": dataTestId\n  }, asset_url && React.createElement(React.Fragment, null, React.createElement(\"audio\", {\n    ref: audioRef\n  }, React.createElement(\"source\", {\n    \"data-testid\": 'audio-source',\n    src: asset_url,\n    type: 'audio/mp3'\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-card-audio-widget--first-row'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-audio-widget--play-controls'\n  }, React.createElement(PlayButton, {\n    isPlaying: isPlaying,\n    onClick: togglePlay\n  })), React.createElement(ProgressBar, {\n    onClick: seek,\n    progress: progress\n  }))), React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-audio-widget--second-row'\n  }, url && React.createElement(SourceLink, {\n    author_name: author_name,\n    url: url\n  }), title && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-audio-widget--title'\n  }, title), text && React.createElement(\"div\", {\n    className: 'str-chat__message-attachment-audio-widget--description'\n  }, text)));\n};\nvar UnMemoizedCard = function UnMemoizedCard(props) {\n  var themeVersion = useChatContext('Card').themeVersion;\n  return themeVersion === '2' ? React.createElement(CardV2, __assign({}, props)) : React.createElement(CardV1, __assign({}, props));\n};\n/**\n * Simple Card Layout for displaying links\n */\nexport var Card = React.memo(UnMemoizedCard);","map":null,"metadata":{},"sourceType":"module"}