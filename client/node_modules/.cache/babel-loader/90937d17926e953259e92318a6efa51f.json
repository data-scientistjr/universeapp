{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { useChannelPreviewInfo } from './hooks/useChannelPreviewInfo';\nimport { getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function ChannelPreview(props) {\n  var channel = props.channel,\n    _a = props.Preview,\n    Preview = _a === void 0 ? ChannelPreviewMessenger : _a,\n    channelUpdateCount = props.channelUpdateCount;\n  var _b = useChatContext('ChannelPreview'),\n    activeChannel = _b.channel,\n    client = _b.client,\n    setActiveChannel = _b.setActiveChannel;\n  var _c = useTranslationContext('ChannelPreview'),\n    t = _c.t,\n    userLanguage = _c.userLanguage;\n  var _d = useChannelPreviewInfo({\n      channel: channel\n    }),\n    displayImage = _d.displayImage,\n    displayTitle = _d.displayTitle;\n  var _e = useState(channel.state.messages[channel.state.messages.length - 1]),\n    lastMessage = _e[0],\n    setLastMessage = _e[1];\n  var _f = useState(0),\n    unread = _f[0],\n    setUnread = _f[1];\n  var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n  var muted = useIsChannelMuted(channel).muted;\n  useEffect(function () {\n    var handleEvent = function handleEvent(event) {\n      if (!event.cid) return setUnread(0);\n      if (channel.cid === event.cid) setUnread(0);\n    };\n    client.on('notification.mark_read', handleEvent);\n    return function () {\n      return client.off('notification.mark_read', handleEvent);\n    };\n  }, []);\n  var refreshUnreadCount = useCallback(function () {\n    if (isActive || muted) {\n      setUnread(0);\n    } else {\n      setUnread(channel.countUnread());\n    }\n  }, [channel, isActive, muted]);\n  useEffect(function () {\n    refreshUnreadCount();\n    var handleEvent = function handleEvent(event) {\n      if (event.message) setLastMessage(event.message);\n      refreshUnreadCount();\n    };\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n    return function () {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, [refreshUnreadCount, channelUpdateCount]);\n  if (!Preview) return null;\n  var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n  return React.createElement(Preview, __assign({}, props, {\n    active: isActive,\n    displayImage: displayImage,\n    displayTitle: displayTitle,\n    lastMessage: lastMessage,\n    latestMessage: latestMessage,\n    setActiveChannel: setActiveChannel,\n    unread: unread\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}