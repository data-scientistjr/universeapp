{"ast":null,"code":"import * as linkify from 'linkifyjs';\nexport var getImageAttachmentConfiguration = function getImageAttachmentConfiguration(attachment, element) {\n  var newUrl = undefined;\n  var urlToTest = attachment.image_url || attachment.thumb_url || '';\n  if (linkify.test(urlToTest, 'url')) {\n    var url = new URL(urlToTest);\n    var resizeDimensions = getSizingRestrictions(url, element);\n    if (resizeDimensions) {\n      // Apply 2x for retina displays\n      resizeDimensions.height *= 2;\n      resizeDimensions.width *= 2;\n      addResizingParamsToUrl(resizeDimensions, url);\n    }\n    newUrl = url.href;\n  }\n  return {\n    url: newUrl || ''\n  };\n};\nexport var getVideoAttachmentConfiguration = function getVideoAttachmentConfiguration(attachment, element, shouldGenerateVideoThumbnail) {\n  var thumbUrl = undefined;\n  if (attachment.thumb_url && shouldGenerateVideoThumbnail && linkify.test(attachment.thumb_url, 'url')) {\n    var url = new URL(attachment.thumb_url);\n    var resizeDimensions = getSizingRestrictions(url, element);\n    if (resizeDimensions) {\n      // Apply 2x for retina displays\n      resizeDimensions.height *= 2;\n      resizeDimensions.width *= 2;\n      addResizingParamsToUrl(resizeDimensions, url);\n    }\n    thumbUrl = url.href;\n  }\n  return {\n    thumbUrl: thumbUrl,\n    url: attachment.asset_url || ''\n  };\n};\nvar getSizingRestrictions = function getSizingRestrictions(url, htmlElement) {\n  var urlParams = url.searchParams;\n  var originalHeight = Number(urlParams.get('oh')) || 1;\n  var originalWidth = Number(urlParams.get('ow')) || 1;\n  var cssSizeRestriction = getCSSSizeRestrictions(htmlElement);\n  var resizeDimensions;\n  if ((cssSizeRestriction.maxHeight || cssSizeRestriction.height) && cssSizeRestriction.maxWidth) {\n    resizeDimensions = getResizeDimensions(originalHeight, originalWidth, /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n    cssSizeRestriction.maxHeight || cssSizeRestriction.height, cssSizeRestriction.maxWidth);\n  } else {\n    resizeDimensions = undefined;\n  }\n  return resizeDimensions;\n};\nvar getResizeDimensions = function getResizeDimensions(originalHeight, originalWidth, maxHeight, maxWidth) {\n  return {\n    height: Math.round(Math.max(maxHeight, maxWidth / originalWidth * originalHeight)),\n    width: Math.round(Math.max(maxHeight, maxWidth / originalHeight * originalWidth))\n  };\n};\nvar getCSSSizeRestrictions = function getCSSSizeRestrictions(htmlElement) {\n  var computedStylesheet = getComputedStyle(htmlElement);\n  var height = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('height'));\n  var maxHeight = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('max-height'));\n  var maxWidth = getValueRepresentationOfCSSProperty(computedStylesheet.getPropertyValue('max-width'));\n  if (!((height || maxHeight) && maxWidth)) {\n    console.warn(\"Invalid value set for height/max-height and/or max-width for HTML element, this can cause scrolling issues inside the message list, more info https://getstream.io/chat/docs/sdk/react/message-components/attachment/#image-and-video-sizing\");\n  }\n  return {\n    height: height,\n    maxHeight: maxHeight,\n    maxWidth: maxWidth\n  };\n};\nvar getValueRepresentationOfCSSProperty = function getValueRepresentationOfCSSProperty(property) {\n  if (!property.endsWith('px')) {\n    return undefined;\n  }\n  var number = parseFloat(property);\n  return isNaN(number) ? undefined : number;\n};\nvar addResizingParamsToUrl = function addResizingParamsToUrl(resizeDimensions, url) {\n  url.searchParams.set('h', resizeDimensions.height.toString());\n  url.searchParams.set('w', resizeDimensions.width.toString());\n};","map":null,"metadata":{},"sourceType":"module"}