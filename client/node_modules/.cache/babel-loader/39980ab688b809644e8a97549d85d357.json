{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @typedef {import('./infer.js').Align} Align\n */\n\nvar alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n};\n\n// To do: next major: expose functions.\n// To do: next major: use `infer` here, when all events are exposed.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions` to support\n * GFM tables when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport var gfmTableHtml = {\n  enter: {\n    table: function table(token) {\n      var tableAlign = token._align;\n      this.lineEndingIfNeeded();\n      this.tag('<table>');\n      this.setData('tableAlign', tableAlign);\n    },\n    tableBody: function tableBody() {\n      this.tag('<tbody>');\n    },\n    tableData: function tableData() {\n      var tableAlign = this.getData('tableAlign');\n      var tableColumn = this.getData('tableColumn');\n      var align = alignment[tableAlign[tableColumn]];\n      if (align === undefined) {\n        // Capture results to ignore them.\n        this.buffer();\n      } else {\n        this.lineEndingIfNeeded();\n        this.tag('<td' + align + '>');\n      }\n    },\n    tableHead: function tableHead() {\n      this.lineEndingIfNeeded();\n      this.tag('<thead>');\n    },\n    tableHeader: function tableHeader() {\n      var tableAlign = this.getData('tableAlign');\n      var tableColumn = this.getData('tableColumn');\n      var align = alignment[tableAlign[tableColumn]];\n      this.lineEndingIfNeeded();\n      this.tag('<th' + align + '>');\n    },\n    tableRow: function tableRow() {\n      this.setData('tableColumn', 0);\n      this.lineEndingIfNeeded();\n      this.tag('<tr>');\n    }\n  },\n  exit: {\n    // Overwrite the default code text data handler to unescape escaped pipes when\n    // they are in tables.\n    codeTextData: function codeTextData(token) {\n      var value = this.sliceSerialize(token);\n      if (this.getData('tableAlign')) {\n        value = value.replace(/\\\\([\\\\|])/g, replace);\n      }\n      this.raw(this.encode(value));\n    },\n    table: function table() {\n      this.setData('tableAlign');\n      // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n      // but we do need to reset it to match a funky newline GH generates for\n      // list items combined with tables.\n      this.setData('slurpAllLineEndings');\n      this.lineEndingIfNeeded();\n      this.tag('</table>');\n    },\n    tableBody: function tableBody() {\n      this.lineEndingIfNeeded();\n      this.tag('</tbody>');\n    },\n    tableData: function tableData() {\n      var tableAlign = this.getData('tableAlign');\n      var tableColumn = this.getData('tableColumn');\n      if (tableColumn in tableAlign) {\n        this.tag('</td>');\n        this.setData('tableColumn', tableColumn + 1);\n      } else {\n        // Stop capturing.\n        this.resume();\n      }\n    },\n    tableHead: function tableHead() {\n      this.lineEndingIfNeeded();\n      this.tag('</thead>');\n    },\n    tableHeader: function tableHeader() {\n      var tableColumn = this.getData('tableColumn');\n      this.tag('</th>');\n      this.setData('tableColumn', tableColumn + 1);\n    },\n    tableRow: function tableRow() {\n      var tableAlign = this.getData('tableAlign');\n      var tableColumn = this.getData('tableColumn');\n      while (tableColumn < tableAlign.length) {\n        this.lineEndingIfNeeded();\n        this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');\n        tableColumn++;\n      }\n      this.setData('tableColumn', tableColumn);\n      this.lineEndingIfNeeded();\n      this.tag('</tr>');\n    }\n  }\n};\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","map":null,"metadata":{},"sourceType":"module"}