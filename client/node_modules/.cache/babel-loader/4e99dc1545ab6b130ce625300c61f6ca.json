{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { MenuIcon as DefaultMenuIcon, SearchIcon as DefaultSearchInputIcon, ReturnIcon, XIcon } from './icons';\nimport { SearchInput as DefaultSearchInput } from './SearchInput';\nvar SearchBarButton = function SearchBarButton(_a) {\n  var children = _a.children,\n    className = _a.className,\n    onClick = _a.onClick;\n  return React.createElement(\"button\", {\n    className: clsx('str-chat__channel-search-bar-button', className),\n    \"data-testid\": 'search-bar-button',\n    onClick: onClick\n  }, children);\n};\n// todo: add context menu control logic\nexport var SearchBar = function SearchBar(props) {\n  var activateSearch = props.activateSearch,\n    AppMenu = props.AppMenu,\n    _a = props.ClearInputIcon,\n    ClearInputIcon = _a === void 0 ? XIcon : _a,\n    exitSearch = props.exitSearch,\n    _b = props.ExitSearchIcon,\n    ExitSearchIcon = _b === void 0 ? ReturnIcon : _b,\n    inputIsFocused = props.inputIsFocused,\n    _c = props.MenuIcon,\n    MenuIcon = _c === void 0 ? DefaultMenuIcon : _c,\n    searchBarRef = props.searchBarRef,\n    _d = props.SearchInput,\n    SearchInput = _d === void 0 ? DefaultSearchInput : _d,\n    _e = props.SearchInputIcon,\n    SearchInputIcon = _e === void 0 ? DefaultSearchInputIcon : _e,\n    inputProps = __rest(props, [\"activateSearch\", \"AppMenu\", \"ClearInputIcon\", \"exitSearch\", \"ExitSearchIcon\", \"inputIsFocused\", \"MenuIcon\", \"searchBarRef\", \"SearchInput\", \"SearchInputIcon\"]);\n  var _f = useState(false),\n    menuIsOpen = _f[0],\n    setMenuIsOpen = _f[1];\n  var appMenuRef = useRef(null);\n  useEffect(function () {\n    if (!appMenuRef.current) return;\n    var handleKeyDown = function handleKeyDown(event) {\n      if (menuIsOpen && event.key === 'Escape') {\n        setMenuIsOpen(false);\n      }\n    };\n    var clickListener = function clickListener(e) {\n      var _a;\n      if (!(e.target instanceof HTMLElement) || !menuIsOpen || ((_a = appMenuRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) return;\n      setMenuIsOpen(false);\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('click', clickListener);\n    return function () {\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('click', clickListener);\n    };\n  }, [menuIsOpen]);\n  useEffect(function () {\n    if (!props.inputRef.current) return;\n    var handleFocus = function handleFocus() {\n      activateSearch();\n    };\n    var handleBlur = function handleBlur(e) {\n      e.stopPropagation(); // handle blur/focus state with React state\n    };\n\n    props.inputRef.current.addEventListener('focus', handleFocus);\n    props.inputRef.current.addEventListener('blur', handleBlur);\n    return function () {\n      var _a, _b;\n      (_a = props.inputRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('focus', handleFocus);\n      (_b = props.inputRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener('blur', handleBlur);\n    };\n  }, []);\n  var handleClearClick = useCallback(function () {\n    var _a;\n    exitSearch();\n    (_a = inputProps.inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, []);\n  var closeAppMenu = useCallback(function () {\n    return setMenuIsOpen(false);\n  }, []);\n  return React.createElement(\"div\", {\n    className: 'str-chat__channel-search-bar',\n    \"data-testid\": 'search-bar',\n    ref: searchBarRef\n  }, inputIsFocused ? React.createElement(SearchBarButton, {\n    className: 'str-chat__channel-search-bar-button--exit-search',\n    onClick: exitSearch\n  }, React.createElement(ExitSearchIcon, null)) : AppMenu ? React.createElement(SearchBarButton, {\n    className: 'str-chat__channel-search-bar-button--menu',\n    onClick: function onClick() {\n      return setMenuIsOpen(function (prev) {\n        return !prev;\n      });\n    }\n  }, React.createElement(MenuIcon, null)) : null, React.createElement(\"div\", {\n    className: clsx('str-chat__channel-search-input--wrapper', inputProps.query && 'str-chat__channel-search-input--wrapper-active')\n  }, React.createElement(\"div\", {\n    className: 'str-chat__channel-search-input--icon'\n  }, React.createElement(SearchInputIcon, null)), React.createElement(SearchInput, __assign({}, inputProps)), React.createElement(\"button\", {\n    className: 'str-chat__channel-search-input--clear-button',\n    \"data-testid\": 'clear-input-button',\n    disabled: !inputProps.query,\n    onClick: handleClearClick\n  }, React.createElement(ClearInputIcon, null))), menuIsOpen && AppMenu && React.createElement(\"div\", {\n    ref: appMenuRef\n  }, React.createElement(AppMenu, {\n    close: closeAppMenu\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}