{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { escapeRegExp } from '../../utils';\nimport { Item } from './Item';\nimport { DefaultSuggestionListHeader } from './Header';\nexport var List = function List(_a) {\n  var className = _a.className,\n    component = _a.component,\n    currentTrigger = _a.currentTrigger,\n    dropdownScroll = _a.dropdownScroll,\n    getSelectedItem = _a.getSelectedItem,\n    getTextToReplace = _a.getTextToReplace,\n    PropHeader = _a.Header,\n    itemClassName = _a.itemClassName,\n    itemStyle = _a.itemStyle,\n    onSelect = _a.onSelect,\n    selectionEnd = _a.selectionEnd,\n    style = _a.style,\n    PropSuggestionItem = _a.SuggestionItem,\n    propValue = _a.value,\n    values = _a.values;\n  var _b = useComponentContext('SuggestionList'),\n    AutocompleteSuggestionHeader = _b.AutocompleteSuggestionHeader,\n    AutocompleteSuggestionItem = _b.AutocompleteSuggestionItem;\n  var themeVersion = useChatContext('SuggestionList').themeVersion;\n  var SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;\n  var SuggestionHeader = PropHeader || AutocompleteSuggestionHeader || DefaultSuggestionListHeader;\n  var _c = useState(undefined),\n    selectedItem = _c[0],\n    setSelectedItem = _c[1];\n  var itemsRef = [];\n  var isSelected = function isSelected(item) {\n    return selectedItem === values.findIndex(function (value) {\n      return getId(value) === getId(item);\n    });\n  };\n  var getId = function getId(item) {\n    var textToReplace = getTextToReplace(item);\n    if (textToReplace.key) {\n      return textToReplace.key;\n    }\n    if (typeof item === 'string' || !item.key) {\n      return textToReplace.text;\n    }\n    return item.key;\n  };\n  var modifyText = function modifyText(value) {\n    if (!value) return;\n    onSelect(getTextToReplace(value));\n    if (getSelectedItem) getSelectedItem(value);\n  };\n  var handleClick = function handleClick(e) {\n    e === null || e === void 0 ? void 0 : e.preventDefault();\n    modifyText(values[selectedItem]);\n  };\n  var selectItem = useCallback(function (item) {\n    var index = values.findIndex(function (value) {\n      return value.id ? value.id === item.id : value.name === item.name;\n    });\n    setSelectedItem(index);\n  }, [values]);\n  var handleKeyDown = useCallback(function (event) {\n    if (event.key === 'ArrowUp') {\n      setSelectedItem(function (prevSelected) {\n        if (prevSelected === undefined) return 0;\n        var newID = prevSelected === 0 ? values.length - 1 : prevSelected - 1;\n        dropdownScroll(itemsRef[newID]);\n        return newID;\n      });\n    }\n    if (event.key === 'ArrowDown') {\n      setSelectedItem(function (prevSelected) {\n        if (prevSelected === undefined) return 0;\n        var newID = prevSelected === values.length - 1 ? 0 : prevSelected + 1;\n        dropdownScroll(itemsRef[newID]);\n        return newID;\n      });\n    }\n    if ((event.key === 'Enter' || event.key === 'Tab') && selectedItem !== undefined) {\n      handleClick(event);\n    }\n    return null;\n  }, [selectedItem, values]);\n  useEffect(function () {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return function () {\n      return document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [handleKeyDown]);\n  useEffect(function () {\n    if (values === null || values === void 0 ? void 0 : values.length) selectItem(values[0]);\n  }, [values]); // eslint-disable-line\n  var restructureItem = useCallback(function (item) {\n    var matched = item.name || item.id;\n    var textBeforeCursor = propValue.slice(0, selectionEnd);\n    var triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);\n    var editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));\n    var parts = matched.split(new RegExp(\"(\".concat(editedPropValue, \")\"), 'gi'));\n    var itemNameParts = {\n      match: editedPropValue,\n      parts: parts\n    };\n    return __assign(__assign({}, item), {\n      itemNameParts: itemNameParts\n    });\n  }, [propValue, selectionEnd, currentTrigger]);\n  var restructuredValues = useMemo(function () {\n    return values.map(restructureItem);\n  }, [values, restructureItem]);\n  return React.createElement(\"ul\", {\n    className: clsx('rta__list', className),\n    style: style\n  }, themeVersion === '1' && React.createElement(\"li\", {\n    className: 'rta__list-header'\n  }, React.createElement(SuggestionHeader, {\n    currentTrigger: currentTrigger,\n    value: propValue\n  })), restructuredValues.map(function (item, i) {\n    return React.createElement(SuggestionItem, {\n      className: itemClassName,\n      component: component,\n      item: item,\n      key: getId(item),\n      onClickHandler: handleClick,\n      onSelectHandler: selectItem,\n      ref: function ref(_ref) {\n        itemsRef[i] = _ref;\n      },\n      selected: isSelected(item),\n      style: itemStyle,\n      value: propValue\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}