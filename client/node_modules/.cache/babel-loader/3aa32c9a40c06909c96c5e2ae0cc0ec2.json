{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { isDate, useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString } from '../../i18n/utils';\nexport var defaultTimestampFormat = 'h:mmA';\nvar UnMemoizedMessageTimestamp = function UnMemoizedMessageTimestamp(props) {\n  var _a = props.calendar,\n    calendar = _a === void 0 ? false : _a,\n    _b = props.customClass,\n    customClass = _b === void 0 ? '' : _b,\n    _c = props.format,\n    format = _c === void 0 ? defaultTimestampFormat : _c,\n    propMessage = props.message;\n  var _d = useMessageContext('MessageTimestamp'),\n    formatDate = _d.formatDate,\n    contextMessage = _d.message;\n  var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;\n  var message = propMessage || contextMessage;\n  var messageCreatedAt = message.created_at && isDate(message.created_at) ? message.created_at.toISOString() : message.created_at;\n  var when = useMemo(function () {\n    return getDateString({\n      calendar: calendar,\n      format: format,\n      formatDate: formatDate,\n      messageCreatedAt: messageCreatedAt,\n      tDateTimeParser: tDateTimeParser\n    });\n  }, [formatDate, calendar, tDateTimeParser, format, messageCreatedAt]);\n  if (!when) return null;\n  return React.createElement(\"time\", {\n    className: customClass,\n    dateTime: messageCreatedAt,\n    title: messageCreatedAt\n  }, when);\n};\nexport var MessageTimestamp = React.memo(UnMemoizedMessageTimestamp);","map":null,"metadata":{},"sourceType":"module"}