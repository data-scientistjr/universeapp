{"ast":null,"code":"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { DeliveredCheckIcon, MessageDeliveredIcon } from './icons';\nimport { getReadByTooltipText, mapToUserNameOrId } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { PopperTooltip, Tooltip } from '../Tooltip';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedMessageStatus = function UnMemoizedMessageStatus(props) {\n  var _a;\n  var propAvatar = props.Avatar,\n    _b = props.messageType,\n    messageType = _b === void 0 ? 'simple' : _b,\n    _c = props.tooltipUserNameMapper,\n    tooltipUserNameMapper = _c === void 0 ? mapToUserNameOrId : _c;\n  var _d = useEnterLeaveHandlers(),\n    handleEnter = _d.handleEnter,\n    handleLeave = _d.handleLeave,\n    tooltipVisible = _d.tooltipVisible;\n  var client = useChatContext('MessageStatus').client;\n  var contextAvatar = useComponentContext('MessageStatus').Avatar;\n  var _e = useMessageContext('MessageStatus'),\n    isMyMessage = _e.isMyMessage,\n    lastReceivedId = _e.lastReceivedId,\n    message = _e.message,\n    readBy = _e.readBy,\n    threadList = _e.threadList;\n  var t = useTranslationContext('MessageStatus').t;\n  var themeVersion = useChatContext('MessageStatus').themeVersion;\n  var _f = useState(null),\n    referenceElement = _f[0],\n    setReferenceElement = _f[1];\n  var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n  if (!isMyMessage() || message.type === 'error') return null;\n  var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n  var rootClassName = \"str-chat__message-\".concat(messageType, \"-status str-chat__message-status\");\n  var sending = message.status === 'sending';\n  var delivered = message.status === 'received' && message.id === lastReceivedId && !threadList;\n  var deliveredAndRead = !!((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe);\n  var lastReadUser = (deliveredAndRead ? readBy.filter(function (item) {\n    var _a;\n    return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n  }) : [])[0];\n  return React.createElement(\"span\", {\n    className: rootClassName,\n    \"data-testid\": clsx({\n      'message-status-read-by': deliveredAndRead,\n      'message-status-received': delivered && !deliveredAndRead,\n      'message-status-sending': sending\n    }),\n    onMouseEnter: handleEnter,\n    onMouseLeave: handleLeave,\n    ref: setReferenceElement\n  }, sending && React.createElement(React.Fragment, null, themeVersion === '1' && React.createElement(Tooltip, null, t('Sending...')), themeVersion === '2' && React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, t('Sending...')), React.createElement(LoadingIndicator, null)), delivered && !deliveredAndRead && React.createElement(React.Fragment, null, themeVersion === '1' && React.createElement(Tooltip, null, t('Delivered')), themeVersion === '2' && React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, t('Delivered')), themeVersion === '2' ? React.createElement(MessageDeliveredIcon, null) : React.createElement(DeliveredCheckIcon, null)), deliveredAndRead && React.createElement(React.Fragment, null, themeVersion === '1' && React.createElement(Tooltip, null, getReadByTooltipText(readBy, t, client, tooltipUserNameMapper)), themeVersion === '2' && React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, getReadByTooltipText(readBy, t, client, tooltipUserNameMapper)), React.createElement(Avatar, {\n    image: lastReadUser.image,\n    name: lastReadUser.name || lastReadUser.id,\n    size: 15,\n    user: lastReadUser\n  }), readBy.length > 2 && React.createElement(\"span\", {\n    className: \"str-chat__message-\".concat(messageType, \"-status-number\"),\n    \"data-testid\": 'message-status-read-by-many'\n  }, readBy.length - 1)));\n};\nexport var MessageStatus = React.memo(UnMemoizedMessageStatus);","map":null,"metadata":{},"sourceType":"module"}