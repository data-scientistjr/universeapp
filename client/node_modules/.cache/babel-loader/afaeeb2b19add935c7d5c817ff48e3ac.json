{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport React, { useMemo } from 'react';\nimport { isAudioAttachment, isFileAttachment, isMediaAttachment, isScrapedContent, isUploadedImage } from './utils';\nimport { AudioContainer, CardContainer, FileContainer, GalleryContainer, ImageContainer, MediaContainer, UnsupportedAttachmentContainer } from './AttachmentContainer';\nvar CONTAINER_MAP = {\n  audio: AudioContainer,\n  card: CardContainer,\n  file: FileContainer,\n  media: MediaContainer,\n  unsupported: UnsupportedAttachmentContainer\n};\nexport var ATTACHMENT_GROUPS_ORDER = ['card', 'gallery', 'image', 'media', 'audio', 'file', 'unsupported'];\n/**\n * A component used for rendering message attachments. By default, the component supports: AttachmentActions, Audio, Card, File, Gallery, Image, and Video\n */\nexport var Attachment = function Attachment(props) {\n  var attachments = props.attachments;\n  var groupedAttachments = useMemo(function () {\n    return renderGroupedAttachments(props);\n  }, [attachments]);\n  return React.createElement(\"div\", {\n    className: 'str-chat__attachment-list'\n  }, ATTACHMENT_GROUPS_ORDER.reduce(function (acc, groupName) {\n    return __spreadArray(__spreadArray([], acc, true), groupedAttachments[groupName], true);\n  }, []));\n};\nvar renderGroupedAttachments = function renderGroupedAttachments(_a) {\n  var attachments = _a.attachments,\n    rest = __rest(_a, [\"attachments\"]);\n  var uploadedImages = attachments.filter(function (attachment) {\n    return isUploadedImage(attachment);\n  });\n  var containers = attachments.filter(function (attachment) {\n    return !isUploadedImage(attachment);\n  }).reduce(function (typeMap, attachment) {\n    var attachmentType = getAttachmentType(attachment);\n    var Container = CONTAINER_MAP[attachmentType];\n    typeMap[attachmentType].push(React.createElement(Container, __assign({\n      key: \"\".concat(attachmentType, \"-\").concat(typeMap[attachmentType].length)\n    }, rest, {\n      attachment: attachment\n    })));\n    return typeMap;\n  }, {\n    audio: [],\n    card: [],\n    file: [],\n    media: [],\n    unsupported: [],\n    // not used in reduce\n    // eslint-disable-next-line sort-keys\n    image: [],\n    // eslint-disable-next-line sort-keys\n    gallery: []\n  });\n  if (uploadedImages.length > 1) {\n    containers['gallery'] = [React.createElement(GalleryContainer, __assign({\n      key: 'gallery-container'\n    }, rest, {\n      attachment: {\n        images: uploadedImages,\n        type: 'gallery'\n      }\n    }))];\n  } else if (uploadedImages.length === 1) {\n    containers['image'] = [React.createElement(ImageContainer, __assign({\n      key: 'image-container'\n    }, rest, {\n      attachment: uploadedImages[0]\n    }))];\n  }\n  return containers;\n};\nvar getAttachmentType = function getAttachmentType(attachment) {\n  if (isScrapedContent(attachment)) {\n    return 'card';\n  } else if (isMediaAttachment(attachment)) {\n    return 'media';\n  } else if (isAudioAttachment(attachment)) {\n    return 'audio';\n  } else if (isFileAttachment(attachment)) {\n    return 'file';\n  }\n  return 'unsupported';\n};","map":null,"metadata":{},"sourceType":"module"}