{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { getStrippedEmojiData } from '../../Channel/emojiData';\nimport { useMessageContext } from '../../../context';\nexport var useProcessReactions = function useProcessReactions(params) {\n  var _a = params.additionalEmojiProps,\n    additionalEmojiProps = _a === void 0 ? {} : _a,\n    emojiConfig = params.emojiConfig,\n    propOwnReactions = params.own_reactions,\n    propReactionCounts = params.reaction_counts,\n    propReactionOptions = params.reactionOptions,\n    propReactions = params.reactions;\n  var message = useMessageContext('ReactionsList').message;\n  var _b = emojiConfig || {},\n    defaultMinimalEmojis = _b.defaultMinimalEmojis,\n    fullEmojiData = _b.emojiData,\n    emojiSetDef = _b.emojiSetDef;\n  var latestReactions = propReactions || message.latest_reactions || [];\n  var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions) || [];\n  var reactionCounts = propReactionCounts || message.reaction_counts || {};\n  var reactionOptions = propReactionOptions || defaultMinimalEmojis;\n  var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);\n  var iHaveReactedWithReaction = useCallback(function (reactionType) {\n    return ownReactions.find(function (reaction) {\n      return reaction.type === reactionType;\n    });\n  }, [ownReactions]);\n  var getEmojiByReactionType = useCallback(function (type) {\n    return reactionOptions.find(function (option) {\n      return option.id === type;\n    });\n  }, [reactionOptions]);\n  var emojiData = useMemo(function () {\n    return reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData);\n  }, [fullEmojiData, reactionsAreCustom]);\n  var latestReactionTypes = useMemo(function () {\n    return latestReactions.reduce(function (reactionTypes, _a) {\n      var type = _a.type;\n      if (reactionTypes.indexOf(type) === -1) {\n        reactionTypes.push(type);\n      }\n      return reactionTypes;\n    }, []);\n  }, [latestReactions]);\n  var supportedReactionMap = useMemo(function () {\n    return reactionOptions.reduce(function (acc, _a) {\n      var id = _a.id;\n      acc[id] = true;\n      return acc;\n    }, {});\n  }, [reactionOptions]);\n  var supportedReactionsArePresent = useMemo(function () {\n    return latestReactionTypes.some(function (type) {\n      return supportedReactionMap[type];\n    });\n  }, [latestReactionTypes, supportedReactionMap]);\n  var totalReactionCount = useMemo(function () {\n    return supportedReactionsArePresent ? Object.values(reactionCounts).reduce(function (total, count) {\n      return total + count;\n    }, 0) : 0;\n  }, [reactionCounts, supportedReactionsArePresent]);\n  var aggregatedUserNamesByType = useMemo(function () {\n    return latestReactions.reduce(function (typeMap, _a) {\n      var _b;\n      var type = _a.type,\n        user = _a.user;\n      (_b = typeMap[type]) !== null && _b !== void 0 ? _b : typeMap[type] = [];\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      typeMap[type].push((user === null || user === void 0 ? void 0 : user.name) || user.id);\n      return typeMap;\n    }, {});\n  }, [latestReactions]);\n  return {\n    additionalEmojiProps: reactionsAreCustom ? additionalEmojiProps : emojiSetDef,\n    aggregatedUserNamesByType: aggregatedUserNamesByType,\n    emojiData: emojiData,\n    getEmojiByReactionType: getEmojiByReactionType,\n    iHaveReactedWithReaction: iHaveReactedWithReaction,\n    latestReactions: latestReactions,\n    latestReactionTypes: latestReactionTypes,\n    reactionCounts: reactionCounts,\n    supportedReactionsArePresent: supportedReactionsArePresent,\n    totalReactionCount: totalReactionCount\n  };\n};","map":null,"metadata":{},"sourceType":"module"}