{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport React, { Suspense, useState } from 'react';\nimport clsx from 'clsx';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useProcessReactions } from './hooks/useProcessReactions';\nimport { PopperTooltip } from '../Tooltip';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nvar ButtonWithTooltip = function ButtonWithTooltip(_a) {\n  var children = _a.children,\n    onMouseEnter = _a.onMouseEnter,\n    onMouseLeave = _a.onMouseLeave,\n    rest = __rest(_a, [\"children\", \"onMouseEnter\", \"onMouseLeave\"]);\n  var _b = useState(null),\n    referenceElement = _b[0],\n    setReferenceElement = _b[1];\n  var _c = useEnterLeaveHandlers({\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave\n    }),\n    handleEnter = _c.handleEnter,\n    handleLeave = _c.handleLeave,\n    tooltipVisible = _c.tooltipVisible;\n  var themeVersion = useChatContext('ButtonWithTooltip').themeVersion;\n  return React.createElement(React.Fragment, null, themeVersion === '2' && React.createElement(PopperTooltip, {\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, rest.title), React.createElement(\"button\", __assign({\n    onMouseEnter: handleEnter,\n    onMouseLeave: handleLeave,\n    ref: setReferenceElement\n  }, rest), children));\n};\nvar UnMemoizedReactionsList = function UnMemoizedReactionsList(props) {\n  var onClick = props.onClick,\n    _a = props.reverse,\n    reverse = _a === void 0 ? false : _a,\n    rest = __rest(props, [\"onClick\", \"reverse\"]);\n  var _b = useEmojiContext('ReactionsList'),\n    Emoji = _b.Emoji,\n    emojiConfig = _b.emojiConfig;\n  var onReactionListClick = useMessageContext('ReactionsList').onReactionListClick;\n  var _c = useProcessReactions(__assign({\n      emojiConfig: emojiConfig\n    }, rest)),\n    additionalEmojiProps = _c.additionalEmojiProps,\n    aggregatedUserNamesByType = _c.aggregatedUserNamesByType,\n    emojiData = _c.emojiData,\n    getEmojiByReactionType = _c.getEmojiByReactionType,\n    iHaveReactedWithReaction = _c.iHaveReactedWithReaction,\n    latestReactions = _c.latestReactions,\n    latestReactionTypes = _c.latestReactionTypes,\n    reactionCounts = _c.reactionCounts,\n    supportedReactionsArePresent = _c.supportedReactionsArePresent,\n    totalReactionCount = _c.totalReactionCount;\n  if (!latestReactions.length) return null;\n  if (!supportedReactionsArePresent) return null;\n  return React.createElement(\"div\", {\n    \"aria-label\": 'Reaction list',\n    className: clsx('str-chat__reaction-list str-chat__message-reactions-container', {\n      'str-chat__reaction-list--reverse': reverse\n    }),\n    \"data-testid\": 'reaction-list',\n    onClick: onClick || onReactionListClick,\n    onKeyUp: onClick || onReactionListClick,\n    role: 'figure'\n  }, React.createElement(\"ul\", {\n    className: 'str-chat__message-reactions'\n  }, latestReactionTypes.map(function (reactionType) {\n    var emojiObject = getEmojiByReactionType(reactionType);\n    var isOwnReaction = iHaveReactedWithReaction(reactionType);\n    return emojiObject ? React.createElement(\"li\", {\n      className: clsx('str-chat__message-reaction', {\n        'str-chat__message-reaction-own': isOwnReaction\n      }),\n      key: emojiObject.id\n    }, React.createElement(ButtonWithTooltip, {\n      \"aria-label\": \"Reactions: \".concat(reactionType),\n      title: aggregatedUserNamesByType[reactionType].join(', '),\n      type: 'button'\n    }, React.createElement(Suspense, {\n      fallback: null\n    }, React.createElement(\"span\", {\n      className: 'str-chat__message-reaction-emoji'\n    }, React.createElement(Emoji, __assign({\n      data: emojiData,\n      emoji: emojiObject,\n      size: 16\n    }, additionalEmojiProps)))), \"\\xA0\", React.createElement(\"span\", {\n      className: 'str-chat__message-reaction-count',\n      \"data-testclass\": 'reaction-list-reaction-count'\n    }, reactionCounts[reactionType]))) : null;\n  }), React.createElement(\"li\", null, React.createElement(\"span\", {\n    className: 'str-chat__reaction-list--counter'\n  }, totalReactionCount))));\n};\n/**\n * Component that displays a list of reactions on a message.\n */\nexport var ReactionsList = React.memo(UnMemoizedReactionsList);","map":null,"metadata":{},"sourceType":"module"}