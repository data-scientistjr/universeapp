{"ast":null,"code":"import { useLayoutEffect, useRef } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\n// FIXME: change this generic name to something like useAdjustScrollPositionToListSize\nexport function useMessageListScrollManager(params) {\n  var loadMoreScrollThreshold = params.loadMoreScrollThreshold,\n    onScrollBy = params.onScrollBy,\n    scrollContainerMeasures = params.scrollContainerMeasures,\n    scrolledUpThreshold = params.scrolledUpThreshold,\n    scrollToBottom = params.scrollToBottom,\n    showNewMessages = params.showNewMessages;\n  var client = useChatContext('useMessageListScrollManager').client;\n  var measures = useRef({\n    offsetHeight: 0,\n    scrollHeight: 0\n  });\n  var messages = useRef();\n  var scrollTop = useRef(0);\n  useLayoutEffect(function () {\n    var _a, _b, _c;\n    var prevMeasures = measures.current;\n    var prevMessages = messages.current;\n    var newMessages = params.messages;\n    var lastNewMessage = newMessages[newMessages.length - 1] || {};\n    var lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];\n    var newMeasures = scrollContainerMeasures();\n    var wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;\n    if (typeof prevMessages !== 'undefined') {\n      if (prevMessages.length < newMessages.length) {\n        // messages added to the top\n        if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {\n          if (scrollTop.current < loadMoreScrollThreshold) {\n            var listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n            onScrollBy(listHeightDelta);\n          }\n        }\n        // messages added to the bottom\n        else {\n          var lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID;\n          if (lastMessageIsFromCurrentUser || wasAtBottom) {\n            scrollToBottom();\n          } else {\n            showNewMessages();\n          }\n        }\n      }\n      // message list length didn't change, but check if last message had reaction/reply update\n      else {\n        var hasNewReactions = ((_b = lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) === null || _c === void 0 ? void 0 : _c.length);\n        var hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;\n        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n          scrollToBottom();\n        }\n      }\n    }\n    messages.current = newMessages;\n    measures.current = newMeasures;\n  }, [measures, messages, params.messages]);\n  return function (scrollTopValue) {\n    scrollTop.current = scrollTopValue;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}