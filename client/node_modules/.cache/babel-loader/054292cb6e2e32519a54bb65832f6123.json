{"ast":null,"code":"import React, { useCallback, useState } from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar CustomMessageActionsList = function CustomMessageActionsList(props) {\n  var customMessageActions = props.customMessageActions,\n    message = props.message;\n  var customActionsArray = Object.keys(customMessageActions);\n  return React.createElement(React.Fragment, null, customActionsArray.map(function (customAction) {\n    var customHandler = customMessageActions[customAction];\n    return React.createElement(\"button\", {\n      \"aria-selected\": 'false',\n      className: 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button',\n      key: customAction,\n      onClick: function onClick(event) {\n        return customHandler(message, event);\n      },\n      role: 'option'\n    }, customAction);\n  }));\n};\nvar UnMemoizedMessageActionsBox = function UnMemoizedMessageActionsBox(props) {\n  var getMessageActions = props.getMessageActions,\n    handleDelete = props.handleDelete,\n    handleEdit = props.handleEdit,\n    handleFlag = props.handleFlag,\n    handleMute = props.handleMute,\n    handlePin = props.handlePin,\n    isUserMuted = props.isUserMuted,\n    mine = props.mine,\n    _a = props.open,\n    open = _a === void 0 ? false : _a;\n  var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;\n  var _b = useMessageContext('MessageActionsBox'),\n    customMessageActions = _b.customMessageActions,\n    message = _b.message,\n    messageListRect = _b.messageListRect;\n  var t = useTranslationContext('MessageActionsBox').t;\n  var _c = useState(false),\n    reverse = _c[0],\n    setReverse = _c[1];\n  var messageActions = getMessageActions();\n  var checkIfReverse = useCallback(function (containerElement) {\n    if (!containerElement) {\n      setReverse(false);\n      return;\n    }\n    if (open) {\n      var containerRect = containerElement.getBoundingClientRect();\n      if (mine) {\n        setReverse(!!messageListRect && containerRect.left < messageListRect.left);\n      } else {\n        setReverse(!!messageListRect && containerRect.right + 5 > messageListRect.right);\n      }\n    }\n  }, [messageListRect, mine, open]);\n  var handleQuote = function handleQuote() {\n    setQuotedMessage(message);\n    var elements = message.parent_id ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea') : document.getElementsByClassName('str-chat__textarea__textarea');\n    var textarea = elements.item(0);\n    if (textarea instanceof HTMLTextAreaElement) {\n      textarea.focus();\n    }\n  };\n  var rootClassName = clsx('str-chat__message-actions-box', {\n    'str-chat__message-actions-box--mine': mine,\n    'str-chat__message-actions-box--open': open,\n    'str-chat__message-actions-box--reverse': reverse\n  });\n  var buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n  return React.createElement(\"div\", {\n    className: rootClassName,\n    \"data-testid\": 'message-actions-box',\n    ref: checkIfReverse\n  }, React.createElement(\"div\", {\n    \"aria-label\": 'Message Options',\n    className: 'str-chat__message-actions-list',\n    role: 'listbox'\n  }, customMessageActions && React.createElement(CustomMessageActionsList, {\n    customMessageActions: customMessageActions,\n    message: message\n  }), messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleQuote,\n    role: 'option'\n  }, t('Reply')), messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handlePin,\n    role: 'option'\n  }, !message.pinned ? t('Pin') : t('Unpin')), messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleFlag,\n    role: 'option'\n  }, t('Flag')), messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMute,\n    role: 'option'\n  }, isUserMuted() ? t('Unmute') : t('Mute')), messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleEdit,\n    role: 'option'\n  }, t('Edit Message')), messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleDelete,\n    role: 'option'\n  }, t('Delete'))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport var MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);","map":null,"metadata":{},"sourceType":"module"}