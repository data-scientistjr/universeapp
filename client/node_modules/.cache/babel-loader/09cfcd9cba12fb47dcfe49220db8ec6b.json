{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { Suspense, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { isMutableRef } from './utils/utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { getStrippedEmojiData } from '../Channel/emojiData';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useEmojiContext } from '../../context/EmojiContext';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedReactionSelector = React.forwardRef(function (props, ref) {\n  var _a;\n  var _b = props.additionalEmojiProps,\n    additionalEmojiProps = _b === void 0 ? {} : _b,\n    propAvatar = props.Avatar,\n    _c = props.detailedView,\n    detailedView = _c === void 0 ? true : _c,\n    propHandleReaction = props.handleReaction,\n    propLatestReactions = props.latest_reactions,\n    propOwnReactions = props.own_reactions,\n    propReactionCounts = props.reaction_counts,\n    propReactionOptions = props.reactionOptions,\n    _d = props.reverse,\n    reverse = _d === void 0 ? false : _d;\n  var contextAvatar = useComponentContext('ReactionSelector').Avatar;\n  var _e = useEmojiContext('ReactionSelector'),\n    Emoji = _e.Emoji,\n    emojiConfig = _e.emojiConfig;\n  var _f = useMessageContext('ReactionSelector'),\n    contextHandleReaction = _f.handleReaction,\n    message = _f.message;\n  var _g = emojiConfig || {},\n    defaultMinimalEmojis = _g.defaultMinimalEmojis,\n    fullEmojiData = _g.emojiData,\n    emojiSetDef = _g.emojiSetDef;\n  var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n  var handleReaction = propHandleReaction || contextHandleReaction;\n  var latestReactions = propLatestReactions || (message === null || message === void 0 ? void 0 : message.latest_reactions) || [];\n  var ownReactions = propOwnReactions || (message === null || message === void 0 ? void 0 : message.own_reactions) || [];\n  var reactionCounts = propReactionCounts || (message === null || message === void 0 ? void 0 : message.reaction_counts) || {};\n  var reactionOptions = propReactionOptions || defaultMinimalEmojis;\n  var reactionsAreCustom = !!(propReactionOptions === null || propReactionOptions === void 0 ? void 0 : propReactionOptions.length);\n  var emojiData = useMemo(function () {\n    return reactionsAreCustom ? fullEmojiData : getStrippedEmojiData(fullEmojiData);\n  }, [fullEmojiData, reactionsAreCustom]);\n  var _h = useState(null),\n    tooltipReactionType = _h[0],\n    setTooltipReactionType = _h[1];\n  var _j = useState(null),\n    tooltipPositions = _j[0],\n    setTooltipPositions = _j[1];\n  var targetRef = useRef(null);\n  var tooltipRef = useRef(null);\n  var showTooltip = useCallback(function (event, reactionType) {\n    targetRef.current = event.currentTarget;\n    setTooltipReactionType(reactionType);\n  }, []);\n  var hideTooltip = useCallback(function () {\n    setTooltipReactionType(null);\n    setTooltipPositions(null);\n  }, []);\n  useEffect(function () {\n    var _a, _b, _c;\n    if (tooltipReactionType) {\n      var tooltip = (_a = tooltipRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\n      var target = (_b = targetRef.current) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect();\n      var container = isMutableRef(ref) ? (_c = ref.current) === null || _c === void 0 ? void 0 : _c.getBoundingClientRect() : null;\n      if (!tooltip || !target || !container) return;\n      var tooltipPosition = tooltip.width === container.width || tooltip.x < container.x ? 0 : target.left + target.width / 2 - container.left - tooltip.width / 2;\n      var arrowPosition = target.x - tooltip.x + target.width / 2 - tooltipPosition;\n      setTooltipPositions({\n        arrow: arrowPosition,\n        tooltip: tooltipPosition\n      });\n    }\n  }, [tooltipReactionType, ref]);\n  var getUsersPerReactionType = function getUsersPerReactionType(type) {\n    return latestReactions.map(function (reaction) {\n      var _a, _b;\n      if (reaction.type === type) {\n        return ((_a = reaction.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = reaction.user) === null || _b === void 0 ? void 0 : _b.id);\n      }\n      return null;\n    }).filter(Boolean);\n  };\n  var iHaveReactedWithReaction = function iHaveReactedWithReaction(reactionType) {\n    return ownReactions.find(function (reaction) {\n      return reaction.type === reactionType;\n    });\n  };\n  var getLatestUserForReactionType = function getLatestUserForReactionType(type) {\n    var _a;\n    return ((_a = latestReactions.find(function (reaction) {\n      return reaction.type === type && !!reaction.user;\n    })) === null || _a === void 0 ? void 0 : _a.user) || undefined;\n  };\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__reaction-selector str-chat__message-reaction-selector', {\n      'str-chat__reaction-selector--reverse': reverse\n    }),\n    \"data-testid\": 'reaction-selector',\n    ref: ref\n  }, !!tooltipReactionType && detailedView && React.createElement(\"div\", {\n    className: 'str-chat__reaction-selector-tooltip',\n    ref: tooltipRef,\n    style: {\n      left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.tooltip,\n      visibility: tooltipPositions ? 'visible' : 'hidden'\n    }\n  }, React.createElement(\"div\", {\n    className: 'arrow',\n    style: {\n      left: tooltipPositions === null || tooltipPositions === void 0 ? void 0 : tooltipPositions.arrow\n    }\n  }), (_a = getUsersPerReactionType(tooltipReactionType)) === null || _a === void 0 ? void 0 : _a.map(function (user, i, users) {\n    return React.createElement(\"span\", {\n      className: 'latest-user-username',\n      key: \"key-\".concat(i, \"-\").concat(user)\n    }, \"\".concat(user).concat(i < users.length - 1 ? ', ' : ''));\n  })), React.createElement(\"ul\", {\n    className: 'str-chat__message-reactions-list str-chat__message-reactions-options'\n  }, reactionOptions.map(function (reactionOption) {\n    var latestUser = getLatestUserForReactionType(reactionOption.id);\n    var count = reactionCounts && reactionCounts[reactionOption.id];\n    return React.createElement(\"li\", {\n      key: \"item-\".concat(reactionOption.id)\n    }, React.createElement(\"button\", {\n      \"aria-label\": \"Select Reaction: \".concat(reactionOption.name),\n      className: clsx('str-chat__message-reactions-list-item str-chat__message-reactions-option', {\n        'str-chat__message-reactions-option-selected': iHaveReactedWithReaction(reactionOption.id)\n      }),\n      \"data-text\": reactionOption.id,\n      onClick: function onClick(event) {\n        return handleReaction(reactionOption.id, event);\n      }\n    }, !!count && detailedView && React.createElement(\"div\", {\n      className: 'latest-user str-chat__message-reactions-last-user',\n      onClick: hideTooltip,\n      onMouseEnter: function onMouseEnter(e) {\n        return showTooltip(e, reactionOption.id);\n      },\n      onMouseLeave: hideTooltip\n    }, latestUser ? React.createElement(Avatar, {\n      image: latestUser.image,\n      name: latestUser.name,\n      size: 20,\n      user: latestUser\n    }) : React.createElement(\"div\", {\n      className: 'latest-user-not-found'\n    })), React.createElement(Suspense, {\n      fallback: null\n    }, React.createElement(\"span\", {\n      className: 'str-chat__message-reaction-emoji'\n    }, React.createElement(Emoji, __assign({\n      data: emojiData,\n      emoji: reactionOption,\n      size: 20\n    }, reactionsAreCustom ? additionalEmojiProps : emojiSetDef)))), Boolean(count) && detailedView && React.createElement(\"span\", {\n      className: 'str-chat__message-reactions-list-item__count'\n    }, count || '')));\n  })));\n});\n/**\n * Component that allows a user to select a reaction.\n */\nexport var ReactionSelector = React.memo(UnMemoizedReactionSelector);","map":null,"metadata":{},"sourceType":"module"}