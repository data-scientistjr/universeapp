{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString } from '../../i18n/utils';\n/**\n * Component to display system and channel event messages\n */\nvar UnMemoizedEventComponent = function UnMemoizedEventComponent(props) {\n  var _a, _b, _c;\n  var _d = props.Avatar,\n    Avatar = _d === void 0 ? DefaultAvatar : _d,\n    message = props.message;\n  var tDateTimeParser = useTranslationContext('EventComponent').tDateTimeParser;\n  var _e = message.created_at,\n    created_at = _e === void 0 ? '' : _e,\n    event = message.event,\n    text = message.text,\n    type = message.type;\n  var getDateOptions = {\n    messageCreatedAt: created_at.toString(),\n    tDateTimeParser: tDateTimeParser\n  };\n  if (type === 'system') return React.createElement(\"div\", {\n    className: 'str-chat__message--system'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message--system__text'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message--system__line'\n  }), React.createElement(\"p\", null, text), React.createElement(\"div\", {\n    className: 'str-chat__message--system__line'\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message--system__date'\n  }, React.createElement(\"strong\", null, getDateString(__assign(__assign({}, getDateOptions), {\n    format: 'dddd'\n  })), \" \"), \"at \", getDateString(__assign(__assign({}, getDateOptions), {\n    format: 'hh:mm A'\n  }))));\n  if ((event === null || event === void 0 ? void 0 : event.type) === 'member.removed' || (event === null || event === void 0 ? void 0 : event.type) === 'member.added') {\n    var name_1 = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.name) || ((_b = event.user) === null || _b === void 0 ? void 0 : _b.id);\n    var sentence = \"\".concat(name_1, \" \").concat(event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat');\n    return React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event'\n    }, React.createElement(Avatar, {\n      image: (_c = event.user) === null || _c === void 0 ? void 0 : _c.image,\n      name: name_1,\n      user: event.user\n    }), React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event__content'\n    }, React.createElement(\"em\", {\n      className: 'str-chat__event-component__channel-event__sentence'\n    }, sentence), React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event__date'\n    }, getDateString(__assign(__assign({}, getDateOptions), {\n      format: 'LT'\n    })))));\n  }\n  return null;\n};\nexport var EventComponent = React.memo(UnMemoizedEventComponent);","map":null,"metadata":{},"sourceType":"module"}