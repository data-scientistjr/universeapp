{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useState } from 'react';\nimport { sanitizeUrl } from '@braintree/sanitize-url';\nimport clsx from 'clsx';\nimport { Modal } from '../Modal';\nimport { ModalGallery as DefaultModalGallery } from './ModalGallery';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedGallery = function UnMemoizedGallery(props) {\n  var images = props.images,\n    innerRefs = props.innerRefs;\n  var _a = useState(0),\n    index = _a[0],\n    setIndex = _a[1];\n  var _b = useState(false),\n    modalOpen = _b[0],\n    setModalOpen = _b[1];\n  var _c = useComponentContext('Gallery').ModalGallery,\n    ModalGallery = _c === void 0 ? DefaultModalGallery : _c;\n  var t = useTranslationContext('Gallery').t;\n  var countImagesDisplayedInPreview = 4;\n  var lastImageIndexInPreview = countImagesDisplayedInPreview - 1;\n  var toggleModal = function toggleModal(selectedIndex) {\n    if (modalOpen) {\n      setModalOpen(false);\n    } else {\n      setIndex(selectedIndex);\n      setModalOpen(true);\n    }\n  };\n  var renderImages = images.slice(0, countImagesDisplayedInPreview).map(function (image, i) {\n    return i === lastImageIndexInPreview && images.length > countImagesDisplayedInPreview ? React.createElement(\"button\", __assign({\n      className: 'str-chat__gallery-placeholder',\n      \"data-testid\": 'gallery-image-last',\n      key: \"gallery-image-\".concat(i),\n      onClick: function onClick() {\n        return toggleModal(i);\n      },\n      style: __assign({\n        backgroundImage: \"url(\".concat(images[lastImageIndexInPreview].previewUrl || images[lastImageIndexInPreview].image_url || images[lastImageIndexInPreview].thumb_url, \")\")\n      }, image.style)\n    }, (innerRefs === null || innerRefs === void 0 ? void 0 : innerRefs.current) && {\n      ref: function ref(r) {\n        return innerRefs.current[i] = r;\n      }\n    }), React.createElement(\"p\", null, t('{{ imageCount }} more', {\n      imageCount: images.length - countImagesDisplayedInPreview\n    }))) : React.createElement(\"button\", {\n      className: 'str-chat__gallery-image',\n      \"data-testid\": 'gallery-image',\n      key: \"gallery-image-\".concat(i),\n      onClick: function onClick() {\n        return toggleModal(i);\n      }\n    }, React.createElement(\"img\", __assign({\n      alt: 'User uploaded content',\n      src: sanitizeUrl(image.previewUrl || image.image_url || image.thumb_url),\n      style: image.style\n    }, (innerRefs === null || innerRefs === void 0 ? void 0 : innerRefs.current) && {\n      ref: function ref(r) {\n        return innerRefs.current[i] = r;\n      }\n    })));\n  });\n  var className = clsx('str-chat__gallery', {\n    'str-chat__gallery--square': images.length > lastImageIndexInPreview,\n    'str-chat__gallery-two-rows': images.length > 2\n  });\n  return React.createElement(\"div\", {\n    className: className\n  }, renderImages, React.createElement(Modal, {\n    onClose: function onClose() {\n      return setModalOpen(function (modalOpen) {\n        return !modalOpen;\n      });\n    },\n    open: modalOpen\n  }, React.createElement(ModalGallery, {\n    images: images,\n    index: index\n  })));\n};\n/**\n * Displays images in a simple responsive grid with a light box to view the images.\n */\nexport var Gallery = React.memo(UnMemoizedGallery);","map":null,"metadata":{},"sourceType":"module"}