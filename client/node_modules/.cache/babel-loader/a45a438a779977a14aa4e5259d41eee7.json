{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { MessageActionsBox } from './MessageActionsBox';\nimport { ActionsIcon as DefaultActionsIcon } from '../Message/icons';\nimport { isUserMuted } from '../Message/utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useMessageContext } from '../../context/MessageContext';\nexport var MessageActions = function MessageActions(props) {\n  var _a = props.ActionsIcon,\n    ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a,\n    _b = props.customWrapperClass,\n    customWrapperClass = _b === void 0 ? '' : _b,\n    propGetMessageActions = props.getMessageActions,\n    propHandleDelete = props.handleDelete,\n    propHandleFlag = props.handleFlag,\n    propHandleMute = props.handleMute,\n    propHandlePin = props.handlePin,\n    inline = props.inline,\n    propMessage = props.message,\n    messageWrapperRef = props.messageWrapperRef,\n    mine = props.mine;\n  var mutes = useChatContext('MessageActions').mutes;\n  var _c = useMessageContext('MessageActions'),\n    customMessageActions = _c.customMessageActions,\n    contextGetMessageActions = _c.getMessageActions,\n    contextHandleDelete = _c.handleDelete,\n    contextHandleFlag = _c.handleFlag,\n    contextHandleMute = _c.handleMute,\n    contextHandlePin = _c.handlePin,\n    isMyMessage = _c.isMyMessage,\n    contextMessage = _c.message,\n    setEditingState = _c.setEditingState;\n  var getMessageActions = propGetMessageActions || contextGetMessageActions;\n  var handleDelete = propHandleDelete || contextHandleDelete;\n  var handleFlag = propHandleFlag || contextHandleFlag;\n  var handleMute = propHandleMute || contextHandleMute;\n  var handlePin = propHandlePin || contextHandlePin;\n  var message = propMessage || contextMessage;\n  var _d = useState(false),\n    actionsBoxOpen = _d[0],\n    setActionsBoxOpen = _d[1];\n  var isMuted = useCallback(function () {\n    return isUserMuted(message, mutes);\n  }, [message, mutes]);\n  var hideOptions = useCallback(function (event) {\n    if (event instanceof KeyboardEvent && event.key !== 'Escape') {\n      return;\n    }\n    setActionsBoxOpen(false);\n  }, []);\n  var messageActions = getMessageActions();\n  var messageDeletedAt = !!(message === null || message === void 0 ? void 0 : message.deleted_at);\n  useEffect(function () {\n    if (messageWrapperRef === null || messageWrapperRef === void 0 ? void 0 : messageWrapperRef.current) {\n      messageWrapperRef.current.addEventListener('mouseleave', hideOptions);\n    }\n  }, [hideOptions, messageWrapperRef]);\n  useEffect(function () {\n    if (messageDeletedAt) {\n      document.removeEventListener('click', hideOptions);\n    }\n  }, [hideOptions, messageDeletedAt]);\n  useEffect(function () {\n    if (!actionsBoxOpen) return;\n    document.addEventListener('click', hideOptions);\n    document.addEventListener('keyup', hideOptions);\n    return function () {\n      document.removeEventListener('click', hideOptions);\n      document.removeEventListener('keyup', hideOptions);\n    };\n  }, [actionsBoxOpen, hideOptions]);\n  if (!messageActions.length && !customMessageActions) return null;\n  return React.createElement(MessageActionsWrapper, {\n    customWrapperClass: customWrapperClass,\n    inline: inline,\n    setActionsBoxOpen: setActionsBoxOpen\n  }, React.createElement(MessageActionsBox, {\n    getMessageActions: getMessageActions,\n    handleDelete: handleDelete,\n    handleEdit: setEditingState,\n    handleFlag: handleFlag,\n    handleMute: handleMute,\n    handlePin: handlePin,\n    isUserMuted: isMuted,\n    mine: mine ? mine() : isMyMessage(),\n    open: actionsBoxOpen\n  }), React.createElement(\"button\", {\n    \"aria-expanded\": actionsBoxOpen,\n    \"aria-haspopup\": 'true',\n    \"aria-label\": 'Open Message Actions Menu',\n    className: 'str-chat__message-actions-box-button'\n  }, React.createElement(ActionsIcon, {\n    className: 'str-chat__message-action-icon'\n  })));\n};\nvar MessageActionsWrapper = function MessageActionsWrapper(props) {\n  var children = props.children,\n    customWrapperClass = props.customWrapperClass,\n    inline = props.inline,\n    setActionsBoxOpen = props.setActionsBoxOpen;\n  var defaultWrapperClass = \"\\n  str-chat__message-simple__actions__action\\n  str-chat__message-simple__actions__action--options\\n  str-chat__message-actions-container\";\n  var wrapperClass = customWrapperClass || defaultWrapperClass;\n  var onClickOptionsAction = function onClickOptionsAction(event) {\n    event.stopPropagation();\n    setActionsBoxOpen(function (prev) {\n      return !prev;\n    });\n  };\n  var wrapperProps = {\n    className: wrapperClass,\n    'data-testid': 'message-actions',\n    onClick: onClickOptionsAction\n  };\n  if (inline) return React.createElement(\"span\", __assign({}, wrapperProps), children);\n  return React.createElement(\"div\", __assign({}, wrapperProps), children);\n};","map":null,"metadata":{},"sourceType":"module"}