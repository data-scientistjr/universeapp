{"ast":null,"code":"'use strict';\n\n// -- Exported Constants -------------------------------------------------------\n\n/**\nMapping of predefined entity names to their replacement values.\n\n@type {Readonly<{[name: string]: string}>}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-predefined-ent\n*/\nvar predefinedEntities = Object.freeze(Object.assign(Object.create(null), {\n  amp: '&',\n  apos: \"'\",\n  gt: '>',\n  lt: '<',\n  quot: '\"'\n}));\nexports.predefinedEntities = predefinedEntities;\n\n// -- Exported Functions -------------------------------------------------------\n\n/**\nReturns `true` if _char_ is an XML `NameChar`, `false` if it isn't.\n\n@param {string} char\n@returns {boolean}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameChar\n*/\nfunction isNameChar(char) {\n  if (isNameStartChar(char)) {\n    return true;\n  }\n  var cp = getCodePoint(char);\n  return cp === 0x2D // -\n  || cp === 0x2E // .\n  || cp >= 0x30 && cp <= 0x39 // 0-9\n  || cp === 0xB7 || cp >= 0x300 && cp <= 0x36F || cp >= 0x203F && cp <= 0x2040;\n}\nexports.isNameChar = isNameChar;\n\n/**\nReturns `true` if _char_ is an XML `NameStartChar`, `false` if it isn't.\n\n@param {string} char\n@returns {boolean}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-NameStartChar\n*/\nfunction isNameStartChar(char) {\n  var cp = getCodePoint(char);\n  return cp === 0x3A // :\n  || cp === 0x5F // _\n  || cp >= 0x41 && cp <= 0x5A // A-Z\n  || cp >= 0x61 && cp <= 0x7A // a-z\n  || cp >= 0xC0 && cp <= 0xD6 || cp >= 0xD8 && cp <= 0xF6 || cp >= 0xF8 && cp <= 0x2FF || cp >= 0x370 && cp <= 0x37D || cp >= 0x37F && cp <= 0x1FFF || cp >= 0x200C && cp <= 0x200D || cp >= 0x2070 && cp <= 0x218F || cp >= 0x2C00 && cp <= 0x2FEF || cp >= 0x3001 && cp <= 0xD7FF || cp >= 0xF900 && cp <= 0xFDCF || cp >= 0xFDF0 && cp <= 0xFFFD || cp >= 0x10000 && cp <= 0xEFFFF;\n}\nexports.isNameStartChar = isNameStartChar;\n\n/**\nReturns `true` if _char_ is not a valid XML `Char`, `false` otherwise.\n\n@param {string} char\n@returns {boolean}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char\n*/\nfunction isNotXmlChar(char) {\n  return !isXmlChar(char);\n}\nexports.isNotXmlChar = isNotXmlChar;\n\n/**\nReturns `true` if _char_ is a valid reference character (which may appear\nbetween `&` and `;` in a reference), `false` otherwise.\n\n@param {string} char\n@returns {boolean}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#sec-references\n*/\nfunction isReferenceChar(char) {\n  return char === '#' || isNameChar(char);\n}\nexports.isReferenceChar = isReferenceChar;\n\n/**\nReturns `true` if _char_ is an XML whitespace character, `false` otherwise.\n\n@param {string} char\n@returns {boolean}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#white\n*/\nfunction isWhitespace(char) {\n  var cp = getCodePoint(char);\n  return cp === 0x20 || cp === 0x9 || cp === 0xA || cp === 0xD;\n}\nexports.isWhitespace = isWhitespace;\n\n/**\nReturns `true` if _char_ is a valid XML `Char`, `false` otherwise.\n\n@param {string} char\n@returns {boolean}\n@see https://www.w3.org/TR/2008/REC-xml-20081126/#NT-Char\n*/\nfunction isXmlChar(char) {\n  var cp = getCodePoint(char);\n  return cp === 0x9 || cp === 0xA || cp === 0xD || cp >= 0x20 && cp <= 0xD7FF || cp >= 0xE000 && cp <= 0xFFFD || cp >= 0x10000 && cp <= 0x10FFFF;\n}\nexports.isXmlChar = isXmlChar;\n\n// -- Private Functions --------------------------------------------------------\n\n/**\nReturns the Unicode code point value of the given character, or `-1` if _char_\nis empty.\n\n@param {string} char\n@returns {number}\n*/\nfunction getCodePoint(char) {\n  return char.codePointAt(0) || -1;\n}","map":null,"metadata":{},"sourceType":"script"}