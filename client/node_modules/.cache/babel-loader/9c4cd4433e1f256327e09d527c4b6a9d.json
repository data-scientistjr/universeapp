{"ast":null,"code":"import React, { useMemo } from 'react';\nimport { QuotedMessage as DefaultQuotedMessage } from './QuotedMessage';\nimport { messageHasAttachments } from './utils';\nimport { useComponentContext, useMessageContext, useTranslationContext } from '../../context';\nimport { renderText as defaultRenderText, isOnlyEmojis } from '../../utils';\nvar UnMemoizedMessageTextComponent = function UnMemoizedMessageTextComponent(props) {\n  var _a, _b;\n  var customInnerClass = props.customInnerClass,\n    _c = props.customWrapperClass,\n    customWrapperClass = _c === void 0 ? '' : _c,\n    propMessage = props.message,\n    propsRenderText = props.renderText,\n    _d = props.theme,\n    theme = _d === void 0 ? 'simple' : _d;\n  var _e = useComponentContext('MessageText').QuotedMessage,\n    QuotedMessage = _e === void 0 ? DefaultQuotedMessage : _e;\n  var _f = useMessageContext('MessageText'),\n    contextMessage = _f.message,\n    onMentionsClickMessage = _f.onMentionsClickMessage,\n    onMentionsHoverMessage = _f.onMentionsHoverMessage,\n    contextRenderText = _f.renderText,\n    unsafeHTML = _f.unsafeHTML;\n  var renderText = (_a = propsRenderText !== null && propsRenderText !== void 0 ? propsRenderText : contextRenderText) !== null && _a !== void 0 ? _a : defaultRenderText;\n  var _g = useTranslationContext('MessageText'),\n    t = _g.t,\n    userLanguage = _g.userLanguage;\n  var message = propMessage || contextMessage;\n  var hasAttachment = messageHasAttachments(message);\n  var messageTextToRender = ((_b = message.i18n) === null || _b === void 0 ? void 0 : _b[\"\".concat(userLanguage, \"_text\")]) || message.text;\n  var messageText = useMemo(function () {\n    return renderText(messageTextToRender, message.mentioned_users);\n  }, [message.mentioned_users, messageTextToRender]);\n  var wrapperClass = customWrapperClass || 'str-chat__message-text';\n  var innerClass = customInnerClass || \"str-chat__message-text-inner str-chat__message-\".concat(theme, \"-text-inner\");\n  if (!messageTextToRender && !message.quoted_message) return null;\n  return React.createElement(\"div\", {\n    className: wrapperClass,\n    tabIndex: 0\n  }, React.createElement(\"div\", {\n    className: \"\\n          \".concat(innerClass, \"\\n          \").concat(hasAttachment ? \" str-chat__message-\".concat(theme, \"-text-inner--has-attachment\") : '', \"\\n          \").concat(isOnlyEmojis(message.text) && !message.quoted_message ? \" str-chat__message-\".concat(theme, \"-text-inner--is-emoji\") : '', \"\\n        \").trim(),\n    \"data-testid\": 'message-text-inner-wrapper',\n    onClick: onMentionsClickMessage,\n    onMouseOver: onMentionsHoverMessage\n  }, message.quoted_message && React.createElement(QuotedMessage, null), message.type === 'error' && React.createElement(\"div\", {\n    className: \"str-chat__\".concat(theme, \"-message--error-message str-chat__message--error-message\")\n  }, t('Error · Unsent')), message.status === 'failed' && React.createElement(\"div\", {\n    className: \"str-chat__\".concat(theme, \"-message--error-message str-chat__message--error-message\")\n  }, message.errorStatusCode !== 403 ? t('Message Failed · Click to try again') : t('Message Failed · Unauthorized')), unsafeHTML && message.html ? React.createElement(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: message.html\n    }\n  }) : React.createElement(\"div\", null, messageText)));\n};\nexport var MessageText = React.memo(UnMemoizedMessageTextComponent);","map":null,"metadata":{},"sourceType":"module"}